{
  "hash": "d955ad9772d26b4f6fd7b7ed24158dc0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: An Example SimPy Model\nauthor:\n  - name: Sammi Rosser\n    orcid: 0000-0002-9552-8988\n    url: 'https://github.com/Bergam0t'\n  - name: Dan Chalk\n    orcid: 0000-0002-4165-4364\n    url: 'https://github.com/hsma-chief-elf'\nformat:\n  html:\n    code-fold: false\n---\n\nIn the example we’re going to look at, we’ll model a very simple model - patients arriving at a clinic for a nurse consultation. One type of entity, one generator, one activity, one queue, one sink, one type of resource.\n\n![](images/example_simplest_model.png)\n\nA SimPy model can seem quite complex at first, particularly for such a simple model as this. But the good news is the overall structure is always the same, regardless of complexity.\n\n## Import statements\n\nFirst we need our import statements. The libraries you import will vary depending on your model and what you need, but these three are likely going to always be in there (the first must be!)\n\n::: {#0c261310 .cell execution_count=1}\n``` {.python .cell-code}\nimport simpy\nimport random\nimport pandas as pd\n```\n:::\n\n\n::: callout-tip\n**random** gives us access to stochastic sampling from probability distributions\n:::\n\n## g class\n\nRemember - the g Class stores our global parameter values for the model so we can easily change aspects of the model to test scenarios.\n\n::: {#05b6f102 .cell execution_count=2}\n``` {.python .cell-code}\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_n_consult_time = 6\n    number_of_nurses = 1\n    sim_duration = 120\n    number_of_runs = 5\n```\n:::\n\n\n## Patient (entity) class\n\n::: {#2dc206d8 .cell execution_count=3}\n``` {.python .cell-code}\n# Class representing patients coming in to the clinic.  Here, patients have\n# two attributes that they carry with them - their ID, and the amount of time\n# they spent queuing for the nurse.  The ID is passed in when a new patient is\n# created.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n```\n:::\n\n\n## Model class\n\n::: {#977f42a4 .cell execution_count=4}\n``` {.python .cell-code}\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create a SimPy resource to represent a nurse, that will live in the\n        # environment created above.  The number of this resource we have is\n        # specified by the capacity, and we grab this value from our g class.\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing time for the nurse\n        # across this run of the model\n        self.mean_q_time_nurse = 0\n\n    # A generator function that represents the DES generator for patient\n    # arrivals\n    def generator_patient_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the patient counter by 1 (this means our first patient\n            # will have an ID of 1)\n            self.patient_counter += 1\n\n            # Create a new patient - an instance of the Patient Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # patient - so here we pass the patient counter to use as the ID.\n            p = Patient(self.patient_counter)\n\n            # Tell SimPy to start up the attend_clinic generator function with\n            # this patient (the generator function that will model the\n            # patient's journey through the system)\n            self.env.process(self.attend_clinic(p))\n\n            # Randomly sample the time to the next patient arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter)\n\n    # A generator function that represents the pathway for a patient going\n    # through the clinic.  Here the pathway is extremely simple - a patient\n    # arrives, waits to see a nurse, and then leaves.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times for the nurse across patients in\n        # this run of the model.\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new patients.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the patient-level results from this run of\n        # the model\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)\n```\n:::\n\n\n## Trial class\n\n::: {#4c5c7fd1 .cell execution_count=5}\n``` {.python .cell-code}\n# Class representing a Trial for our simulation - a batch of simulation runs.\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run (just the mean queuing time for the nurse here)\n    # against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n```\n:::\n\n\nNow we just need to run the trial and print out the results!\n\n::: {#95ca1b81 .cell execution_count=6}\n``` {.python .cell-code}\n# Create an instance of the Trial class\nmy_trial = Trial()\n\n# Call the run_trial method of our Trial object\nmy_trial.run_trial()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRun Number 0\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         1.999138\n2               0.000000         0.050537\n3               0.000000         5.534735\n4               4.842668         4.343900\n5               1.980890         4.924788\n6               4.764097         0.152606\n7               2.337300         1.856604\n8               0.000000         1.922575\n9               0.000000         0.239433\n10              0.000000         8.600984\n11              6.927535        11.445952\n12             13.543065         1.240832\n13             13.082921        11.657120\n14             22.523634        10.764221\n15             31.828509        10.500593\n16             42.134821         6.316369\n17             37.695450        13.727550\nRun Number 1\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         2.981912\n2               0.000000         5.026403\n3               0.851660         7.055668\n4               7.819162         2.161976\n5               6.037519         3.926844\n6               9.961891         0.007959\n7               7.421316        16.748293\n8              20.297538         1.416732\n9              19.635925         4.975646\n10             20.252205         2.157325\n11             20.774943         2.453720\n12              9.135544         0.371875\n13              0.000000         4.513592\n14              0.000000         4.997927\n15              4.964756         7.118073\n16              0.098442         9.726582\n17              5.953267        14.555791\n18             12.176320        14.945011\n19             26.060330         6.083494\n20             29.686997         3.183870\n21             32.121814        10.472416\nRun Number 2\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         0.635599\n2               0.000000         5.942180\n3               0.000000         1.410380\n4               0.609115         4.260951\n5               0.000000         1.663679\n6               0.695821         1.412957\n7               0.000000         0.554011\n8               0.000000         2.452848\n9               0.000000        14.063074\n10             13.843788         6.510570\n11             13.066584         2.988807\n12             12.285030        10.118939\n13             20.511573         1.102553\n14              9.879036         7.931369\n15             16.066427         4.197728\n16             14.189824        17.966929\nRun Number 3\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000        20.662152\n2              17.081906         1.179041\n3              15.198943         6.259041\n4              20.950419        11.435987\n5              29.045439         6.555010\n6              21.430206        11.056897\n7              27.633772         6.599005\n8              32.169563        20.819183\n9              51.984937         2.410215\n10             53.267007         0.056786\n11             51.777849         5.734249\n12             46.700455         9.924293\n13             51.234464         6.474207\n14             48.087152         4.759622\n15             52.045918         6.343605\nRun Number 4\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         5.360526\n2               0.717629         0.666898\n3               0.000000        20.445285\n4              19.376320         2.561793\n5              10.823152         0.816809\n6               7.382799        21.078977\n7              15.480541         2.647045\n8              11.309890        20.781928\n9              31.034256         1.381996\n10             30.422640        23.961155\n11             36.540842         1.385177\n12             35.322946         2.141456\n13             33.710611         0.495245\n14             33.326393         2.979572\n15             35.705080         5.416627\nTrial Results\n            Mean Q Time Nurse\nRun Number                   \n0                   10.685935\n1                   11.107125\n2                    6.321700\n3                   34.573869\n4                   20.076873\n```\n:::\n:::\n\n\n",
    "supporting": [
      "an_example_simpy_model_files"
    ],
    "filters": [],
    "includes": {}
  }
}