{
  "hash": "fe42838ae695bfe8c2d5762d7480a782",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor:\n  - name: Sammi Rosser\n    orcid: 0000-0002-9552-8988\n    url: https://github.com/Bergam0t\n  - name: Dan Chalk\n    orcid: 0000-0002-4165-4364\n    url: https://github.com/hsma-chief-elf\nexecute:\n  eval: false\njupyter: python3\n---\n\n# Running Large Numbers of Scenarios {#sec-test-scenarios}\n\n:::{.callout-note title=\"Acknowledgements\"}\n\nThis solution is based on the work of [Anna Laws](https://github.com/aselaws) [![ORCID ID](images/orcid.png)](https://orcid.org/0000-0002-2145-0487) and [Mike Allen](https://github.com/MichaelAllen1966) [![ORCID ID](images/orcid.png)](https://orcid.org/0000-0002-8746-9957) from the PenCHORD team at the University of Exeter.\n:::\n\nWhen working out the best possible configuration for a service, you may wish to try out a large number of scenarios.\n\nLet's return to our branching model (with the reproducibility set via `sim-tools` as described in chapter @sec-reproducibility).\n\n## Scenarios\n\nWe have a number of parameters available to us in this model:\n\n\n\n::: {#3d75d64a .cell execution_count=2}\n``` {.python .cell-code}\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2\n    mean_n_consult_time = 6\n    mean_d_consult_time = 20\n    number_of_receptionists = 1\n    number_of_nurses = 1\n    number_of_doctors = 2\n    prob_seeing_doctor = 0.6\n    sim_duration = 600\n    number_of_runs = 2\n```\n:::\n\n\nWe can first create a python dictionary of the possible parameter values.\n\n:::{.callout-warning}\nBe careful - the total number of possible permutations starts to grow very rapidly when you have lots of parameters with multiple options for each!\n:::\n\n::: {#f4a1f6ee .cell execution_count=3}\n``` {.python .cell-code}\nscenarios = {\n    'patient_inter': [4, 8, 12],\n    'mean_reception_time': [2, 3],\n    'mean_n_consult_time': [6, 10, 14],\n    'mean_d_consult_time': [10, 20],\n    'number_of_receptionists': [1, 2],\n    'number_of_nurses': [1, 2, 3],\n    'number_of_doctors': [2, 3, 4],\n    'prob_seeing_doctor': [0.6, 0.8]\n}\n```\n:::\n\n\n:::{.callout-tip}\nMake sure to use exactly the same naming for the dictionary keys as is used in your g class.\n\nThis is because we will reset the values of the g class for each Trial programmatically.\n:::\n\n:::{.callout-tip}\nFor a small number of possibilities, setting the variables by hand will be fine.\n\nFor a larger number, you may want to use the `range` function.\n\ne.g. to get 6, 10, 14 you would do\n\n::: {#ddaf220f .cell execution_count=4}\n``` {.python .cell-code}\n[i for i in range(6, 15, 4)]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[6, 10, 14]\n```\n:::\n:::\n\n\n:::\n\n\nNext we use the itertools package to create every possible permutation of the scenarios.\n\n::: {#a4c6a343 .cell execution_count=5}\n``` {.python .cell-code}\nimport itertools\n\n# Generate all scenarios:\nall_scenarios_tuples = [\n    x for x in itertools.product(*scenarios.values())]\n# Convert list of tuples back to list of dictionaries:\nall_scenarios_dicts = [\n    dict(zip(scenarios.keys(), p)) for p in all_scenarios_tuples]\n```\n:::\n\n\nLet's take a look at the first 3 scenario dictionaries.\n\n::: {#635c03c7 .cell execution_count=6}\n``` {.python .cell-code}\nall_scenarios_dicts[0:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[{'patient_inter': 4,\n  'mean_reception_time': 2,\n  'mean_n_consult_time': 6,\n  'mean_d_consult_time': 10,\n  'number_of_receptionists': 1,\n  'number_of_nurses': 1,\n  'number_of_doctors': 2,\n  'prob_seeing_doctor': 0.6},\n {'patient_inter': 4,\n  'mean_reception_time': 2,\n  'mean_n_consult_time': 6,\n  'mean_d_consult_time': 10,\n  'number_of_receptionists': 1,\n  'number_of_nurses': 1,\n  'number_of_doctors': 2,\n  'prob_seeing_doctor': 0.8},\n {'patient_inter': 4,\n  'mean_reception_time': 2,\n  'mean_n_consult_time': 6,\n  'mean_d_consult_time': 10,\n  'number_of_receptionists': 1,\n  'number_of_nurses': 1,\n  'number_of_doctors': 3,\n  'prob_seeing_doctor': 0.6}]\n```\n:::\n:::\n\n\nWe can see that all that has changed is the probability of seeing a doctor (the last key-value pair in each dictionary).\n\nHow many scenarios have we created?\n\n::: {#4f23bc96 .cell execution_count=7}\n``` {.python .cell-code}\nlen(all_scenarios_dicts)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n1296\n```\n:::\n:::\n\n\nNow let's update our model code.\n\n## Coding the model\n\n:::{.callout-tip}\nThroughout the code, anything new that's been added will be followed by the comment `##NEW` - so look out for that in the following code chunks.\n:::\n\n### g class\n\nWe'll just add in a space to for the scenario name.\n\n::: {#684821b9 .cell execution_count=8}\n``` {.python .cell-code}\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2\n    mean_n_consult_time = 6\n    mean_d_consult_time = 20\n    number_of_receptionists = 1\n    number_of_nurses = 1\n    number_of_doctors = 2\n    prob_seeing_doctor = 0.6\n    sim_duration = 600\n    number_of_runs = 2\n    scenario_name = 0 ##NEW\n```\n:::\n\n\n### Patient and model classes\n\nThese remained unchanged.\n\n### Trial class\n\n#### The __init__ method\n\nThe scenario is add to the results dataframe, along with some other results metrics.\n\n::: {#f0a5549b .cell execution_count=9}\n``` {.python .cell-code}\ndef  __init__(self):\n    self.df_trial_results = pd.DataFrame()\n    self.df_trial_results[\"Run Number\"] = [0]\n    self.df_trial_results[\"scenario\"] = [0]  ##NEW\n    self.df_trial_results[\"average_inter_arrival\"] = [0.0]  ##NEW\n    self.df_trial_results[\"num_recep\"] = [0]  ##NEW\n    self.df_trial_results[\"num_nurses\"] = [0]  ##NEW\n    self.df_trial_results[\"num_doctors\"] = [0]  ##NEW\n    self.df_trial_results[\"average_reception_time\"] = [0.0]  ##NEW\n    self.df_trial_results[\"average_nurse_time\"] = [0.0]  ##NEW\n    self.df_trial_results[\"average_doctor_time\"] = [0.0]  ##NEW\n    self.df_trial_results[\"prob_need_doctor\"] = [0.0]  ##NEW\n    self.df_trial_results[\"Arrivals\"] = [0]\n    self.df_trial_results[\"Mean Q Time Recep\"] = [0.0]\n    self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n    self.df_trial_results[\"Mean Q Time Doctor\"] = [0.0]\n    self.df_trial_results.set_index(\"Run Number\", inplace=True)\n```\n:::\n\n\n### The print_trial_results method\n\nThis remains unchanged.\n\n### The run_trial method\n\nThis is updated to include the scenario name and other new metrics.\n\n::: {#0039925a .cell execution_count=10}\n``` {.python .cell-code}\ndef run_trial(self):\n    for run in range(g.number_of_runs):\n        random.seed(run)\n\n        my_model = Model(run)\n        patient_level_results = my_model.run()\n\n        ##NEW\n        self.df_trial_results.loc[run] = [\n            g.scenario_name,\n            g.patient_inter,\n            g.number_of_receptionists,\n            g.number_of_nurses,\n            g.number_of_doctors,\n            g.mean_reception_time,\n            g.mean_n_consult_time,\n            g.mean_d_consult_time,\n            g.prob_seeing_doctor,\n            len(patient_level_results),\n            my_model.mean_q_time_recep,\n            my_model.mean_q_time_nurse,\n            my_model.mean_q_time_doctor\n            ]\n\n    return self.df_trial_results\n```\n:::\n\n\n## The full code\n\nThe full updated code for the model is given below.\n\n:::{.callout-note collapse=\"true\"}\n### Click here to view the code\n\n::: {#6da967d7 .cell execution_count=11}\n``` {.python .cell-code}\nimport simpy\nimport random\nimport pandas as pd\nfrom sim_tools.distributions import Exponential\n\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2\n    mean_n_consult_time = 6\n    mean_d_consult_time = 20\n    number_of_receptionists = 1\n    number_of_nurses = 1\n    number_of_doctors = 2\n    prob_seeing_doctor = 0.6\n    sim_duration = 600\n    number_of_runs = 2\n    scenario_name = 0  ##NEW\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_recep = 0\n        self.q_time_nurse = 0\n        self.q_time_doctor = 0\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        )\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n        self.doctor = simpy.Resource(\n            self.env, capacity=g.number_of_doctors)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0]\n        self.results_df[\"Time with Recep\"] = [0.0]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df[\"Q Time Doctor\"] = [0.0]\n        self.results_df[\"Time with Doctor\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0\n        self.mean_q_time_nurse = 0\n        self.mean_q_time_doctor = 0\n\n        self.patient_inter_arrival_dist = Exponential(mean = g.patient_inter, random_seed = self.run_number*2)\n        self.patient_reception_time_dist = Exponential(mean = g.mean_reception_time, random_seed = self.run_number*3)\n        self.nurse_consult_time_dist = Exponential(mean = g.mean_n_consult_time, random_seed = self.run_number*4)\n        self.doctor_consult_time_dist = Exponential(mean = g.mean_d_consult_time, random_seed = self.run_number*5)\n\n    # A generator function that represents the DES generator for patient\n    # arrivals\n    def generator_patient_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the patient counter by 1 (this means our first patient\n            # will have an ID of 1)\n            self.patient_counter += 1\n\n            # Create a new patient - an instance of the Patient Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # patient - so here we pass the patient counter to use as the ID.\n            p = Patient(self.patient_counter)\n\n            # Tell SimPy to start up the attend_clinic generator function with\n            # this patient (the generator function that will model the\n            # patient's journey through the system)\n            self.env.process(self.attend_clinic(p))\n\n            # Randomly sample the time to the next patient arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter = self.patient_inter_arrival_dist.sample() ##NEW\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter)\n\n    # A generator function that represents the pathway for a patient going\n    # through the clinic.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        start_q_recep = self.env.now\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_recep = self.env.now\n\n            patient.q_time_recep = end_q_recep - start_q_recep\n\n            sampled_recep_act_time = self.patient_reception_time_dist.sample() ##NEW\n\n            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n                 patient.q_time_recep\n            )\n            self.results_df.at[patient.id, \"Time with Recep\"] = (\n                 sampled_recep_act_time\n            )\n\n            yield self.env.timeout(sampled_recep_act_time)\n\n        # Here's where the patient finishes with the receptionist, and starts\n        # queuing for the nurse\n\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = self.nurse_consult_time_dist.sample() ##NEW\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n        # Conditional logic to see if patient goes on to see doctor\n        # We sample from the uniform distribution between 0 and 1.  If the value\n        # is less than the probability of seeing a doctor (stored in g Class)\n        # then we say the patient sees a doctor.\n        # If not, this block of code won't be run and the patient will just\n        # leave the system (we could add in an else if we wanted a branching\n        # path to another activity instead)\n        if random.uniform(0,1) < g.prob_seeing_doctor:\n            start_q_doctor = self.env.now\n\n            with self.doctor.request() as req:\n                yield req\n\n                end_q_doctor = self.env.now\n\n                patient.q_time_doctor = end_q_doctor - start_q_doctor\n\n                sampled_doctor_act_time = self.nurse_consult_time_dist.sample()\n\n                self.results_df.at[patient.id, \"Q Time Doctor\"] = (\n                    patient.q_time_doctor\n                )\n                self.results_df.at[patient.id, \"Time with Doctor\"] = (\n                    sampled_doctor_act_time\n                )\n\n                yield self.env.timeout(sampled_doctor_act_time)\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times across patients in this run of the\n        # model.\n        self.mean_q_time_recep = self.results_df[\"Q Time Recep\"].mean()\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n        self.mean_q_time_doctor = self.results_df[\"Q Time Doctor\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new patients.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the patient-level results from this run of\n        # the model\n        return (self.results_df)\n\n# Class representing a Trial for our simulation - a batch of simulation runs.\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"scenario\"] = [0]  ##NEW\n        self.df_trial_results[\"average_inter_arrival\"] = [0.0]  ##NEW\n        self.df_trial_results[\"num_recep\"] = [0]  ##NEW\n        self.df_trial_results[\"num_nurses\"] = [0]  ##NEW\n        self.df_trial_results[\"num_doctors\"] = [0]  ##NEW\n        self.df_trial_results[\"average_reception_time\"] = [0.0]  ##NEW\n        self.df_trial_results[\"average_nurse_time\"] = [0.0]  ##NEW\n        self.df_trial_results[\"average_doctor_time\"] = [0.0]  ##NEW\n        self.df_trial_results[\"prob_need_doctor\"] = [0.0]  ##NEW\n        self.df_trial_results[\"Arrivals\"] = [0]\n        self.df_trial_results[\"Mean Q Time Recep\"] = [0.0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results[\"Mean Q Time Doctor\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results.round(2))\n        print(self.df_trial_results.mean().round(2))\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            random.seed(run)\n\n            my_model = Model(run)\n            patient_level_results = my_model.run()\n\n            ##NEW\n            self.df_trial_results.loc[run] = [\n                g.scenario_name,\n                g.patient_inter,\n                g.number_of_receptionists,\n                g.number_of_nurses,\n                g.number_of_doctors,\n                g.mean_reception_time,\n                g.mean_n_consult_time,\n                g.mean_d_consult_time,\n                g.prob_seeing_doctor,\n                len(patient_level_results),\n                my_model.mean_q_time_recep,\n                my_model.mean_q_time_nurse,\n                my_model.mean_q_time_doctor\n                ]\n\n        # Once the trial (ie all runs) has completed, return the final results\n        return self.df_trial_results\n```\n:::\n\n\n:::\n\n## Running the scenarios\n\nLet's now create all of the scenario objects.\n\n::: {#085e4272 .cell execution_count=12}\n``` {.python .cell-code}\nresults = []\n\nfor index, scenario_to_run in enumerate(all_scenarios_dicts):\n    g.scenario_name = index\n\n    # Overwrite defaults from the passed dictionary\n\n    for key in scenario_to_run:\n        setattr(g, key, scenario_to_run[key])\n\n    my_trial = Trial()\n\n    # Call the run_trial method of our Trial object\n    results.append(my_trial.run_trial())\n\npd.concat(results).groupby(\"scenario\").mean().head(20)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>average_inter_arrival</th>\n      <th>num_recep</th>\n      <th>num_nurses</th>\n      <th>num_doctors</th>\n      <th>average_reception_time</th>\n      <th>average_nurse_time</th>\n      <th>average_doctor_time</th>\n      <th>prob_need_doctor</th>\n      <th>Arrivals</th>\n      <th>Mean Q Time Recep</th>\n      <th>Mean Q Time Nurse</th>\n      <th>Mean Q Time Doctor</th>\n    </tr>\n    <tr>\n      <th>scenario</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>133.505891</td>\n      <td>0.676479</td>\n    </tr>\n    <tr>\n      <th>1.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>105.505442</td>\n      <td>1.263302</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>129.216818</td>\n      <td>0.014072</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>107.602443</td>\n      <td>0.147246</td>\n    </tr>\n    <tr>\n      <th>4.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>129.216818</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>5.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>95.026033</td>\n      <td>0.032971</td>\n    </tr>\n    <tr>\n      <th>6.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>5.215946</td>\n      <td>2.477255</td>\n    </tr>\n    <tr>\n      <th>7.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>7.497472</td>\n      <td>1.842969</td>\n    </tr>\n    <tr>\n      <th>8.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>4.266968</td>\n      <td>0.592513</td>\n    </tr>\n    <tr>\n      <th>9.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>9.260408</td>\n      <td>0.089449</td>\n    </tr>\n    <tr>\n      <th>10.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>5.405535</td>\n      <td>0.063385</td>\n    </tr>\n    <tr>\n      <th>11.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>8.370422</td>\n      <td>0.015803</td>\n    </tr>\n    <tr>\n      <th>12.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>0.833707</td>\n      <td>1.786491</td>\n    </tr>\n    <tr>\n      <th>13.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>0.871273</td>\n      <td>2.689420</td>\n    </tr>\n    <tr>\n      <th>14.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>1.155603</td>\n      <td>0.142991</td>\n    </tr>\n    <tr>\n      <th>15.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>0.697876</td>\n      <td>0.615490</td>\n    </tr>\n    <tr>\n      <th>16.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>0.925463</td>\n      <td>0.009072</td>\n    </tr>\n    <tr>\n      <th>17.0</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>1.099929</td>\n      <td>0.540083</td>\n      <td>0.186033</td>\n    </tr>\n    <tr>\n      <th>18.0</th>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.6</td>\n      <td>144.0</td>\n      <td>0.091630</td>\n      <td>134.540431</td>\n      <td>0.676479</td>\n    </tr>\n    <tr>\n      <th>19.0</th>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>144.0</td>\n      <td>0.091630</td>\n      <td>106.515917</td>\n      <td>1.263302</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFinally the following will give you a nice dictionary of all of your scenarios.\n\n::: {#7327c354 .cell execution_count=13}\n``` {.python .cell-code}\npd.DataFrame.from_dict(all_scenarios_dicts).head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>patient_inter</th>\n      <th>mean_reception_time</th>\n      <th>mean_n_consult_time</th>\n      <th>mean_d_consult_time</th>\n      <th>number_of_receptionists</th>\n      <th>number_of_nurses</th>\n      <th>number_of_doctors</th>\n      <th>prob_seeing_doctor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4</td>\n      <td>2</td>\n      <td>6</td>\n      <td>10</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>2</td>\n      <td>6</td>\n      <td>10</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>2</td>\n      <td>6</td>\n      <td>10</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0.6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2</td>\n      <td>6</td>\n      <td>10</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>2</td>\n      <td>6</td>\n      <td>10</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0.6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#73ed4921 .cell execution_count=14}\n``` {.python .cell-code}\npd.DataFrame.from_dict(all_scenarios_dicts).tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>patient_inter</th>\n      <th>mean_reception_time</th>\n      <th>mean_n_consult_time</th>\n      <th>mean_d_consult_time</th>\n      <th>number_of_receptionists</th>\n      <th>number_of_nurses</th>\n      <th>number_of_doctors</th>\n      <th>prob_seeing_doctor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1291</th>\n      <td>12</td>\n      <td>3</td>\n      <td>14</td>\n      <td>20</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>1292</th>\n      <td>12</td>\n      <td>3</td>\n      <td>14</td>\n      <td>20</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0.6</td>\n    </tr>\n    <tr>\n      <th>1293</th>\n      <td>12</td>\n      <td>3</td>\n      <td>14</td>\n      <td>20</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>1294</th>\n      <td>12</td>\n      <td>3</td>\n      <td>14</td>\n      <td>20</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>0.6</td>\n    </tr>\n    <tr>\n      <th>1295</th>\n      <td>12</td>\n      <td>3</td>\n      <td>14</td>\n      <td>20</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>0.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "testing_large_numbers_scenarios_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}