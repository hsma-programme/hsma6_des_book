# An Introduction to Approaching Multiple Entity Types

Let's imagine we want to model some more variety within the patients (entities) arriving in our model.

Maybe patients are differentiated by something - their method of arrival, or the illness they have, or the severity of their symptoms, and consequently have

- different arrival rates
- different distributions for the amount of time spend with resources
- different probabilities at branching points
- different pathways entirely (but still within your system of interest)

The flexibility of simpy and Python does mean there are a range of ways we could approach coding this in.

In this chapter, we will give a bit of an introduction to how you might make decisions about

- whether to have a single Patient class or multiple Patient classes that inherit from the basic Patient class
- whether to have a single generator or multiple generators

:::{.callout-note}
At this stage in your modelling, you will need to start drawing on your creativity!

Consider the approaches described throughout this chapter and the example given in the next chapter, but work this into your own solution.
:::

## Approaches to Managing Arrivals

When we start having multiple types of patients, we will need to think about how we set them up in our system.

We could filter our historical data by patient type, work out the inter-arrival time between the 'seriously injured' patients and set up a generator for these patients, and then repeat this for the 'mildly injured' patients.

However - you could instead have stuck with a single generator, like in our previous approaches throughout the book, but instead sampled whether the incoming patient is a 'seriously injured' or 'mildly injured' patient at the start of their journey based on known proportions of these patients.

How might we decide which of these approaches to use?

:::{.callout-tip}
The basic rule of thumb is have different generators if the entities - and/or what happens to them - is different if they come in via a different route.
:::

You may opt for different generators if
- a) the inter-arrival rate of that way of entering the system is fundamentally different *(the most common reason)*, and/or
- b) if you're modelling a different pathway in the same modelled system (e.g. telephone calls coming in to the same system as patients turning up in person etc).

The authors of this book would generally steer away from having a different generator just for a different patient type or severity, and would instead use attributes to differentiate between the patients. These attributes can then be read when making decisions in the pathway, like where to go in a branch, or which distribution to sample from for an activity time instead.

## Multiple Patient Classes versus a Single Patient Class

Similarly, when it comes to our patient classes, there are multiple ways we could handle it.

We could use the concept of inheritance to have a main patient class, then have multiple 'child' classes who inherit the properties of the parent class while also recording their own special attributes, with the different processes generating the relevant patient type.

However, if our patients are following the same or a sufficiently similar route that means that the attributes of the patient classes don't substantially change, it is often simpler to add an additional attribute that we set when initialising a patient to track their 'type', allowing us to then filter and subset patient groups in our results. This is similar to what is done in the [priority resources](priority_based_queueing.qmd) chapter.
