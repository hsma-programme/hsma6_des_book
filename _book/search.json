[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HSMA - the little book of DES",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html",
    "href": "intro_to_des_concepts.html",
    "title": "2  Introduction to DES Concepts",
    "section": "",
    "text": "2.1 Why use DES?\nDiscrete event simulation allows you to\nThis can allow you to optimize a system, leading to better balance and better flow, which can in turn lead to - A safer environment - Less stress for staff - Improved patient experience - Meeting targets",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html#why-use-des",
    "href": "intro_to_des_concepts.html#why-use-des",
    "title": "2  Introduction to DES Concepts",
    "section": "",
    "text": "Test changes in a risk-free, low-cost way\nExplore the impact of changes in demand\nSee whether a system can cope on bad days as well as good days\nPredict how long it will take to clear an existing backlog",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html#an-example",
    "href": "intro_to_des_concepts.html#an-example",
    "title": "2  Introduction to DES Concepts",
    "section": "2.2 An example",
    "text": "2.2 An example\nImagine being able to create a model of an emergency department.\nIn this model, you can change all sorts of things - how many doctors, nurses and receptionists there are at each step - how long it takes for people to be seen - how many people go into the trauma pathway versus the non-trauma pathway\nThen sprinkle in a dose of randomness - because in real life, you’re not going to have each appointment taking the exact same amount of time, or people arriving exactly every five minutes - and then you can start to explore just how well a system will perform, what changes might have the most impact, and what configuration is likely to perform best. Then you can run it 1000 times with slightly different random days to see how well it performs on both good days and bad.\nYou can polish it all off by visualising the individual entities moving through the system so people with little understanding of discrete event simulation can get a sense of what’s going on, and you can give them access to all of the controls - the number of nurses and doctors, the average consultation length, and more - so that they can explore the impact of theser changes themselves.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html#runs-and-trials",
    "href": "intro_to_des_concepts.html#runs-and-trials",
    "title": "2  Introduction to DES Concepts",
    "section": "2.3 Runs and Trials",
    "text": "2.3 Runs and Trials\nIn a stochastic model, it is important that we do not just run a model once if we’re looking to draw insights from our results. This is because every run of the simulation will have different random samples for inter-arrival times, activity times etc.\nWhat if you had a run with unusually long activity times sampled (a run of “bad luck”)? Or unusually long inter-arrival times (a run of “good luck”)?\nWe need to run a stochastic simulation many times and take summary statistics over the results from each run to get more representative results from the model.\nA single run of a model for a simulated period of time is known as a run. A batch of multiple runs with the same parameter values is known as a trial.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html#key-des-terminology",
    "href": "intro_to_des_concepts.html#key-des-terminology",
    "title": "2  Introduction to DES Concepts",
    "section": "2.4 Key DES Terminology",
    "text": "2.4 Key DES Terminology\n\nEntities are the things that are flowing through the sequential processes in the model (eg patients, test results, callers on a phone)\nGenerators are the way in which entities enter the model and come into being (eg arriving at ED by ambulance, self-presenting, referral from GP)\nInter-Arrival Times specify the time between entities being generated in the generators (ie the time between arrivals into the modelled system)\nActivities (sometimes referred to as Servers) are the bits of process that the entities are queuing up for (eg triaged, seen at reception, speak to doctor etc)\nActivity Time represents the amount of time it takes for an activity to happen to an entity - this is normally stochastic (random) and drawn from a distribution for each entity (eg time spent with nurse, time to be treated etc)\nResources are the “stuff” and / or “staff” required for an activity to happen to an entity (eg nurse to triage, bed for patient, consultation room for GP to see patient etc, X-Ray machine and Radiographer to be free for X-Ray etc). Important - resources may be shared between activities (eg the same nurse may be required to run multiple activities in our model, or even things we haven’t explicitly modelled)\nQueues hold entities that are waiting for an activity. Entities wait in a queue until the activity has both the capacity and all required resources.\nSinks are how entities leave the model (the bit of system we’re modelling)\n\n\n2.4.1 Entities\nEach entity may have certain “attributes” that it “carries with them” to help determine its journey through the modelled system. For example :\n\nwhether it goes down path A or B\nhow long it spends in an activity\nits priority in a queue for an activity\n\nThere may also be more than one type of entity in a model at the same time. For example, patients in a clinic, their test results, and phone calls into the clinic are all entities that we may want to capture when modelling the clinic.\n\n\n\n2.4.2 Generators and Inter-Arrival\nA generator creates new entities to bring into the system. The rate at which new entities are generated is determined by an inter-arrival time.\nThe inter-arrival time determines the time between one entity being generated, and the next one being generated.\nInter-arrival times may be fixed, but are typically sampled (drawn) stochastically (randomly) from a distribution to capture variability (even if the variability is small).\nAn Exponential Distribution is often used to sample inter-arrival times. More than one distribution may be used for the same generator (e.g. for different times of the day, day of week etc). You may also (often) have more than one generator in a system.\n\n\n\n2.4.3 Queues\nEach activity in a Discrete Event Simulation has an associated queue. The queue holds entities whilst they wait for the activity to become available for them.\nEach queue has a queuing policy. This determines the order in which entities are released from the queue into the activity. The two most common queuing policies are:\n\nFirst In First Out (FIFO) : entities are seen in the order they arrive. This is the default.\nPriority-based : entities are seen according to some priority attribute. Ties often resolved using FIFO\n\n\n\n\n2.4.4 Activities and Activity Times\nEach activity in a DES describes a process – this may be a simple atomic task, or a set of tasks bundled together. For an activity to take place, it needs : - An entity (drawn from the queue) - The required type and number of resource to be available\nOnce the above conditions have been met, the activity begins. The entity, and the resource(s) are then locked in place for an amount of time – the Activity Time. The resource(s) cannot be used elsewhere until the activity time has passed.\nActivity times may be fixed, but are typically sampled stochastically from a distribution.\n\n\n\n\n\n\n\nTip\n\n\n\nThe common distribution for process times is the Log Normal distributions. However, Exponential Distributions can be a good starting point, as it’s easy to change the “mean” when playing around with things. You can then change to something like a Log Normal once you (and the stakeholders) are happy\n\n\n\n\n2.4.5 Resources\nResources are needed to undertake activities. An activity may require just a single resource, more than one resource of the same type, or multiple resources of different types.\n\n\n\n\n\n\nTip\n\n\n\nAn activity may not require a resource at all, but think carefully to ensure that it really is either “resourceless” or there is no constraint on the resource (and so doesn’t need to be modelled).\nResources can include - “staff” (e.g. doctors, nurses, officers etc) - “stuff” (beds, test equipment, detention cell etc)\n\n\nResources can (and often are) shared across a system, so may be required for more than one activity. Therefore, a resource drain in one part of the system can affect another.\nAll required resources are needed for an activity to take place.\nIn some activities, having optional additional resource may speed up the activity (though rarely linearly).\n\n\n\n2.4.6 Sinks\nSinks are how entities leave the system, or part of the system, being modelled. Sinks might include : - an entity physically leaving a system (e.g. discharge from hospital) - an entity no longer existing (e.g. death, use of sample, end of telephone call) - an entity no longer needing to access activities that we’re interested in (e.g. they leave the bit of the system that we’re modelling)\nThe most important thing to remember about a sink is that it doesn’t necessarily represent an entity leaving the system entirely.\nFor example, the scope of your model may only cover the triage aspect of an Emergency Department. Therefore, a valid sink might be placed after their triage - they’ve left the scope of our model\n\n\n\n2.4.7 Branching Paths\nReal world systems (and the models of those systems) are rarely linear. Often, different things will happen to different entities. In a Discrete Event Simulation, this means different entities flowing to different activities, or different sinks.\nWe might differentiate based on : - an attribute of the patient (e.g. patients with a higher priority value flow through a different set of activities) - probability (e.g. we know that approx 60% of these patients end up being admitted, so we’ll randomly select for them to be admitted 60% of the time) - time (e.g. after a certain time of day, entities flow through a different set of activities)\n\n\n\n2.4.8 Outputs\nAs with any type of model, it’s important to think about what outputs you need your DES model to generate to answer your modelling questions. As a DES model is used to model queuing and resourcing problems, typical DES model outputs include average, min, max, xth percentile of :\n\ntime entities are in system\nqueue length and duration for queues of interest\nrate of resource utilisation (ie % of time a resource is in use for activities in the model)\nprobability of exceeding a defined queue length / queue time / resource utilisation threshold (e.g. 4 hour wait in ED, overcrowding thresholds)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_simpy.html",
    "href": "intro_to_simpy.html",
    "title": "3  An Introduction to SimPy",
    "section": "",
    "text": "3.1 Simulation Time\nSimPy simulations run in time units*. These units of time can represent any real world amount of time we like as long as we are consistent within the same model.\nOur time units should represent the lowest level of real world time that we need to represent in the model. In models of pathways where people arrive for a service, this will likely be minutes (seconds is too much, and hours is probably not enough, unless all the processes are slow). But we may have pathways where we measure time in days or weeks (e.g. referral pathways).\nFor example, in an ED model, our time units may represent minutes. So we specify everything in minutes - inter-arrival times, activity times etc.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>An Introduction to SimPy</span>"
    ]
  },
  {
    "objectID": "intro_to_simpy.html#simulation-time",
    "href": "intro_to_simpy.html#simulation-time",
    "title": "3  An Introduction to SimPy",
    "section": "",
    "text": "Strictly speaking, SimPy doesn’t run in time units ticking away one by one. Instead, it schedules events jumps to the next event. But don’t worry about that for your purposes. Just know that, because of this, you will see current simulation time as floating point numbers (eg the current time unit could be 3.6 etc).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>An Introduction to SimPy</span>"
    ]
  },
  {
    "objectID": "intro_to_simpy.html#generator-functions",
    "href": "intro_to_simpy.html#generator-functions",
    "title": "3  An Introduction to SimPy",
    "section": "3.2 Generator Functions",
    "text": "3.2 Generator Functions\nSimPy is built around a special type of function in Python known as a Generator Function.\nSo let’s have a look at what we mean by a Generator Function.\nConventional functions in Python are called, then run with some (optional) inputs, and then finish (usually by returning some output). When we call the function again, it runs again, from scratch.\nGenerator functions remember where they were and what they did when control is passed back (they retain their local state), so that they can continue where they left off, and can be used as powerful iterators (for and while loops are other examples of iterators).\nThis is very useful where we want state to be maintained, so we can remember how long until we generate the next entity, or where an entity is in a pathway…\nLet’s look at a very simple example of a generator function to see how they work.\n\nIn SimPy, we use Generator Functions in two different places :\nTo model the DES generators (arrival points) To model the individual journey of each entity\nLet’s imagine we are modelling patients in a patient pathway.\nFor 1, the generator function basically creates a patient, sets them off on their pathway, then freezes in place for an amount of time representing the inter-arrival time to the next patient. Then it does it all over again.\nFor 2, the generator function requests a resource and freezes until that resource is available (the queue). When the resource is available it freezes in place for an amount of time with it (the activity). It will then either move on to the next activity (and request the resource for it, as above) or end if there are no further activities.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>An Introduction to SimPy</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html",
    "href": "recommended_structure_classes_for_des_models.html",
    "title": "4  The Recommended Structure for DES Models",
    "section": "",
    "text": "4.1 Class breakdown\nLet’s look at the purpose and recommended structure of each class in a bit more detail.\nHere, the example code given relates to a customer support helpline. Customers call a helpline, wait on hold until a customer support agent is ready to speak to them, speak to the agent for a period of time, and then the call ends and the agent connects to the next person who is waiting on hold. If there is no-one on hold at the time, the agent will get a break until someone else arrives!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html#class-breakdown",
    "href": "recommended_structure_classes_for_des_models.html#class-breakdown",
    "title": "4  The Recommended Structure for DES Models",
    "section": "",
    "text": "4.1.1 g Class\nThe g Class stores our global parameter values for the model so we can easily change aspects of the model to test scenarios. This includes :\n\nValues to define inter-arrival time distributions (eg mean, standard deviation etc)\nValues to define activity time distributions (eg mean, standard deviation etc)\nNumber of each resource\nDuration of simulation runs\nNumber of runs in a trial\n\nWe do not create an instance of g class. Instead, we refer to it directly when we need to access something in it.\n\n\n\n\n\n\nExample g class\n\n\n\n\nclass g:\n    time_units_between_customer_arrivals = 5\n    mean_customer_service_time = 6\n    number_of_customer_support_agents = 1\n    sim_duration = 1440\n    number_of_runs = 10",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html#entity-class",
    "href": "recommended_structure_classes_for_des_models.html#entity-class",
    "title": "4  The Recommended Structure for DES Models",
    "section": "4.2 Entity class",
    "text": "4.2 Entity class\nThe entity class represents our entity in the model - which, for healthcare models, will often be patients.\nWe can store attributes here that entities carry with them that we may want to access (think of a person carrying a clipboard with them with information on it).\nIn a simple model, an entity may just carry their ID and how long they spent queuing for a resource (once known). But more advanced models could store things like their condition, their priority, probability of going down path x, etc.\n\n\n\n\n\n\nExample entity class\n\n\n\n\nclass Customer:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.queue_time_customer_support_agent = 0",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html#model-class",
    "href": "recommended_structure_classes_for_des_models.html#model-class",
    "title": "4  The Recommended Structure for DES Models",
    "section": "4.3 Model Class",
    "text": "4.3 Model Class\nThe Model Class represents the system we are modelling - this might be a clinic, for example. As such, there’s a lot more to unpack here, so let’s take this bit by bit.\nFirst, we’ll look at the constructor for our model.\nThe constructor will set up - a SimPy Environment (basically where everything lives) - an entity counter (which we’ll use to give entities - such as patients - a simple ID) - the resources we need (for example, our nurses) - a DataFrame to store per-entity results in a single run of the model - attributes to store things like how long the entities queued for each activity\nWhat the constructor sets up doesn’t have to be limited to these things - anything relating to the system as a whole that makes sense to store here could be included.\n\n4.3.1 DES generator - arrivals of entities to the system\nWithin the Model Class we have a generator function that will represent our DES generator for entities arriving into our process.\nHere’s basically how it works:\nKEEP REPEATING THE FOLLOWING FOREVER (until the simulation stops running) : 1. Increment the counter to get ID for next entity 2. Create a new entity and give them that ID 3. Start up an instance of the generator function for their journey through the process and chuck them in it 4. Sample the time until the next entity arrives 5. FREEZE this function until that time elapses 6. Return to 1\n\n\n4.3.2 DES Generator - the entity journey\nNow, let’s look at the big one. The other generator function - the one that represents an entity’s journey through the system (this is the one we lobbed the new entities generated by the previous generator).\nHere’s how this works : 1. Record time started queuing for first activity 2. Request resource for first activity 3. Wait until resource is free 4. Once resource is free, grab the resource and keep hold of the resource until finished with them. Record time finished queuing and calculate queue time. 5. Sample how long will spend in this activity. 6. FREEZE this instance of the function until that time elapses (freezing the resource with it, so it’s not available to anyone else) 7. If there’s another activity, do the same again for that one. If not, end (and therefore entity leaves the model).\n\n\n4.3.3 Running the model\nFinally, we need a run method in our Model class. Basically, the run method will : - Start up our DES generators (our arrival points) - we only have one here. - Tell the simulation to run for the duration specified in g Class. - Call the calculate run results method in the previous slide. - Print out the run number with the patient-level results from this run.\n\n\n\n\n\n\nFull Example model class\n\n\n\n\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a customer counter (which we'll use as a customer ID)\n        self.customer_counter = 0\n\n        # Create a SimPy resource to represent a customer support agent, that will live in the\n        # environment created above.  The number of this resource we have is\n        # specified by the capacity, and we grab this value from our g class.\n        self.customer_support_agent = simpy.Resource(self.env, capacity=number_of_customer_support_agents)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the customer ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Customer ID\"] = [1]\n        self.results_df[\"Queue Time\"] = [0.0]\n        self.results_df[\"Time with Customer Support Agent\"] = [0.0]\n        self.results_df.set_index(\"Customer ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing time for the support agents\n        # across this run of the model\n        self.mean_queue_time_support_agent = 0\n\n    # A generator function that represents the DES generator for customer\n    # arrivals\n    def generator_customer_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the customer counter by 1 (this means our first customer\n            # will have an ID of 1)\n            self.customer_counter += 1\n\n            # Create a new customer - an instance of the customer Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # customer - so here we pass the customer counter to use as the ID.\n            c = Customer(self.customer_counter)\n\n            # Tell SimPy to start up the use_customer_service_helpline generator function with\n            # this customer (the generator function that will model the\n            # customer's journey through the system)\n            self.env.process(self.use_customer_service_helpline (c))\n\n            # Randomly sample the time to the next customer arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter_arrival_time = random.expovariate(1.0 / g.time_units_between_customer_arrivals)\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter_arrival_time)\n\n    # A generator function that represents the pathway for a customer calling our helpline\n    # Here the pathway is extremely simple - a customer\n    # arrives in the call system, waits to be connected to a customer support agent,\n    # spends a varying amount of time being helped by the agent, and then leaves,\n    # meaning the agent is free to help the next person.\n    # The customer object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def use_customer_service_helpline(self, customer):\n        # Record the time the patient started queuing for a nurse\n        start_q_customer_support_agent = self.env.now\n\n        # This code says request a customer support agent resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.customer_support_agent.request() as req:\n            # Freeze the function until the request for a customer support agent can be met.\n            # The customer is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a customer support agent has\n            # been met.  We now have the customer support agent, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_customer_support_agent = self.env.now\n\n            # Calculate the time this patient was queuing for the customer support agent, and\n            # record it in the customer's attribute for this.\n            customer.queue_time_customer_support_agent = end_q_customer_support_agent - start_q_customer_support_agent\n\n            # Now we'll randomly sample the time this customer with the customer support agent.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_customer_support_agent_activity_time = random.expovariate(1.0 /\n                                                        g.mean_customer_service_time)\n\n            # Here we'll store the queuing time for the customer support agent and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this customer.\n            #\n            # In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            #\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[customer.id, \"Queue Time\"] = (\n                customer.queue_time_customer_support_agent)\n            self.results_df.at[customer.id, \"Time with Customer Support Agent\"] = (\n                sampled_customer_support_agent_activity_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the customer support\n            # agent.\n            yield self.env.timeout(sampled_customer_support_agent_activity_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times for the nurse across patients in\n        # this run of the model.\n        self.mean_queue_time_support_agent = self.results_df[\"Time with Customer Support Agent\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new customers.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_customer_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the customer-level results from this run of\n        # the model\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html#trial-class",
    "href": "recommended_structure_classes_for_des_models.html#trial-class",
    "title": "4  The Recommended Structure for DES Models",
    "section": "4.4 Trial class",
    "text": "4.4 Trial class\nOur final class is the Trial class. This represents a batch of simulation runs, and will contain methods to run a batch of runs, as well as store, record and display results from the trial.\n\n\n\n\n\n\nExample trial class\n\n\n\n\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run (just the mean queuing time for the nurse here)\n    # against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Queue Time Customer Supoprt Agent\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            self.df_trial_results.loc[run] = [my_model.mean_queue_time_support_agent]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n\n\n\nWe can, of course, then take the means over the runs in the trial to get the average predicted queuing time etc. - and we should probably do that in a separate method in the Trial class.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "exercise_des_design.html",
    "href": "exercise_des_design.html",
    "title": "5  Exercise - Designing a DES",
    "section": "",
    "text": "Design a Discrete Event Simulation for a system of your choosing.\nThink about some different possibilities (and these don’t have to be health-related, they can be anything! A restaurant? Airport? Customer service line?).\nYou should then draw up a design for the model. This should include : - The “what if?” question(s) you would use the model to answer - A process map of the system you are looking to model - A conceptual model for the proposed Discrete Event Simulation (which may not include everything in the process map).\nIdentify the types of entities, generators, activities, queues, resources and sinks.\nDescribe what each of your inter-arrival times and activity times represent, and from where you might draw the data.\nConsider the scope, level of detail etc when designing your model. What do you need to model to answer your question? How can you simplify your model?\n\n\n\n\n\n\nTip\n\n\n\nThe website draw.io (also known as diagrams.net) is a great free resource for creating process maps.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exercise - Designing a DES</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html",
    "href": "an_example_simpy_model.html",
    "title": "6  An example simpy model",
    "section": "",
    "text": "6.1 Import statements\nFirst we need our import statements. The libraries you import will vary depending on your model and what you need, but these three are likely going to always be in there (the first must be!)\nimport simpy\nimport random\nimport pandas as pd",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#import-statements",
    "href": "an_example_simpy_model.html#import-statements",
    "title": "6  An example simpy model",
    "section": "",
    "text": "Tip\n\n\n\nrandom gives us access to stochastic sampling from probability distributions",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#g-class",
    "href": "an_example_simpy_model.html#g-class",
    "title": "6  An example simpy model",
    "section": "6.2 g Class",
    "text": "6.2 g Class\nRemember - the g Class stores our global parameter values for the model so we can easily change aspects of the model to test scenarios.\n\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_n_consult_time = 6\n    number_of_nurses = 1\n    sim_duration = 120\n    number_of_runs = 5",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#patient-entity-class",
    "href": "an_example_simpy_model.html#patient-entity-class",
    "title": "6  An example simpy model",
    "section": "6.3 Patient (entity) Class",
    "text": "6.3 Patient (entity) Class\n\n# Class representing patients coming in to the clinic.  Here, patients have\n# two attributes that they carry with them - their ID, and the amount of time\n# they spent queuing for the nurse.  The ID is passed in when a new patient is\n# created.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#model-class",
    "href": "an_example_simpy_model.html#model-class",
    "title": "6  An example simpy model",
    "section": "6.4 Model Class",
    "text": "6.4 Model Class\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create a SimPy resource to represent a nurse, that will live in the\n        # environment created above.  The number of this resource we have is\n        # specified by the capacity, and we grab this value from our g class.\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing time for the nurse\n        # across this run of the model\n        self.mean_q_time_nurse = 0\n\n    # A generator function that represents the DES generator for patient\n    # arrivals\n    def generator_patient_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the patient counter by 1 (this means our first patient\n            # will have an ID of 1)\n            self.patient_counter += 1\n\n            # Create a new patient - an instance of the Patient Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # patient - so here we pass the patient counter to use as the ID.\n            p = Patient(self.patient_counter)\n\n            # Tell SimPy to start up the attend_clinic generator function with\n            # this patient (the generator function that will model the\n            # patient's journey through the system)\n            self.env.process(self.attend_clinic(p))\n\n            # Randomly sample the time to the next patient arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter)\n\n    # A generator function that represents the pathway for a patient going\n    # through the clinic.  Here the pathway is extremely simple - a patient\n    # arrives, waits to see a nurse, and then leaves.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times for the nurse across patients in\n        # this run of the model.\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new patients.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the patient-level results from this run of\n        # the model\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#trial-class",
    "href": "an_example_simpy_model.html#trial-class",
    "title": "6  An example simpy model",
    "section": "6.5 Trial Class",
    "text": "6.5 Trial Class\n\n# Class representing a Trial for our simulation - a batch of simulation runs.\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run (just the mean queuing time for the nurse here)\n    # against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n\nNow we just need to run the trial and print out the results!\n\n# Create an instance of the Trial class\nmy_trial = Trial()\n\n# Call the run_trial method of our Trial object\nmy_trial.run_trial()\n\nRun Number 0\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         7.614744\n2               7.610065         5.109437\n3              10.143249         5.623511\n4              15.573619         5.613991\n5              21.123973         0.194743\n6               0.000000        13.927540\n7              11.032970         0.592822\n8               9.936472         9.314171\n9              15.140662         2.003631\n10             13.870360         3.975410\n11             15.322007         6.693202\n12              9.365970         1.199749\n13              5.754925         1.590947\n14              4.779997         1.154199\n15              0.173774         9.283888\n16              8.115193         0.106132\n17              0.295368         0.327732\n18              0.190066         5.239028\n19              4.019772         0.619420\n20              0.000000         9.151451\n21              0.000000        30.207258\nRun Number 1\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         6.087908\n2               0.000000         0.571920\n3               0.000000         0.821938\n4               0.000000         0.186725\n5               0.000000         0.922527\n6               0.000000         0.889827\n7               0.000000         2.445888\n8               2.269606         0.817938\n9               0.000000         1.058017\n10              0.000000         0.601712\n11              0.000000         0.750404\n12              0.000000         0.977873\n13              0.000000         9.366462\n14              3.836580         9.014683\n15             11.835215         9.183815\n16             18.915777         6.700189\n17             24.793999         1.761926\n18             25.935836         0.887397\n19             25.500402        18.116778\nRun Number 2\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         1.315429\n2               0.000000         9.032973\n3               1.615955         5.789978\n4               0.153444         0.317371\n5               0.000000         1.566285\n6               0.250596         8.166204\n7               7.109212        19.727538\n8              11.094811         7.058286\n9              11.094779        16.116200\n10             16.532203        24.837476\n11             30.450152         1.411548\n12             27.258360         0.328869\n13             19.174615         3.410289\n14             19.516259         0.114131\n15             11.088819        12.373363\n16             18.062004         1.949140\nRun Number 3\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         4.614368\n2               4.503168         2.848958\n3               1.995269        15.720112\n4               4.249591         1.581535\n5               0.000000         6.671167\n6               0.000000         1.390900\n7               0.000000         3.622535\n8               2.627607         5.990652\n9               4.359107         0.171452\n10              2.267437         5.249553\n11              5.858163        12.800432\n12             15.872869         2.229994\n13             11.814754         3.811712\n14             15.576049         6.745997\n15             14.040788        11.705691\n16             15.750828        14.363299\nRun Number 4\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         4.710096\n2               0.000000         7.159573\n3               0.000000         2.340939\n4               0.000000         1.265524\n5               0.000000        24.161333\n6              17.665351        14.986656\n7              29.713717         0.456137\n8               5.171719         3.102962\n9               6.209501         6.055216\n10             12.250901         0.560925\n11             11.094029         1.577752\n12              7.341313         1.602025\n13              6.340650         9.105710\n14              3.420609         4.909027\n15              0.000000         0.673251\n16              0.000000         6.715924\n17              5.519324        36.751986\nTrial Results\n            Mean Q Time Nurse\nRun Number                   \n0                    7.259450\n1                    5.951969\n2                   10.837575\n3                    6.182227\n4                    6.160418",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model_multiple_steps.html",
    "href": "an_example_simpy_model_multiple_steps.html",
    "title": "7  Adding Multiple Activities",
    "section": "",
    "text": "Very often there will be more than one activity in a model.\nWhat if instead of this model\n\nWe wanted something more like this?\n\nIf we want patients to flow from one activity to another, we just write another one after the first one in the pathway generator function. That (aside from adding in any extra resources and results capture elsewhere) is it.\n\n\n\n\n\n\nWarning\n\n\n\nJust make sure you write the next bit outside of the with statement. Otherwise you’ll drag across the resource from the previous activity too…\nOf course, in some cases, you might want that - perhaps if you’re modelling a bed as a resource, for example, but then want to model using an additional resource like a nurse for some parts of the process.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThroughout the code, anything new that’s been added will be followed by the comment ##NEW - so look out for that in the following code chunks.\n\n\nFirst, lets add some additional parameters to our g class.\n\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2 ##NEW\n    mean_n_consult_time = 6\n    number_of_receptionists = 1 ##NEW\n    number_of_nurses = 1\n    sim_duration = 120\n    number_of_runs = 5\n\nNext we’ll add an additional attribute - think of it as an extra box on their clipboard that they need to fill in - to record how long they are queuing for the receptionist.\n\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_recep = 0 ##NEW\n        self.q_time_nurse = 0\n\nNow we move to our model class. Let’s start by looking at the init method - the list of things that are set up when we create an instance of our model class.\nFirst, we have added in a new type of resource - a receptionist, pulling in the number of receptionist to create from our g class.\nWe’ve then added two additional fields to our results dataframe - how long each patient queues for a receptionist, and how long each patient spends with the receptionist.\nFinally, we add in an attribute that we will use to store the mean average queuing time for receptionists across the whole model.\n\ndef __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        ) ##NEW\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0] ##NEW\n        self.results_df[\"Time with Recep\"] = [0.0] ##NEW\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0 ##NEW\n        self.mean_q_time_nurse = 0\n\nOur generator_patient_arrivals method remains unchanged as nothing has been tweaked about how patients turn up to the system.\nOur attend_clinic method is where we make the actual change to the process the patient goes through.\nNote that we have a new line with an indended section inside it.\n\nwith self.receptionist.request() as req:\n\nEverything at one level of indentation within this now relates to the use of the receptionist resource.\n\n # A generator function that represents the pathway for a patient going\n    # through the clinic.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        ##NEW - added reception activity\n        start_q_recep = self.env.now\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_recep = self.env.now\n\n            patient.q_time_recep = end_q_recep - start_q_recep\n\n            sampled_recep_act_time = random.expovariate(\n                1.0 / g.mean_reception_time\n            )\n\n            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n                 patient.q_time_recep\n            )\n            self.results_df.at[patient.id, \"Time with Recep\"] = (\n                 sampled_recep_act_time\n            )\n\n            yield self.env.timeout(sampled_recep_act_time)\n\n        # Here's where the patient finishes with the receptionist, and starts\n        # queuing for the nurse\n\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\nBelow is the full code for our updated model. Look out for the lines that end with #NEW to find the bits we’ve added.\n\nimport simpy\nimport random\nimport pandas as pd\n\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2 ##NEW\n    mean_n_consult_time = 6\n    number_of_receptionists = 1 ##NEW\n    number_of_nurses = 1\n    sim_duration = 120\n    number_of_runs = 5\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_recep = 0 ##NEW\n        self.q_time_nurse = 0\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        ) ##NEW\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0] ##NEW\n        self.results_df[\"Time with Recep\"] = [0.0] ##NEW\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0 ##NEW\n        self.mean_q_time_nurse = 0\n\n    # A generator function that represents the DES generator for patient\n    # arrivals\n    def generator_patient_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the patient counter by 1 (this means our first patient\n            # will have an ID of 1)\n            self.patient_counter += 1\n\n            # Create a new patient - an instance of the Patient Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # patient - so here we pass the patient counter to use as the ID.\n            p = Patient(self.patient_counter)\n\n            # Tell SimPy to start up the attend_clinic generator function with\n            # this patient (the generator function that will model the\n            # patient's journey through the system)\n            self.env.process(self.attend_clinic(p))\n\n            # Randomly sample the time to the next patient arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter)\n\n    # A generator function that represents the pathway for a patient going\n    # through the clinic.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        ##NEW - added reception activity\n        start_q_recep = self.env.now\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_recep = self.env.now\n\n            patient.q_time_recep = end_q_recep - start_q_recep\n\n            sampled_recep_act_time = random.expovariate(\n                1.0 / g.mean_reception_time\n            )\n\n            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n                 patient.q_time_recep\n            )\n            self.results_df.at[patient.id, \"Time with Recep\"] = (\n                 sampled_recep_act_time\n            )\n\n            yield self.env.timeout(sampled_recep_act_time)\n\n        # Here's where the patient finishes with the receptionist, and starts\n        # queuing for the nurse\n\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times across patients in this run of the\n        # model.\n        self.mean_q_time_recep = self.results_df[\"Q Time Recep\"].mean() ##NEW\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new patients.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the patient-level results from this run of\n        # the model\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)\n\n# Class representing a Trial for our simulation - a batch of simulation runs.\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Recep\"] = [0.0] ##NEW\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            ##NEW (added receptionist queuing mean as first item to list)\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_recep,\n                                              my_model.mean_q_time_nurse]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n\nLet’s run the updated code and see the outputs.\n\n# Create an instance of the Trial class\nmy_trial = Trial()\n\n# Call the run_trial method of our Trial object\nmy_trial.run_trial()\n\nRun Number 0\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         1.232864      0.000000         3.015873\n2               0.000000         2.784606      0.000000         0.120004\n3               2.686514         1.386568      0.000000         3.721642\n4               1.268064         1.863520      1.858122         1.405504\n5               1.224704         1.818933      1.444693        11.045493\n6               2.680099         1.488223     11.001963        13.357242\n7               3.663190         1.397142     22.962064         4.745669\n8               0.000000         1.749848     24.389666        11.224921\n9               0.000000         1.371769     33.356658         2.545548\n10              0.000000         5.017316     28.966804         4.242810\n11              1.320186         2.185003     31.024611         0.710413\n12              2.730332         1.506709     30.228316         8.674718\n13              0.000000         0.733479     34.574968        12.806085\n14              0.000000         2.302774     44.108025         1.815381\n15              0.057814         0.781555     45.141850         2.289200\n16              0.000000         5.253534     32.112476         0.993607\n17              0.000000         4.961227     25.153396         2.334403\n18              3.788323         0.644710     26.843089         3.285215\n19              0.880028         1.726283     28.402021         1.555567\n20              0.688708         2.508201     27.449387         3.674752\n21              0.000000         0.592015     27.785914         0.106591\n22              0.000000         1.062595     24.782083         0.990550\n23              0.000000         2.672838     19.526007        39.893467\n24              0.000000         4.028198           NaN              NaN\n25              0.000000         2.591863           NaN              NaN\n26              0.998956         0.133532           NaN              NaN\n27              0.000000         0.226731           NaN              NaN\n28              0.000000         4.879120           NaN              NaN\n29              1.606926         0.174958           NaN              NaN\n30              1.143328         0.207272           NaN              NaN\n31              0.000000         0.758579           NaN              NaN\n32              0.000000         0.599797           NaN              NaN\n33              0.000000         2.746499           NaN              NaN\nRun Number 1\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         0.234088      0.000000         1.150708\n2               0.000000         1.068525      0.000000         0.419164\n3               0.743856         0.132842      0.286322         9.534177\n4               0.000000         0.019330      7.637837         2.112395\n5               0.000000         0.780651      5.725472         1.150835\n6               0.000000         4.305228      0.000000         8.303787\n7               3.951096         6.308463      1.995323         1.951728\n8               8.572703         0.257524      3.689528         7.570401\n9               7.859786         2.870422      8.389508         1.532916\n10              5.526527         0.332805      9.589618         7.555867\n11              3.315360         0.670165     16.475320         1.213830\n12              2.267249         1.108015     16.581135         6.959755\n13              1.050214         0.359911     23.180980         4.298233\n14              0.000000         0.868959     24.521864         1.462530\n15              0.257786         2.811216     23.173179        23.813135\n16              1.227589         1.244405     45.741909         0.175012\n17              2.220137         2.280115     43.636806         0.666767\n18              0.863896         0.274019     44.029554         1.672042\n19              0.000000         0.128709     39.620266         2.074155\n20              0.000000         5.331622     35.318733         0.999839\n21              2.514013         1.711478     34.607094         1.221448\n22              3.731572         0.627433     35.201108         9.847067\n23              4.144104         1.072852     43.975323         0.226557\n24              0.000000         1.471086     41.093165         0.334315\n25              1.429223         1.771614     39.655866         6.809658\n26              0.000000         3.863375     40.303516         0.881623\n27              0.000000         0.848750     37.688121         1.898126\n28              0.000000         1.134117     35.127913         2.845495\n29              0.000000         2.029893           NaN              NaN\n30              0.000000         4.845933           NaN              NaN\n31              0.000000         3.835596           NaN              NaN\nRun Number 2\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         2.447108      0.000000        10.696637\n2               0.000000         3.349676      0.000000         1.383478\n3               0.000000         0.906898      0.000000         9.757479\n4               0.000000         0.646661      4.967419         8.403053\n5               0.000000         3.108116      6.749218         0.665805\n6               0.000000         0.320866      0.000000        27.571549\n7               0.000000         1.492080     24.480613         4.206595\n8               0.000000         1.000095     26.780926         8.120400\n9               0.000000         1.924731     31.619251         1.146127\n10              0.000000         3.029702     28.973937        10.797944\n11              0.000000         0.182373     37.990434         3.564393\n12              0.000000         1.319189     39.370902         3.594458\n13              0.000000         4.663639     34.455592        15.630132\n14              0.000000         1.525033     46.190009         2.193956\n15              0.516286         3.867422           NaN              NaN\n16              2.942504         2.201359           NaN              NaN\n17              3.808555         0.284085           NaN              NaN\n18              3.277299         0.134062           NaN              NaN\n19              1.707877         1.248648           NaN              NaN\n20              0.000000         1.173828           NaN              NaN\n21              0.025292         0.653881           NaN              NaN\n22              0.000000         0.942206           NaN              NaN\n23              0.000000         4.517211           NaN              NaN\n24              0.000000         2.695790           NaN              NaN\n25              0.000000         2.528678           NaN              NaN\nRun Number 3\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         1.935385      0.000000         1.080218\n2               0.000000         5.012514      0.000000         3.926797\n3               3.460576         0.346890      3.579907         5.937123\n4               0.991127         8.708852      0.808178         3.991536\n5               1.327330         2.586501      2.213213         6.957536\n6               2.393857         1.118492      8.052257         0.543784\n7               0.000000         5.727393      0.000000         0.425914\n8               0.000000         4.789164      0.000000         2.725859\n9               2.982009         0.406180      2.319679         5.471394\n10              0.000000         2.152320      0.000000         0.361182\n11              0.000000         2.543460      0.000000         1.029173\n12              0.000000         5.911956      0.000000        19.449060\n13              5.515732         2.490453     16.958607         6.503748\n14              3.328645         0.044949     23.417406         6.246027\n15              1.151039         0.813202     28.850231        16.323799\n16              0.000000         0.357489     35.136441        10.922648\n17              0.000000         0.309075           NaN              NaN\n18              0.000000         2.103486           NaN              NaN\n19              0.814326         5.413943           NaN              NaN\nRun Number 4\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         4.644512      0.000000         8.743239\n2               0.000000         0.349689      6.247221         1.457272\n3               0.108784         1.054304      6.650189         4.281941\n4               0.000000         1.118597      0.000000        25.074727\n5               0.000000         2.404474     19.425087         5.337634\n6               0.000000         4.533949     18.840740        11.145135\n7               3.703370         2.103017     27.882858         1.033852\n8               0.000000         6.979187     18.703237         4.064660\n9               6.705156         0.118387     22.649510        20.878730\n10              0.000000         1.339696     32.797125         3.047011\n11              0.000000         0.343431     22.417902         3.239341\n12              0.000000         0.944834     22.143047        12.072488\n13              0.000000         1.041648     13.858118         1.686864\n14              0.000000         0.716543     12.386603         1.466059\n15              0.000000         4.634324      6.781476         4.711853\n16              4.449941         2.489488      9.003841         4.747314\n17              0.000000         0.586539           NaN              NaN\nTrial Results\n            Mean Q Time Recep  Mean Q Time Nurse\nRun Number                                      \n0                    0.749611          22.657048\n1                    1.602423          23.473052\n2                    0.491113          20.112736\n3                    1.156034           7.583495\n4                    0.880427          14.986685",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Adding Multiple Activities</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model_branching.html",
    "href": "an_example_simpy_model_branching.html",
    "title": "8  Adding Branching Paths",
    "section": "",
    "text": "8.1 Coding the model",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Adding Branching Paths</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model_branching.html#coding-the-model",
    "href": "an_example_simpy_model_branching.html#coding-the-model",
    "title": "8  Adding Branching Paths",
    "section": "",
    "text": "8.1.1 the g class\nWe need to add a few additional parameters to our g class.\n\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2\n    mean_n_consult_time = 6\n    mean_d_consult_time = 20 ##NEW\n    number_of_receptionists = 1\n    number_of_nurses = 1\n    number_of_doctors = 2 ##NEW\n    prob_seeing_doctor = 0.6 ##NEW\n    sim_duration = 120\n    number_of_runs = 5\n\n\n\n8.1.2 The Patient class\nWe want to add an additional attribute to record the time patients spend with the doctor if they see one.\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_recep = 0\n        self.q_time_nurse = 0\n        self.q_time_doctor = 0 ##NEW\n\n\n\n8.1.3 The model class\n\n8.1.3.1 the init method\nIn the init method, we add a few additional atrributes to store additional outputs from the model.\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        )\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n        self.doctor = simpy.Resource(\n            self.env, capacity=g.number_of_doctors) ##NEW\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0]\n        self.results_df[\"Time with Recep\"] = [0.0]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df[\"Q Time Doctor\"] = [0.0] ##NEW\n        self.results_df[\"Time with Doctor\"] = [0.0] ##NEW\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0\n        self.mean_q_time_nurse = 0\n        self.mean_q_time_doctor = 0 ##NEW\n\n\n\n8.1.3.2 The generator_patient_arrivals method\nThis method is unchanged.\n\n\n8.1.3.3 The attend_clinic method\nHere, we need to add in a chance of patients seeing the doctor on their journey.\n\ndef attend_clinic(self, patient):\n        start_q_recep = self.env.now\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_recep = self.env.now\n\n            patient.q_time_recep = end_q_recep - start_q_recep\n\n            sampled_recep_act_time = random.expovariate(\n                1.0 / g.mean_reception_time\n            )\n\n            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n                 patient.q_time_recep\n            )\n            self.results_df.at[patient.id, \"Time with Recep\"] = (\n                 sampled_recep_act_time\n            )\n\n            yield self.env.timeout(sampled_recep_act_time)\n\n        # Here's where the patient finishes with the receptionist, and starts\n        # queuing for the nurse\n\n        start_q_nurse = self.env.now\n\n        with self.nurse.request() as req:\n            yield req\n\n            end_q_nurse = self.env.now\n\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.\n\n        ##NEW\n        ##\n        ## -----------------------------------------------------------\n        ## This is where our new code for seeing the doctor is\n        ## We use conditional logic to determine whether the patient goes\n        ## on to see the doctor or not\n        ## ------------------------------------------------------------\n        #\n        # We sample from the uniform distribution between 0 and 1.  If the value\n        # is less than the probability of seeing a doctor (stored in g Class)\n        # then we say the patient sees a doctor.\n        #\n        # If not, this block of code won't be run and the patient will just\n        # leave the system (we could add in an else if we wanted a branching\n        # path to another activity instead)\n\n        if random.uniform(0,1) &lt; g.prob_seeing_doctor:\n            start_q_doctor = self.env.now\n\n            with self.doctor.request() as req:\n                yield req\n\n                end_q_doctor = self.env.now\n\n                patient.q_time_doctor = end_q_doctor - start_q_doctor\n\n                sampled_doctor_act_time = random.expovariate(\n                    1.0 / g.mean_d_consult_time\n                )\n\n                self.results_df.at[patient.id, \"Q Time Doctor\"] = (\n                    patient.q_time_doctor\n                )\n                self.results_df.at[patient.id, \"Time with Doctor\"] = (\n                    sampled_doctor_act_time\n                )\n\n                yield self.env.timeout(sampled_doctor_act_time)\n\nLet’s try and understand a bit more about how we trigger the conditional logic.\nLet’s look at the output of the line random.uniform(0,1)\n\nrandom.uniform(0,1)\n\n0.6394267984578837\n\n\nWhat about if we run it multiple times?\n\nfor i in range(10):\n  print(random.uniform(0,1))\n\n0.025010755222666936\n0.27502931836911926\n0.22321073814882275\n0.7364712141640124\n0.6766994874229113\n0.8921795677048454\n0.08693883262941615\n0.4219218196852704\n0.029797219438070344\n0.21863797480360336\n\n\nSo how does this relate to our code?\nIn our g class, we set a probability threshold for patients being seen. Let’s pull that out:\n\nprint(g.prob_seeing_doctor)\n\n0.6\n\n\nThe code in the Model class tests whether the number generated by the random number generator is below the threshold we’ve set of seeing the doctor. If it is, the indented code where we actually see the doctor will be run for that patient. If it is not, that bit is bypassed - which in this case means they’ve reached the end of their journey and leave the system (a sink).\n\nfor i in range(10):\n  random_number = random.uniform(0,1)\n  is_below_threshold = random_number &lt; g.prob_seeing_doctor\n\n  if is_below_threshold:\n    print(f\"Random number {random_number:.2f} is LOWER than threshold ({g.prob_seeing_doctor}). \" +\n    \"Doctor code is triggered.\")\n  else:\n    print(f\"Random number {random_number:.2f} is HIGHER than threshold ({g.prob_seeing_doctor}). \" +\n    \"Doctor code is **not** triggered.\")\n\nRandom number 0.51 is LOWER than threshold (0.6). Doctor code is triggered.\nRandom number 0.03 is LOWER than threshold (0.6). Doctor code is triggered.\nRandom number 0.20 is LOWER than threshold (0.6). Doctor code is triggered.\nRandom number 0.65 is HIGHER than threshold (0.6). Doctor code is **not** triggered.\nRandom number 0.54 is LOWER than threshold (0.6). Doctor code is triggered.\nRandom number 0.22 is LOWER than threshold (0.6). Doctor code is triggered.\nRandom number 0.59 is LOWER than threshold (0.6). Doctor code is triggered.\nRandom number 0.81 is HIGHER than threshold (0.6). Doctor code is **not** triggered.\nRandom number 0.01 is LOWER than threshold (0.6). Doctor code is triggered.\nRandom number 0.81 is HIGHER than threshold (0.6). Doctor code is **not** triggered.\n\n\nIf we run this code a hundred thousand times and plot the results, we can start to see the pattern emerging despite the random element of the number generator.\n\nimport plotly.express as px\nimport pandas as pd\nimport numpy as np\n\nrandom_vals = [random.uniform(0,1) for i in range(100000)]\n\nrandom_vals_df = pd.DataFrame({\"value\" :random_vals})\n\nrandom_vals_df['threshold'] = np.where(random_vals_df[\"value\"]&lt;0.6, 'below', 'above')\n\nfig = px.histogram(random_vals_df, color=\"threshold\")\n\nfig.update_traces(xbins=dict(\n        start=0.0,\n        end=1.0,\n        size=0.1\n    ),\n    marker_line_width=1,marker_line_color=\"black\")\n\n\nfig.show()\n\n                                                \n\n\nSo for every 1000 patients, roughly 600 will see a doctor, and roughly 400 will leave the system straight after seeing the nurse.\n\n\n8.1.3.4 The calculate_run_results method\nIn this method, we just add an additional step to measure the mean time spent queueing for a doctor across all patients in this run.\n\n# This method calculates results over a single run.  Here we just calculate\n# a mean, but in real world models you'd probably want to calculate more.\ndef calculate_run_results(self):\n    # Take the mean of the queuing times across patients in this run of the\n    # model.\n    self.mean_q_time_recep = self.results_df[\"Q Time Recep\"].mean()\n    self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n    self.mean_q_time_doctor = self.results_df[\"Q Time Doctor\"].mean() ##NEW\n\n\n\n8.1.3.5 The run method\nThe run method is unchanged\n\n\n\n8.1.4 The trial class\n\n8.1.4.1 The init method\nIn the init method, we just add a placeholder for measuring the mean queue time of a doctor.\n\ndef  __init__(self):\n    self.df_trial_results = pd.DataFrame()\n    self.df_trial_results[\"Run Number\"] = [0]\n    self.df_trial_results[\"Mean Q Time Recep\"] = [0.0]\n    self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n    self.df_trial_results[\"Mean Q Time Doctor\"] = [0.0] ##NEW\n    self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n\n\n8.1.4.2 The run_trial method\nHere, we just add in the mean queue time for the doctor to the trial results dataframe.\n\n  def run_trial(self):\n      # Run the simulation for the number of runs specified in g class.\n      # For each run, we create a new instance of the Model class and call its\n      # run method, which sets everything else in motion.  Once the run has\n      # completed, we grab out the stored run results (just mean queuing time\n      # here) and store it against the run number in the trial results\n      # dataframe.\n      for run in range(g.number_of_runs):\n          my_model = Model(run)\n          my_model.run()\n\n          ##NEW - added mean queue time for doctor to end of list\n          self.df_trial_results.loc[run] = [my_model.mean_q_time_recep,\n                                            my_model.mean_q_time_nurse,\n                                            my_model.mean_q_time_doctor]\n\n      # Once the trial (ie all runs) has completed, print the final results\n      self.print_trial_results()",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Adding Branching Paths</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model_branching.html#evaluating-the-outputs",
    "href": "an_example_simpy_model_branching.html#evaluating-the-outputs",
    "title": "8  Adding Branching Paths",
    "section": "8.2 Evaluating the outputs",
    "text": "8.2 Evaluating the outputs\nBelow is the full updated code for this model.\n\n\n\n\n\n\nClick here to view the code\n\n\n\n\n\n\nimport simpy\nimport random\nimport pandas as pd\n\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2\n    mean_n_consult_time = 6\n    mean_d_consult_time = 20 ##NEW\n    number_of_receptionists = 1\n    number_of_nurses = 1\n    number_of_doctors = 2 ##NEW\n    prob_seeing_doctor = 0.6 ##NEW\n    sim_duration = 120\n    number_of_runs = 1\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_recep = 0\n        self.q_time_nurse = 0\n        self.q_time_doctor = 0 ##NEW\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        )\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n        self.doctor = simpy.Resource(\n            self.env, capacity=g.number_of_doctors) ##NEW\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0]\n        self.results_df[\"Time with Recep\"] = [0.0]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df[\"Q Time Doctor\"] = [0.0] ##NEW\n        self.results_df[\"Time with Doctor\"] = [0.0] ##NEW\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0\n        self.mean_q_time_nurse = 0\n        self.mean_q_time_doctor = 0 ##NEW\n\n    # A generator function that represents the DES generator for patient\n    # arrivals\n    def generator_patient_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the patient counter by 1 (this means our first patient\n            # will have an ID of 1)\n            self.patient_counter += 1\n\n            # Create a new patient - an instance of the Patient Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # patient - so here we pass the patient counter to use as the ID.\n            p = Patient(self.patient_counter)\n\n            # Tell SimPy to start up the attend_clinic generator function with\n            # this patient (the generator function that will model the\n            # patient's journey through the system)\n            self.env.process(self.attend_clinic(p))\n\n            # Randomly sample the time to the next patient arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter)\n\n    # A generator function that represents the pathway for a patient going\n    # through the clinic.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        start_q_recep = self.env.now\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_recep = self.env.now\n\n            patient.q_time_recep = end_q_recep - start_q_recep\n\n            sampled_recep_act_time = random.expovariate(\n                1.0 / g.mean_reception_time\n            )\n\n            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n                 patient.q_time_recep\n            )\n            self.results_df.at[patient.id, \"Time with Recep\"] = (\n                 sampled_recep_act_time\n            )\n\n            yield self.env.timeout(sampled_recep_act_time)\n\n        # Here's where the patient finishes with the receptionist, and starts\n        # queuing for the nurse\n\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n        ##NEW added conditional logic to see if patient goes on to see doctor\n        # We sample from the uniform distribution between 0 and 1.  If the value\n        # is less than the probability of seeing a doctor (stored in g Class)\n        # then we say the patient sees a doctor.\n        # If not, this block of code won't be run and the patient will just\n        # leave the system (we could add in an else if we wanted a branching\n        # path to another activity instead)\n        if random.uniform(0,1) &lt; g.prob_seeing_doctor:\n            start_q_doctor = self.env.now\n\n            with self.doctor.request() as req:\n                yield req\n\n                end_q_doctor = self.env.now\n\n                patient.q_time_doctor = end_q_doctor - start_q_doctor\n\n                sampled_doctor_act_time = random.expovariate(\n                    1.0 / g.mean_d_consult_time\n                )\n\n                self.results_df.at[patient.id, \"Q Time Doctor\"] = (\n                    patient.q_time_doctor\n                )\n                self.results_df.at[patient.id, \"Time with Doctor\"] = (\n                    sampled_doctor_act_time\n                )\n\n                yield self.env.timeout(sampled_doctor_act_time)\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times across patients in this run of the\n        # model.\n        self.mean_q_time_recep = self.results_df[\"Q Time Recep\"].mean()\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n        self.mean_q_time_doctor = self.results_df[\"Q Time Doctor\"].mean() ##NEW\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new patients.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the patient-level results from this run of\n        # the model\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)\n\n# Class representing a Trial for our simulation - a batch of simulation runs.\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Recep\"] = [0.0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results[\"Mean Q Time Doctor\"] = [0.0] ##NEW\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            ##NEW - added mean queue time for doctor to end of list\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_recep,\n                                              my_model.mean_q_time_nurse,\n                                              my_model.mean_q_time_doctor]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n\n\n\n\nLet’s look at the outputs for a single run.\nWhen a patient doesn’t see a doctor, notice that their value for that row is NaN - which stands for “not a number”. This will be treated differently to 0 in calculations of the mean - i.e. it won’t be included at all, whereas a queue time of 0 will matter.\n\n# Create an instance of the Trial class\nmy_trial = Trial()\n\n# Call the run_trial method of our Trial object\nmy_trial.run_trial()\n\nRun Number 0\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse  \\\nPatient ID                                                                 \n1               0.000000         0.164455      0.000000        13.920914   \n2               0.000000         0.517079     12.717109         7.064436   \n3               0.000000         3.507019     13.651053         2.107220   \n4               1.791675         1.914879     13.843393         4.172893   \n5               2.942190         7.578821     10.437466         3.408435   \n6               0.000000         0.137868      5.492462         0.770591   \n7               0.000000         0.038824      4.238580         2.573929   \n8               0.000000         4.497553      0.000000         3.634398   \n9               0.632419         1.127904      2.506494        10.751089   \n10              0.000000         1.827010      9.859928         2.064096   \n11              0.000000         2.691982      0.000000         5.879487   \n12              0.000000         4.235160      0.000000         4.587604   \n13              0.677981         0.348057      4.239547         0.455397   \n14              0.000000         0.286387      0.000000        18.738572   \n15              0.000000         2.380793      0.000000        16.075224   \n16              1.274408         0.609359     15.465865         5.910793   \n17              0.335087         0.758238           NaN              NaN   \n18              0.000000         1.659091           NaN              NaN   \n19              1.568443         0.213691           NaN              NaN   \n20              0.074793         1.532815           NaN              NaN   \n21              0.000000         2.175654           NaN              NaN   \n\n            Q Time Doctor  Time with Doctor  \nPatient ID                                   \n1                0.000000          0.337148  \n2                0.000000         20.124791  \n3                0.000000         10.157277  \n4                5.984384         10.343443  \n5               10.436243          6.464671  \n6                     NaN               NaN  \n7                     NaN               NaN  \n8                0.000000         39.116816  \n9                0.000000         30.225136  \n10                    NaN               NaN  \n11                    NaN               NaN  \n12              14.854357          5.365691  \n13              16.258368          2.616966  \n14               0.000000          9.841665  \n15               0.000000          5.992586  \n16                    NaN               NaN  \n17                    NaN               NaN  \n18                    NaN               NaN  \n19                    NaN               NaN  \n20                    NaN               NaN  \n21                    NaN               NaN  \nTrial Results\n            Mean Q Time Recep  Mean Q Time Nurse  Mean Q Time Doctor\nRun Number                                                          \n0                    0.442714           5.778244            4.321214",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Adding Branching Paths</span>"
    ]
  },
  {
    "objectID": "exercise_gp.html",
    "href": "exercise_gp.html",
    "title": "9  Required outputs",
    "section": "",
    "text": "9.1 Goal\nOnce you’ve built the model, use it to - a) identify where you think the problem is - b) provide proposals for how you would fix it (this can include anything you like - they are open to suggestions - more resources, changes to processes to cut activity times, having the GP book the test, anything you can think of!\nTry different things, different solutions.",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Required outputs</span>"
    ]
  },
  {
    "objectID": "exercise_gp.html#goal",
    "href": "exercise_gp.html#goal",
    "title": "9  Required outputs",
    "section": "",
    "text": "Tip\n\n\n\nTake a copy of the original working file for the base case scenario first :)",
    "crumbs": [
      "Part 2 - Your First SimPy Model",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Required outputs</span>"
    ]
  },
  {
    "objectID": "model_warm_up.html",
    "href": "model_warm_up.html",
    "title": "10  Warm Up Periods",
    "section": "",
    "text": "10.1 How long should a warm-up period be?\nThe length of the warm up period is up to you as the modeller to define.\nYou could be very precise about analysing it and use statistical testing to identify when the system reaches equilibrium (see https://eudl.eu/pdf/10.4108/ICST.SIMUTOOLS2009.5603 as an example).\nOr you could plot what’s happening over time by eye and make an estimate.\nOr you could just set your warm up period long enough that it’ll be representative when it starts collecting results.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Warm Up Periods</span>"
    ]
  },
  {
    "objectID": "model_warm_up.html#implementing-the-warm-up-period",
    "href": "model_warm_up.html#implementing-the-warm-up-period",
    "title": "10  Warm Up Periods",
    "section": "10.2 Implementing the warm-up period",
    "text": "10.2 Implementing the warm-up period\nImplementing a warm up period in SimPy is really easy.\nWe just simply check the current time whenever we go to calculate / store a result, and see if it’s beyond the warm up period. If it is, we do it. If it’s not, we don’t.\nLet’s look at an example. This is a slightly amended version of the model of patients coming in for a nurse consultation with a few tweaks (longer duration, more runs, added trial results calculation)\nWe’re going to assume this is a system that’s open 24 hours - let’s imagine this is a triage function at an emergency department.\nI’ve marked the bits I’ve added to include warm up with ##NEW\n\n10.2.1 The g class\nFirst we add in a new parameter - the length of the warm-up period.\nHere, the sim duration has been set to 2880, and the warm-up-period to half of this (1440). You don’t need to stick to this pattern - your warm-up could even be longer than your results collection if you want!\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    # Simulation meta parameters\n    sim_duration = 2880\n    warm_up_period = 1440 ##NEW - this will be in addition to the sim_duration\n    number_of_runs = 100\n\n\n\n\n\n\n\nTip\n\n\n\nIf you find it easier to keep track of, you could define your warm-up like this instead.\n\nresults_collection_period = 2880\nwarm_up_period = 1440\ntotal_sim_duration = results_collection_period + warm_up_period\n\n\n\n\n\n10.2.2 The patient class\nOur patient class is unchanged.\n\n\n10.2.3 The model class\nIn the model class, the ‘attend_clinic’ method changes.\nWe look at the current elapsed simulation time with the attribute self.env.now\nThen, whenever a patient attends the clinic and is using a nurse resource, we check whether the current simulation time is later than the number of time units we’ve set as our warm-up.\n\n10.2.3.1 The attend_clinic method\n\n# Generator function representing pathway for patients attending the\n# clinic.\ndef attend_clinic(self, patient):\n    # Nurse consultation activity\n    start_q_nurse = self.env.now\n\n    with self.nurse.request() as req:\n        yield req\n\n        end_q_nurse = self.env.now\n\n        patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n        ##NEW - this checks whether the warm up period has passed before\n        # adding any results\n        if self.env.now &gt; g.warm_up_period:\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse\n            )\n\n        sampled_nurse_act_time = random.expovariate(1.0 /\n                                                    g.mean_n_consult_time)\n\n        yield self.env.timeout(sampled_nurse_act_time)\n\nFor example, if the simulation time is at 840 and our warm_up is 1440, this bit of code - which adds the queuing time for this patient to our records - won’t run:\n\nself.results_df.at[patient.id, \"Q Time Nurse\"] = (\n    patient.q_time_nurse\n)\n\nHowever, if the simulation time is 1680, for example, it will.\n\n\n\n10.2.4 the calculate_run_results method\nAs we now won’t count the first patient, we need to remove the dummy first patient result entry we created when we set up the dataframe.\n\n# Method to calculate and store results over the run\ndef calculate_run_results(self):\n    self.results_df.drop([1], inplace=True) ##NEW\n\n    self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n\n10.2.4.1 The run method\nNext we need to tweak the duration of our model to reflect the combination of the period we want to collect results for and the warm-up period.\n\n# Method to run a single run of the simulation\ndef run(self):\n    # Start up DES generators\n    self.env.process(self.generator_patient_arrivals())\n\n    # Run for the duration specified in g class\n    ##NEW - we need to tell the simulation to run for the specified duration\n    # + the warm up period if we still want the specified duration in full\n    self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n    # Calculate results over the run\n    self.calculate_run_results()\n\n    # Print patient level results for this run\n    print (f\"Run Number {self.run_number}\")\n    print (self.results_df)\n\n\n\n\n10.2.5 The Trial class\nOur trial class is unchanged.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Warm Up Periods</span>"
    ]
  },
  {
    "objectID": "model_warm_up.html#the-impact-of-the-warm-up-period",
    "href": "model_warm_up.html#the-impact-of-the-warm-up-period",
    "title": "10  Warm Up Periods",
    "section": "10.3 The impact of the warm-up period",
    "text": "10.3 The impact of the warm-up period\nLet’s compare the results we get with and without the warm-up period.\n\n10.3.1 Editing our results method\nTo make it easier to look at the outputs, I’m going to modify two methods slightl.\nFirst, we modify the run method of the Model class slightly to swap from print the patient level dataframes to returning them as an output.\n\n# Method to run a single run of the simulation\ndef run(self):\n    # Start up DES generators\n    self.env.process(self.generator_patient_arrivals())\n\n    # Run for the duration specified in g class\n    # We need to tell the simulation to run for the specified duration\n    # + the warm up period if we still want the specified duration in full\n    self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n    # Calculate results over the run\n    self.calculate_run_results()\n\n    # Return patient level results for this run\n    return (self.results_df) ##NEW\n\nNext, we modify the run_trial method of the Trial class so that we get multiple outputs: the full patient level dataframes, a summary of results per trial, and an overall average figure for all of the trials.\n\n# Method to run a trial\ndef run_trial(self):\n    # Run the simulation for the number of runs specified in g class.\n    # For each run, we create a new instance of the Model class and call its\n    # run method, which sets everything else in motion.  Once the run has\n    # completed, we grab out the stored run results and store it against\n    # the run number in the trial results dataframe. We also return the\n    # full patient-level dataframes.\n\n    # First, create an empty list for storing our patient-level dataframes.\n    results_dfs = []\n\n    for run in range(g.number_of_runs):\n        my_model = Model(run)\n        patient_level_results = my_model.run()\n\n        print( self.df_trial_results)\n        # First let's record our mean wait time for this run\n        self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n        # Next let's work on our patient-level results dataframes\n        # We start by rounding everything to 2 decimal places\n        patient_level_results = patient_level_results.round(2)\n        # Add a new column recording the run\n        patient_level_results['run'] = run\n        # Now we're just going to add this to our empty list (or, after the first\n        # time we loop through, as an extra dataframe in our list)\n        results_dfs.append(patient_level_results)\n\n    all_results_patient_level = pd.concat(results_dfs)\n\n    # This calculates the attribute self.mean_q_time_nurse_trial\n    self.calculate_means_over_trial()\n\n    # Once the trial (ie all runs) has completed, return the results\n    return self.df_trial_results, all_results_patient_level, self.mean_q_time_nurse_trial\n\n\n\n10.3.2 The full updated code\n\nimport simpy\nimport random\nimport pandas as pd\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    # Simulation meta parameters\n    sim_duration = 2880\n    number_of_runs = 20\n    warm_up_period = 1440 ##NEW - this will be in addition to the sim_duration\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n\n    # Generator function that represents the DES generator for patient arrivals\n    def generator_patient_arrivals(self):\n        while True:\n            self.patient_counter += 1\n\n            p = Patient(self.patient_counter)\n\n            self.env.process(self.attend_clinic(p))\n\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n    # Generator function representing pathway for patients attending the\n    # clinic.\n    def attend_clinic(self, patient):\n        # Nurse consultation activity\n        start_q_nurse = self.env.now\n\n        with self.nurse.request() as req:\n            yield req\n\n            end_q_nurse = self.env.now\n\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            ##NEW - this checks whether the warm up period has passed before\n            # adding any results\n            if self.env.now &gt; g.warm_up_period:\n                self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                    patient.q_time_nurse\n                )\n\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            yield self.env.timeout(sampled_nurse_act_time)\n\n    # Method to calculate and store results over the run\n    def calculate_run_results(self):\n        ##NEW - as we now won't count the first patient, we need to remove\n        # the dummy first patient result entry we created when we set up the\n        # dataframe\n        self.results_df.drop([1], inplace=True)\n\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # Method to run a single run of the simulation\n    def run(self):\n        # Start up DES generators\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run for the duration specified in g class\n        ##NEW - we need to tell the simulation to run for the specified duration\n        # + the warm up period if we still want the specified duration in full\n        self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n        # Calculate results over the run\n        self.calculate_run_results()\n\n        # Return patient level results for this run\n        return (self.results_df)\n\n# Class representing a Trial for our simulation\nclass Trial:\n    # Constructor\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results and store it against\n        # the run number in the trial results dataframe. We also return the\n        # full patient-level dataframes.\n\n        # First, create an empty list for storing our patient-level dataframes.\n        results_dfs = []\n\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            patient_level_results = my_model.run()\n\n            print( self.df_trial_results)\n            # First let's record our mean wait time for this run\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n            # Next let's work on our patient-level results dataframes\n            # We start by rounding everything to 2 decimal places\n            patient_level_results = patient_level_results.round(2)\n            # Add a new column recording the run\n            patient_level_results['run'] = run\n            # Now we're just going to add this to our empty list (or, after the first\n            # time we loop through, as an extra dataframe in our list)\n            results_dfs.append(patient_level_results)\n\n        all_results_patient_level = pd.concat(results_dfs)\n\n        # This calculates the attribute self.mean_q_time_nurse_trial\n        self.calculate_means_over_trial()\n\n        # Once the trial (ie all runs) has completed, return the results\n        return self.df_trial_results, all_results_patient_level, self.mean_q_time_nurse_trial\n\n    # Method to print trial results, including averages across runs\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n        print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n\n# Create new instance of Trial and run it\nmy_trial = Trial()\ndf_trial_results_warmup, all_results_patient_level_warmup, means_over_trial_warmup = my_trial.run_trial()\n\n            Mean Q Time Nurse\nRun Number                   \n0                         0.0\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n11                 230.822132\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n11                 230.822132\n12                 244.170981\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n11                 230.822132\n12                 244.170981\n13                 324.677533\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n11                 230.822132\n12                 244.170981\n13                 324.677533\n14                 758.354099\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n11                 230.822132\n12                 244.170981\n13                 324.677533\n14                 758.354099\n15                 372.798267\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n11                 230.822132\n12                 244.170981\n13                 324.677533\n14                 758.354099\n15                 372.798267\n16                 265.378022\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n11                 230.822132\n12                 244.170981\n13                 324.677533\n14                 758.354099\n15                 372.798267\n16                 265.378022\n17                 255.002279\n            Mean Q Time Nurse\nRun Number                   \n0                  422.175398\n1                  527.989992\n2                  570.390107\n3                  668.781531\n4                  568.961985\n5                  601.025103\n6                  348.382604\n7                  410.461688\n8                  388.500851\n9                  501.570405\n10                 524.693726\n11                 230.822132\n12                 244.170981\n13                 324.677533\n14                 758.354099\n15                 372.798267\n16                 265.378022\n17                 255.002279\n18                 495.184946\n\n\n\n\n            Mean Q Time Nurse\nRun Number                   \n0                         0.0\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n11                 439.777049\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n11                 439.777049\n12                 428.270739\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n11                 439.777049\n12                 428.270739\n13                 271.706724\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n11                 439.777049\n12                 428.270739\n13                 271.706724\n14                 443.308559\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n11                 439.777049\n12                 428.270739\n13                 271.706724\n14                 443.308559\n15                 351.741998\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n11                 439.777049\n12                 428.270739\n13                 271.706724\n14                 443.308559\n15                 351.741998\n16                 510.928899\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n11                 439.777049\n12                 428.270739\n13                 271.706724\n14                 443.308559\n15                 351.741998\n16                 510.928899\n17                 329.142500\n            Mean Q Time Nurse\nRun Number                   \n0                  308.986808\n1                  423.027754\n2                  529.850165\n3                  547.364477\n4                  394.531215\n5                  379.761914\n6                  459.852886\n7                  277.347396\n8                  344.188668\n9                  526.673462\n10                 296.892583\n11                 439.777049\n12                 428.270739\n13                 271.706724\n14                 443.308559\n15                 351.741998\n16                 510.928899\n17                 329.142500\n18                 242.264377\n\n\n\n\n10.3.3 Comparing the results\n\n10.3.3.1 Patient-level dataframes\nFirst, let’s look at the first five rows of our patient dataframes.\nWithout the warm-up, our patient IDs start at 1.\n\n10.3.3.1.1 Without warm-up\n\nall_results_patient_level.head()\n\n\n\n\n\n\n\n\n\nQ Time Nurse\nTime with Nurse\nrun\n\n\nPatient ID\n\n\n\n\n\n\n\n1\n0.00\n7.26\n0\n\n\n2\n0.14\n1.47\n0\n\n\n3\n0.00\n3.95\n0\n\n\n4\n0.00\n15.30\n0\n\n\n5\n10.18\n4.69\n0\n\n\n\n\n\n\n\n\n\n\n10.3.3.1.2 With warm-up\nWith the warm-up, our patient IDs start later.\n\nall_results_patient_level_warmup.head()\n\n\n\n\n\n\n\n\n\nQ Time Nurse\nrun\n\n\nPatient ID\n\n\n\n\n\n\n234\n184.11\n0\n\n\n235\n176.81\n0\n\n\n236\n176.35\n0\n\n\n237\n166.98\n0\n\n\n238\n163.55\n0\n\n\n\n\n\n\n\n\n\n\n\n10.3.3.2 Per-run results\n\n10.3.3.2.1 Without warm-up\n\ndf_trial_results.round(2).head()\n\n\n\n\n\n\n\n\n\nMean Q Time Nurse\n\n\nRun Number\n\n\n\n\n\n0\n308.99\n\n\n1\n423.03\n\n\n2\n529.85\n\n\n3\n547.36\n\n\n4\n394.53\n\n\n\n\n\n\n\n\n\n\n10.3.3.2.2 With warm-up\nWith the warm-up, our patient IDs start later.\n\ndf_trial_results_warmup.round(2).head()\n\n\n\n\n\n\n\n\n\nMean Q Time Nurse\n\n\nRun Number\n\n\n\n\n\n0\n422.18\n\n\n1\n527.99\n\n\n2\n570.39\n\n\n3\n668.78\n\n\n4\n568.96\n\n\n\n\n\n\n\n\n\n\n\n10.3.3.3 Overall results\nWithout the warm up, our overall average wait time is\n\n\n'389.66 minutes'\n\n\nWith the warm up, our overall average wait time is\n\n\n'452.26 minutes'\n\n\nYou can see overall that the warm-up time can have a very significant impact on our waiting times!\nLet’s look at this in a graph.\n\n\n10.3.3.4 Results over time\n\nimport plotly.express as px\n\ndf_trial_results = df_trial_results.reset_index()\ndf_trial_results['Warm Up'] = 'No Warm Up'\n\ndf_trial_results_warmup = df_trial_results_warmup.reset_index()\ndf_trial_results_warmup['Warm Up'] = 'With Warm Up'\n\nfig = px.histogram(\n    pd.concat([df_trial_results, df_trial_results_warmup]).round(2).reset_index(),\n    x=\"Warm Up\",\n    color=\"Run Number\", y=\"Mean Q Time Nurse\",\n    barmode='group',\n    title='Average Queue Times per Run - With and Without Warmups')\n\nfig.show()",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Warm Up Periods</span>"
    ]
  },
  {
    "objectID": "priority_based_queueing.html",
    "href": "priority_based_queueing.html",
    "title": "11  Priority-Based Queueing",
    "section": "",
    "text": "11.1 Implementing priority-based queueing",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Priority-Based Queueing</span>"
    ]
  },
  {
    "objectID": "priority_based_queueing.html#implementing-priority-based-queueing",
    "href": "priority_based_queueing.html#implementing-priority-based-queueing",
    "title": "11  Priority-Based Queueing",
    "section": "",
    "text": "11.1.1 g class\nThe g class is unchanged\n\n\n11.1.2 Patient class\nHere we add an attribute of the patient that determines their priority :::{.callout-tip} When using a priority resource\nLower value = higher priority :::\nIn this example, we just randomly pick a value between 1 and 5, but you can use whatever logic you like.\nIn reality, you’d likely have probabilities to determine what priority a patient is based on your data - maybe there’s a 20% chance they are a high priority and an 80% chance they are a low priority.\n\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n        ##NEW\n        self.priority = random.randint(1,5)\n\n\n\n11.1.3 Model class\n\n11.1.3.1 _init\nHere we set up the nurse as an instance of PriorityResource rather than Resource\n\ndef __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        ##NEW\n        self.nurse = simpy.PriorityResource(self.env,\n                                            capacity=g.number_of_nurses)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Priority\"] = [1] ##NEW\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n\n\n\n11.1.3.2 attend_clinic\nNear the beginning of the attend_clinic() method, we have added a print message so we can see how priority works.\n\n\n\n\n\n\nTip\n\n\n\nLogging in this way can help you check that your model is behaving as expected.\n\n\nNow that the nurse is set up as a PriorityResource, we can pass in the value that we want it to look at to determine who’s seen next when we request the resource (here, that’s the priority attribute of the patient we set up in the Patient class).\nWe have also added a step that records the patient priority to our dataframe of individual patient results.\n\n# Generator function representing pathway for patients attending the\n    # clinic.\n    def attend_clinic(self, patient):\n        # Nurse consultation activity\n        start_q_nurse = self.env.now\n\n        ##NEW\n        print (f\"Patient {patient.id} with priority {patient.priority} is\",\n               \"queuing for the nurse.\")\n\n        ##NEW\n        with self.nurse.request(priority=patient.priority) as req:\n            yield req\n\n            end_q_nurse = self.env.now\n\n            ##NEW\n            print (f\"Patient {patient.id} with priority {patient.priority} is\",\n                   f\"being seen at minute {self.env.now}.\")\n\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            if self.env.now &gt; g.warm_up_period:\n                self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                    patient.q_time_nurse\n                )\n\n                ##NEW\n                self.results_df.at[patient.id, \"Priority\"] = (\n                    patient.priority\n                )\n\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            yield self.env.timeout(sampled_nurse_act_time)\n\n\n\n\n11.1.4 Trial class\nThe trial class is unchanged.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Priority-Based Queueing</span>"
    ]
  },
  {
    "objectID": "priority_based_queueing.html#the-full-code",
    "href": "priority_based_queueing.html#the-full-code",
    "title": "11  Priority-Based Queueing",
    "section": "11.2 The full code",
    "text": "11.2 The full code\nThe full code is given below.\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nimport simpy\nimport random\nimport pandas as pd\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    ##NEW - We've changed the parameters to have no warm-up\n    # Simulation meta parameters\n    sim_duration = 5000\n    number_of_runs = 1\n    warm_up_period = 0\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n        ##NEW - here we add an attribute of the patient that determines their\n        # priority (lower value = higher priority).  In this example, we just\n        # randomly pick a value between 1 and 5, but you can use whatever logic\n        # you like (in reality, you'd likely have probabilities to determine\n        # what priority a patient is based on your data)\n        self.priority = random.randint(1,5)\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        ##NEW - here we set up the nurse as an instance of PriorityResource\n        # rather than Resource\n        self.nurse = simpy.PriorityResource(self.env,\n                                            capacity=g.number_of_nurses)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Priority\"] = [1] ##NEW\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n\n    # Generator function that represents the DES generator for patient arrivals\n    def generator_patient_arrivals(self):\n        while True:\n            self.patient_counter += 1\n\n            p = Patient(self.patient_counter)\n\n            self.env.process(self.attend_clinic(p))\n\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n    # Generator function representing pathway for patients attending the\n    # clinic.\n    def attend_clinic(self, patient):\n        # Nurse consultation activity\n        start_q_nurse = self.env.now\n\n        ##NEW - added a print message so we can see how priority works\n        # I'm limiting it to the first 10 patients so we're not swamped by outputs!\n        if patient.id &lt;= 10:\n            print (f\"Patient {patient.id} with priority {patient.priority} is\",\n                \"queuing for the nurse.\")\n\n        ##NEW - now that the nurse is set up as a PriorityResource, we can pass\n        # in the value that we want it to look at to determine who's seen next\n        # when we request the resource (here, that's the priority attribute of\n        # the patient we set up in the Patient class)\n        with self.nurse.request(priority=patient.priority) as req:\n            yield req\n\n            end_q_nurse = self.env.now\n\n            ##NEW - added a print message so we can see how priority works\n            # I'm limiting it to the first 10 patients so we're not swamped by outputs!\n            if patient.id &lt;= 10:\n                print (f\"Patient {patient.id} with priority {patient.priority} is\",\n                    f\"being seen at minute {self.env.now}\")\n\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            if self.env.now &gt; g.warm_up_period:\n                self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                    patient.q_time_nurse\n                )\n\n                self.results_df.at[patient.id, \"Priority\"] = (\n                    patient.priority\n                )\n\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            yield self.env.timeout(sampled_nurse_act_time)\n\n    # Method to calculate and store results over the run\n    def calculate_run_results(self):\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # Method to run a single run of the simulation\n    def run(self):\n        # Start up DES generators\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run for the duration specified in g class\n        self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n        # Calculate results over the run\n        self.calculate_run_results()\n\n        return self.results_df\n\n# Class representing a Trial for our simulation\nclass Trial:\n    # Constructor\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results and store it against\n        # the run number in the trial results dataframe. We also return the\n        # full patient-level dataframes.\n\n        # First, create an empty list for storing our patient-level dataframes.\n        results_dfs = []\n\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            patient_level_results = my_model.run()\n\n            print( self.df_trial_results)\n            # First let's record our mean wait time for this run\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n            # Next let's work on our patient-level results dataframes\n            # We start by rounding everything to 2 decimal places\n            patient_level_results = patient_level_results.round(2)\n            # Add a new column recording the run\n            patient_level_results['run'] = run\n            # Now we're just going to add this to our empty list (or, after the first\n            # time we loop through, as an extra dataframe in our list)\n            results_dfs.append(patient_level_results)\n\n        all_results_patient_level = pd.concat(results_dfs)\n\n        # This calculates the attribute self.mean_q_time_nurse_trial\n        self.calculate_means_over_trial()\n\n        # Once the trial (ie all runs) has completed, return the results\n        return self.df_trial_results, all_results_patient_level, self.mean_q_time_nurse_trial\n\n    # Method to print trial results, including averages across runs\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n        print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n\n# Create new instance of Trial and run it\nmy_trial = Trial()\ndf_trial_results, all_results_patient_level, means_over_trial  = my_trial.run_trial()\n\nPatient 1 with priority 1 is queuing for the nurse.\nPatient 1 with priority 1 is being seen at minute 0\nPatient 2 with priority 4 is queuing for the nurse.\nPatient 2 with priority 4 is being seen at minute 4.290722735598742\nPatient 3 with priority 1 is queuing for the nurse.\nPatient 3 with priority 1 is being seen at minute 21.76572499974743\nPatient 4 with priority 3 is queuing for the nurse.\nPatient 4 with priority 3 is being seen at minute 35.724114896318035\nPatient 5 with priority 3 is queuing for the nurse.\nPatient 5 with priority 3 is being seen at minute 44.501061817728406\nPatient 6 with priority 2 is queuing for the nurse.\nPatient 7 with priority 2 is queuing for the nurse.\nPatient 8 with priority 2 is queuing for the nurse.\nPatient 6 with priority 2 is being seen at minute 59.477794742954885\nPatient 9 with priority 3 is queuing for the nurse.\nPatient 10 with priority 4 is queuing for the nurse.\nPatient 7 with priority 2 is being seen at minute 67.9907519905066\nPatient 8 with priority 2 is being seen at minute 74.22562540299111\nPatient 9 with priority 3 is being seen at minute 154.70805664823484\nPatient 10 with priority 4 is being seen at minute 164.00945788090314\n            Mean Q Time Nurse\nRun Number                   \n0                         0.0",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Priority-Based Queueing</span>"
    ]
  },
  {
    "objectID": "priority_based_queueing.html#evaluating-the-outputs",
    "href": "priority_based_queueing.html#evaluating-the-outputs",
    "title": "11  Priority-Based Queueing",
    "section": "11.3 Evaluating the outputs",
    "text": "11.3 Evaluating the outputs\nFirst let’s look at some sample patients.\n\nall_results_patient_level.head()\n\n\n\n\n\n\n\n\n\nQ Time Nurse\nPriority\nrun\n\n\nPatient ID\n\n\n\n\n\n\n\n1\n0.0\n1.0\n0\n\n\n2\n0.0\n4.0\n0\n\n\n3\n0.0\n1.0\n0\n\n\n4\n0.0\n3.0\n0\n\n\n5\n0.0\n3.0\n0\n\n\n\n\n\n\n\n\nLet’s calculate the mean queue time by priority.\n\n(all_results_patient_level\n    .groupby('Priority')\n    .agg({'Priority':'size', 'Q Time Nurse':'mean'}) \\\n    .rename(columns={'Priority':'count','Q Time Nurse':'mean queue time'})\n    .round(2)\n    )\n\n\n\n\n\n\n\n\n\ncount\nmean queue time\n\n\nPriority\n\n\n\n\n\n\n1.0\n221\n6.82\n\n\n2.0\n199\n12.66\n\n\n3.0\n196\n29.40\n\n\n4.0\n173\n286.66\n\n\n5.0\n25\n216.24\n\n\n\n\n\n\n\n\nWe can see that the queueing time is shorter for the clients with a lower priority value (and therefore a higher actual priority in terms of the model - i.e. they will be seen first)\n\nRemember that we are only recording the queue time at the point at which someone exits the queue to be seen by a nurse.\nThis means that there may be lots of people - particularly those with a higher priority number (and therefore the least important to see as far as the model is concerned) who are still sitting waiting to be seen when our model stops running.\nThink about ways you might try to account for that.\n\n\nimport plotly.express as px\n\nfig = px.box(all_results_patient_level.reset_index(), x=\"Priority\", y=\"Q Time Nurse\", points=\"all\")\nfig.show()",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Priority-Based Queueing</span>"
    ]
  },
  {
    "objectID": "modelling_resource_unavailability.html",
    "href": "modelling_resource_unavailability.html",
    "title": "12  Modelling Resource Unavailability",
    "section": "",
    "text": "12.1 The approach\nBasically, we will : - Set up the frequency and duration of unavailability as parameter values in g class - Make sure that the nurse is set up as a PriorityResource - Create a new entity generator whose sole purpose is to demand the nurse resource with a higher priority than any patient every 2 hours, and will freeze the nurse with them for 15 minutes (this means the nurse will complete the current patient, they won’t walk out midway through!) - Start this new generator running in our run method of the Model class.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Modelling Resource Unavailability</span>"
    ]
  },
  {
    "objectID": "modelling_resource_unavailability.html#coding-the-approach",
    "href": "modelling_resource_unavailability.html#coding-the-approach",
    "title": "12  Modelling Resource Unavailability",
    "section": "12.2 Coding the approach",
    "text": "12.2 Coding the approach\n\n12.2.1 The g class\nIn the g class, we have added values to specify how long nurse is unavailable and at what frequency. Un this example, every 2 hours, the nurse will be unavailable for 15 minutes.\n\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    unav_time_nurse = 15 ##NEW\n    unav_freq_nurse = 120 ##NEW\n\n    # Simulation meta parameters\n    sim_duration = 2880\n    number_of_runs = 1\n    warm_up_period = 1440\n\n\n\n12.2.2 The Patient class\nThe patient class is unchanged.\n\n\n12.2.3 The Model class\n\n12.2.3.1 The obstruct_nurse method\nWe create a new method within the model class called obstruct_nurse.\n\n\n\n\n\n\nTip\n\n\n\nNote that here we are using a priority value of -1.\nNegative priorities are higher (i.e. are seen first) compared to higher priorities; a priority value of -1 will be seen before a priority value of 1, but a priority value of 1 will be seen before a priority value of 2.\nThis is a very helpful feature to use to keep your breaktime functions from clashing with high-priority patients.\n\n\n\n##NEW\n# Generator function to obstruct a nurse resource at specified intervals\n# for specified amounts of time\ndef obstruct_nurse(self):\n    while True:\n        print (f\"{self.env.now:.2f}: The nurse will go on a break at around time\",\n                f\"{(self.env.now + g.unav_freq_nurse):.2f}\")\n\n        # The generator first pauses for the frequency period\n        yield self.env.timeout(g.unav_freq_nurse)\n\n        # Once elapsed, the generator requests (demands?) a nurse with\n        # a priority of -1.  This ensure it takes priority over any patients\n        # (whose priority values start at 1).  But it also means that the\n        # nurse won't go on a break until they've finished with the current\n        # patient\n        with self.nurse.request(priority=-1) as req:\n            yield req\n\n            print (f\"{self.env.now:.2f}: The nurse is now on a break and will be back at\",\n                    f\"{(self.env.now + g.unav_time_nurse):.2f}\")\n\n            # Freeze with the nurse held in place for the unavailability\n            # time (ie duration of the nurse's break).  Here, both the\n            # duration and frequency are fixed, but you could randomly\n            # sample them from a distribution too if preferred.\n            yield self.env.timeout(g.unav_time_nurse)\n\n\n\n12.2.3.2 The run method\nIn our run method, we now start up the obstruct_nurse process in addition to the generator_patient_arrivals process.\n\ndef run(self):\n    # Start up DES generators\n    self.env.process(self.generator_patient_arrivals())\n    ##NEW - we also need to start up the obstructor generator now too\n    self.env.process(self.obstruct_nurse())\n\n    # Run for the duration specified in g class\n    self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n    # Calculate results over the run\n    self.calculate_run_results()\n\n    return self.results_df\n\n\n\n\n12.2.4 The Trial class\nThe trial class is unchanged.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Modelling Resource Unavailability</span>"
    ]
  },
  {
    "objectID": "modelling_resource_unavailability.html#evaluating-the-outputs",
    "href": "modelling_resource_unavailability.html#evaluating-the-outputs",
    "title": "12  Modelling Resource Unavailability",
    "section": "12.3 Evaluating the outputs",
    "text": "12.3 Evaluating the outputs\n\nimport simpy\nimport random\nimport pandas as pd\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    ##NEW - added values to specify how long nurse is unavailable and at what\n    # frequency (in this example, every 2 hours, the nurse will be unavailable\n    # for 15 minutes)\n    unav_time_nurse = 15\n    unav_freq_nurse = 120\n\n    # Simulation meta parameters\n    sim_duration = 2880\n    number_of_runs = 1\n    warm_up_period = 1440\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n        self.priority = random.randint(1,5)\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        self.nurse = simpy.PriorityResource(self.env,\n                                            capacity=g.number_of_nurses)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n\n        random.seed(42)\n\n    # Generator function that represents the DES generator for patient arrivals\n    def generator_patient_arrivals(self):\n        while True:\n            self.patient_counter += 1\n\n            p = Patient(self.patient_counter)\n\n            self.env.process(self.attend_clinic(p))\n\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n    ##NEW\n    # Generator function to obstruct a nurse resource at specified intervals\n    # for specified amounts of time\n    def obstruct_nurse(self):\n        while True:\n            print (f\"{self.env.now:.2f}: The nurse will go on a break at around time\",\n                   f\"{(self.env.now + g.unav_freq_nurse):.2f}\")\n\n            # The generator first pauses for the frequency period\n            yield self.env.timeout(g.unav_freq_nurse)\n\n            # Once elapsed, the generator requests (demands?) a nurse with\n            # a priority of -1.  This ensure it takes priority over any patients\n            # (whose priority values start at 1).  But it also means that the\n            # nurse won't go on a break until they've finished with the current\n            # patient\n            with self.nurse.request(priority=-1) as req:\n                yield req\n\n                print (f\"{self.env.now:.2f}: The nurse is now on a break and will be back at\",\n                       f\"{(self.env.now + g.unav_time_nurse):.2f}\")\n\n                # Freeze with the nurse held in place for the unavailability\n                # time (ie duration of the nurse's break).  Here, both the\n                # duration and frequency are fixed, but you could randomly\n                # sample them from a distribution too if preferred.\n                yield self.env.timeout(g.unav_time_nurse)\n\n    # Generator function representing pathway for patients attending the\n    # clinic.\n    def attend_clinic(self, patient):\n        # Nurse consultation activity\n        start_q_nurse = self.env.now\n\n        with self.nurse.request(priority=patient.priority) as req:\n            yield req\n\n            end_q_nurse = self.env.now\n\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            if self.env.now &gt; g.warm_up_period:\n                self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                    patient.q_time_nurse\n                )\n\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            yield self.env.timeout(sampled_nurse_act_time)\n\n    # Method to calculate and store results over the run\n    def calculate_run_results(self):\n        self.results_df.drop([1], inplace=True)\n\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # Method to run a single run of the simulation\n    def run(self):\n        # Start up DES generators\n        self.env.process(self.generator_patient_arrivals())\n        ##NEW - we also need to start up the obstructor generator now too\n        self.env.process(self.obstruct_nurse())\n\n        # Run for the duration specified in g class\n        self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n        # Calculate results over the run\n        self.calculate_run_results()\n\n        return self.results_df\n\n# Class representing a Trial for our simulation\nclass Trial:\n    # Constructor\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results and store it against\n        # the run number in the trial results dataframe. We also return the\n        # full patient-level dataframes.\n\n        # First, create an empty list for storing our patient-level dataframes.\n        results_dfs = []\n\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            patient_level_results = my_model.run()\n\n            # First let's record our mean wait time for this run\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n            # Next let's work on our patient-level results dataframes\n            # We start by rounding everything to 2 decimal places\n            patient_level_results = patient_level_results.round(2)\n            # Add a new column recording the run\n            patient_level_results['run'] = run\n            # Now we're just going to add this to our empty list (or, after the first\n            # time we loop through, as an extra dataframe in our list)\n            results_dfs.append(patient_level_results)\n\n        all_results_patient_level = pd.concat(results_dfs)\n\n        # This calculates the attribute self.mean_q_time_nurse_trial\n        self.calculate_means_over_trial()\n\n        # Once the trial (ie all runs) has completed, return the results\n        return self.df_trial_results, all_results_patient_level, self.mean_q_time_nurse_trial\n\n    # Method to print trial results, including averages across runs\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n        print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n\nLet’s look at the printed output showing when our nurses were obstructed.\nThe first number in each line of output shows the simulation time when the message was generated.\n\n\n0.00: The nurse will go on a break at around time 120.00\n120.15: The nurse is now on a break and will be back at 135.15\n135.15: The nurse will go on a break at around time 255.15\n258.44: The nurse is now on a break and will be back at 273.44\n273.44: The nurse will go on a break at around time 393.44\n404.26: The nurse is now on a break and will be back at 419.26\n419.26: The nurse will go on a break at around time 539.26\n540.82: The nurse is now on a break and will be back at 555.82\n555.82: The nurse will go on a break at around time 675.82\n680.63: The nurse is now on a break and will be back at 695.63\n695.63: The nurse will go on a break at around time 815.63\n827.06: The nurse is now on a break and will be back at 842.06\n842.06: The nurse will go on a break at around time 962.06\n968.91: The nurse is now on a break and will be back at 983.91\n983.91: The nurse will go on a break at around time 1103.91\n1106.20: The nurse is now on a break and will be back at 1121.20\n1121.20: The nurse will go on a break at around time 1241.20\n1242.30: The nurse is now on a break and will be back at 1257.30\n1257.30: The nurse will go on a break at around time 1377.30\n1389.51: The nurse is now on a break and will be back at 1404.51\n1404.51: The nurse will go on a break at around time 1524.51\n1532.18: The nurse is now on a break and will be back at 1547.18\n1547.18: The nurse will go on a break at around time 1667.18\n1672.09: The nurse is now on a break and will be back at 1687.09\n1687.09: The nurse will go on a break at around time 1807.09\n1807.86: The nurse is now on a break and will be back at 1822.86\n1822.86: The nurse will go on a break at around time 1942.86\n1947.64: The nurse is now on a break and will be back at 1962.64\n1962.64: The nurse will go on a break at around time 2082.64\n2084.27: The nurse is now on a break and will be back at 2099.27\n2099.27: The nurse will go on a break at around time 2219.27\n2221.93: The nurse is now on a break and will be back at 2236.93\n2236.93: The nurse will go on a break at around time 2356.93\n2359.05: The nurse is now on a break and will be back at 2374.05\n2374.05: The nurse will go on a break at around time 2494.05\n2494.42: The nurse is now on a break and will be back at 2509.42\n2509.42: The nurse will go on a break at around time 2629.42\n2635.29: The nurse is now on a break and will be back at 2650.29\n2650.29: The nurse will go on a break at around time 2770.29\n2776.28: The nurse is now on a break and will be back at 2791.28\n2791.28: The nurse will go on a break at around time 2911.28\n2911.72: The nurse is now on a break and will be back at 2926.72\n2926.72: The nurse will go on a break at around time 3046.72\n3050.18: The nurse is now on a break and will be back at 3065.18\n3065.18: The nurse will go on a break at around time 3185.18\n3203.13: The nurse is now on a break and will be back at 3218.13\n3218.13: The nurse will go on a break at around time 3338.13\n3350.63: The nurse is now on a break and will be back at 3365.63\n3365.63: The nurse will go on a break at around time 3485.63\n3486.03: The nurse is now on a break and will be back at 3501.03\n3501.03: The nurse will go on a break at around time 3621.03\n3623.49: The nurse is now on a break and will be back at 3638.49\n3638.49: The nurse will go on a break at around time 3758.49\n3768.95: The nurse is now on a break and will be back at 3783.95\n3783.95: The nurse will go on a break at around time 3903.95\n3908.67: The nurse is now on a break and will be back at 3923.67\n3923.67: The nurse will go on a break at around time 4043.67\n4045.96: The nurse is now on a break and will be back at 4060.96\n4060.96: The nurse will go on a break at around time 4180.96\n4184.07: The nurse is now on a break and will be back at 4199.07\n4199.07: The nurse will go on a break at around time 4319.07\n\n\nNow let’s look at some of the other outputs and compare them with a version without the nurse obstruction.\nNow let’s look at some of the other outputs and compare them with a version without the nurse obstruction.\n\n\nThe average wait when there are no nurse breaks is 143.18 minutes\n\n\n\n\nThe average wait when there are nurse breaks is 299.7 minutes",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Modelling Resource Unavailability</span>"
    ]
  },
  {
    "objectID": "choosing_distributions.html",
    "href": "choosing_distributions.html",
    "title": "13  Choosing Distributions",
    "section": "",
    "text": "13.1 A bit of background",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Choosing Distributions</span>"
    ]
  },
  {
    "objectID": "choosing_distributions.html#a-bit-of-background",
    "href": "choosing_distributions.html#a-bit-of-background",
    "title": "13  Choosing Distributions",
    "section": "",
    "text": "Tip\n\n\n\nThe good news is that we will be using some prewritten code to specify our lognormal, and all we will need to know to do this is the mean (average) time for our activity, and the standard deviation (a measure of how much the times vary across the dataset that python can calculate for us if given a list of activity times).\nHowever - it’s useful to have a bit more of an idea about what a lognormal is - so do have a read of the section below, but if you don’t quite get it just yet, don’t fret - just remember that lognormal is good for activity times in general, and the exponential distribution is good for inter-arrival times (the time between patients arriving).\n\n\n\n13.1.1 The normal distribution\nA normal distribution is a bell shaped curve that is symmetrical. It is defined by two parameters : μ (Mu) and σ (Sigma), which represent the mean and standard deviation of the distribution. So it’s easy to plug in such values from our own data.\n\n\n\n13.1.2 Logarithms\nBefore we proceed, let’s remind ourselves about something many of us learned at school (and then promptly forgot) : Logarithms.\nLogarithms are basically the opposite of exponentials.\nEffectively, lognormals relate to how many copies of one number multiply together to make another number.\nHow many 4s multiply together to make 64?\n4 x 4 x 4 = 64 We had to multiply 3 copies of the number 4 to get 64.\nThis means that the logarithm is 3.\nWe’d write this as \\[\nY = log_4(64) = 3\n\\]\n\n\n13.1.3 Bringing it all together - lognormal distributions\nHow does this relate to the distribution?\nWell, a Lognormal distribution is one in which the logarithm of the random variable we’re modelling is normally distributed.\nThis means that the the two parameters μ (Mu) and σ (Sigma) used to specify a Lognormal distribution do not represent the mean and standard deviation, unlike the normal distribution; rather, they represent what are known as the location and scale of the distribution respectively.\n\nμ (Mu) and σ (Sigma) represent the mean and standard deviation once the data in the log normal distribution has been transformed using logarithms.\n\nIt’s easy to get the mean and standard deviation of our data.\nIf we used the Normal distribution, we could do that.\n\n\n\n\n\n\nWarning\n\n\n\nThe Normal distribution often isn’t good for activity times - it allows negative values - activity distributions are rarely symmetrical - they’re more likely to be a bit ‘wonky’ (skewed), with just a few activities being much longer\n\n\nThe probalm is we can’t just give a Lognormal distribution the mean and standard deviation, because in a Lognormal distribution, the mean and standard deviation of our data is represented in the underlying normal distribution not the Lognormal distribution (remember, it’s the logarithms of the values that are normally distributed).\n\n\n\n\n\n\nTip\n\n\n\nSo what do we do?\nWe need to convert our mean and standard deviation values (that we get from our real world data) into Mu and Sigma for a Lognormal distribution.\nThis is the key bit you need to understand!",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Choosing Distributions</span>"
    ]
  },
  {
    "objectID": "choosing_distributions.html#code-for-the-lognormal-distribution",
    "href": "choosing_distributions.html#code-for-the-lognormal-distribution",
    "title": "13  Choosing Distributions",
    "section": "13.2 Code for the lognormal distribution",
    "text": "13.2 Code for the lognormal distribution\nThis code was written by Tom Monks.\n\nimport numpy as np\nimport math\n\nclass Lognormal:\n    \"\"\"\n    Encapsulates a lognormal distirbution\n    \"\"\"\n    def __init__(self, mean, stdev, random_seed=None):\n        \"\"\"\n        Params:\n        -------\n        mean = mean of the lognormal distribution\n        stdev = standard dev of the lognormal distribution\n        \"\"\"\n        self.rand = np.random.default_rng(seed=random_seed)\n        mu, sigma = self.normal_moments_from_lognormal(mean, stdev**2)\n        self.mu = mu\n        self.sigma = sigma\n\n    def normal_moments_from_lognormal(self, m, v):\n        '''\n        Returns mu and sigma of normal distribution\n        underlying a lognormal with mean m and variance v\n        source: https://blogs.sas.com/content/iml/2014/06/04/simulate-lognormal\n        -data-with-specified-mean-and-variance.html\n\n        Params:\n        -------\n        m = mean of lognormal distribution\n        v = variance of lognormal distribution\n\n        Returns:\n        -------\n        (float, float)\n        '''\n        phi = math.sqrt(v + m**2)\n        mu = math.log(m**2/phi)\n        sigma = math.sqrt(math.log(phi**2/m**2))\n        return mu, sigma\n\n    def sample(self):\n        \"\"\"\n        Sample from the normal distribution\n        \"\"\"\n        return self.rand.lognormal(self.mu, self.sigma)\n\nWe will add this into our model code.\nThen we just need to make sure we have both a mean and standard deviation (SD) for activity times that we want to represent on Lognormal distributions\nWhen we need to sample an activity time, we create an instance of the Lognormal class with our mean and SD, and call the sample method.\nWe are going to do this in the attend_clinic method of the Model class.\n\ndef attend_clinic(self, patient):\n        # Nurse consultation activity\n        start_q_nurse = self.env.now\n\n        with self.nurse.request(priority=patient.priority) as req:\n            yield req\n\n            end_q_nurse = self.env.now\n\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            if self.env.now &gt; g.warm_up_period:\n                self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                    patient.q_time_nurse\n                )\n\n            ##NEW - we now use a lognormal distribution for the activity time,\n            # so we create an instance of our Lognormal class with the mean\n            # and standard deviations specified in g class, and then sample\n            # from it (we do this in a single line of code here, much as we\n            # did when sampling from the exponential distribution before).\n            sampled_nurse_act_time = Lognormal(\n                g.mean_n_consult_time, g.sd_n_consult_time).sample()\n\n            yield self.env.timeout(sampled_nurse_act_time)",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Choosing Distributions</span>"
    ]
  },
  {
    "objectID": "choosing_distributions.html#additional-distributions",
    "href": "choosing_distributions.html#additional-distributions",
    "title": "13  Choosing Distributions",
    "section": "13.3 Additional distributions",
    "text": "13.3 Additional distributions\nIn fact, there are many different distributions available.\nThe sim-tools package makes it easy to make use of them without having to write lots of classes yourself.\nThe source code for the package can be investigated in its Github Repository.\nTo install the package, run\n\npip install sim-tools\n\nYou can then import a class with\n\nfrom sim_tools.distributions import Exponential\n\nreplacing Exponential with any of the supported distribution classes.\nAn overview of how to use the classes, and of the different distributions included, is embedded below:",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Choosing Distributions</span>"
    ]
  },
  {
    "objectID": "reproducibility.html",
    "href": "reproducibility.html",
    "title": "14  Reproducibility",
    "section": "",
    "text": "14.1 Exploring ways of coding in reproducibility\nThe best place to do this is in our trial class.\nIn our run_trial method within that class, we can set the seed so that it matches the run number.\nThis will ensure each run has a different seed, but that the seed is the same across different runs.\ndef run_trial(self):\n    # Run the simulation for the number of runs specified in g class.\n    # For each run, we create a new instance of the Model class and call its\n    # run method, which sets everything else in motion.  Once the run has\n    # completed, we grab out the stored run results (just mean queuing time\n    # here) and store it against the run number in the trial results\n    # dataframe.\n    for run in range(g.number_of_runs):\n        random.seed(run)\n\n        my_model = Model(run)\n        my_model.run()\n\n        self.df_trial_results.loc[run] = [my_model.mean_q_time_recep,\n                                          my_model.mean_q_time_nurse,\n                                          my_model.mean_q_time_doctor]\n\n    # Once the trial (ie all runs) has completed, print the final results\n    self.print_trial_results()\nLet’s look at the output now.\nLet’s run 100 trials and look at the outputs.\n# Create an instance of the Trial class\nmy_trial = Trial()\n\n# Call the run_trial method of our Trial object\nmy_trial.run_trial()\n\nTrial Results\n            Arrivals  Mean Q Time Recep  Mean Q Time Nurse  Mean Q Time Doctor\nRun Number                                                                    \n0              105.0               0.48               6.77               51.94\n1              117.0               0.90              89.23               10.82\n2              110.0               1.86              27.21               33.57\n3              115.0               0.92              78.11               55.77\n4              104.0               1.52              46.56               94.60\n...              ...                ...                ...                 ...\n95             127.0               0.62              96.29               69.36\n96             132.0               1.01              54.03               34.93\n97             126.0               2.20              67.00               76.15\n98             152.0               1.67              89.61               10.58\n99             112.0               0.70              22.13               82.26\n\n[100 rows x 4 columns]\nArrivals              120.44\nMean Q Time Recep       1.31\nMean Q Time Nurse      64.46\nMean Q Time Doctor     35.10\ndtype: float64\nNow let’s run 100 trials again. Are the results the same?\nLet’s run 100 trials and look at the outputs.\n# Create an instance of the Trial class\nmy_trial = Trial()\n\n# Call the run_trial method of our Trial object\nmy_trial.run_trial()\n\nTrial Results\n            Arrivals  Mean Q Time Recep  Mean Q Time Nurse  Mean Q Time Doctor\nRun Number                                                                    \n0              105.0               0.48               6.77               51.94\n1              117.0               0.90              89.23               10.82\n2              110.0               1.86              27.21               33.57\n3              115.0               0.92              78.11               55.77\n4              104.0               1.52              46.56               94.60\n...              ...                ...                ...                 ...\n95             127.0               0.62              96.29               69.36\n96             132.0               1.01              54.03               34.93\n97             126.0               2.20              67.00               76.15\n98             152.0               1.67              89.61               10.58\n99             112.0               0.70              22.13               82.26\n\n[100 rows x 4 columns]\nArrivals              120.44\nMean Q Time Recep       1.31\nMean Q Time Nurse      64.46\nMean Q Time Doctor     35.10\ndtype: float64\nYes!\nNow let’s compare this when we start changing the number of nurses.\nThis is going to change the queue times for nurses and, by extension, for doctors (as people will be turning up to the doctors at different times).\nHowever, the number of arrivals should remain unchanged.\nTrial Results\n            Arrivals  Mean Q Time Recep  Mean Q Time Nurse  Mean Q Time Doctor\nRun Number                                                                    \n0              105.0               0.48               6.77               51.94\n1              117.0               0.90              89.23               10.82\n2              110.0               1.86              27.21               33.57\n3              115.0               0.92              78.11               55.77\n4              104.0               1.52              46.56               94.60\n...              ...                ...                ...                 ...\n95             127.0               0.62              96.29               69.36\n96             132.0               1.01              54.03               34.93\n97             126.0               2.20              67.00               76.15\n98             152.0               1.67              89.61               10.58\n99             112.0               0.70              22.13               82.26\n\n[100 rows x 4 columns]\nArrivals              120.44\nMean Q Time Recep       1.31\nMean Q Time Nurse      64.46\nMean Q Time Doctor     35.10\ndtype: float64\nTrial Results\n            Arrivals  Mean Q Time Recep  Mean Q Time Nurse  Mean Q Time Doctor\nRun Number                                                                    \n0              106.0               0.96               0.78               52.59\n1               99.0               0.43               2.29               22.72\n2              116.0               2.96               2.84               93.46\n3              123.0               0.86               1.27               57.58\n4              114.0               2.40               3.53               68.42\n...              ...                ...                ...                 ...\n95             123.0               1.39               3.73               45.02\n96             138.0               0.97               1.95              102.04\n97             116.0               1.33               2.34               24.49\n98             125.0               1.07               1.59               40.84\n99             129.0               1.47               5.90               17.22\n\n[100 rows x 4 columns]\nArrivals              118.39\nMean Q Time Recep       1.23\nMean Q Time Nurse       2.98\nMean Q Time Doctor     53.23\ndtype: float64\nUnfortunately, what we wanted (and needed) to happen, hasn’t.\nInstead, we are seeing that the number of arrivals are changing too.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Reproducibility</span>"
    ]
  },
  {
    "objectID": "reproducibility.html#exploring-ways-of-coding-in-reproducibility",
    "href": "reproducibility.html#exploring-ways-of-coding-in-reproducibility",
    "title": "14  Reproducibility",
    "section": "",
    "text": "Warning\n\n\n\nThe method shown in this section has limitations - but reading through this section will help you understand more about seeds and why the method in Section 14.2 (“A robust way to ensure controlled randomness”) is better.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is because of the way random number generation occurs.\nThe order the random numbers are generated in matters - and as the order of events changes (in this case, as we have more nurses, they can see more patients quicker, changing the order that subsequent events happen in).\nLet’s investigate this with two examples.\n\nrandom.seed(42)\n\nprint(f\"1: inter-arrival time 1 {random.expovariate(1.0 / g.patient_inter):.2f}\")\nprint(f\"3: inter-arrival time 2 {random.expovariate(1.0 / g.patient_inter):.2f}\")\nprint(f\"2: reception consult time 1 {random.expovariate(1.0 / g.mean_reception_time):.2f}\")\nprint(f\"4: inter-arrival time 3 {random.expovariate(1.0 / g.patient_inter):.2f}\")\n\n1: inter-arrival time 1 5.10\n3: inter-arrival time 2 0.13\n2: reception consult time 1 0.64\n4: inter-arrival time 3 1.26\n\n\n\nrandom.seed(42)\n\nprint(f\"1: inter-arrival time 1 {random.expovariate(1.0 / g.patient_inter):.2f}\")\nprint(f\"2: inter-arrival time 2 {random.expovariate(1.0 / g.patient_inter):.2f}\")\nprint(f\"4: inter-arrival time 3 {random.expovariate(1.0 / g.patient_inter):.2f}\")\nprint(f\"3: reception consult time  1 {random.expovariate(1.0 / g.mean_reception_time):.2f}\")\n\n1: inter-arrival time 1 5.10\n2: inter-arrival time 2 0.13\n4: inter-arrival time 3 1.61\n3: reception consult time  1 0.51\n\n\nWe can see that the first two inter-arrival times are consistent. However, when we swap the order of generating the next inter-arrival time and generating a length of time for someone to spend with a receptionist, we see that the times are different.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nSo while this method is ok just to ensure that a single output remains consistent when you rerun your analysis, it’s no good for ensuring you’re making good comparisons across different simulation scenarios.\nSo how can we do this?",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Reproducibility</span>"
    ]
  },
  {
    "objectID": "reproducibility.html#sec-robust",
    "href": "reproducibility.html#sec-robust",
    "title": "14  Reproducibility",
    "section": "14.2 A robust way to ensure controlled randomness",
    "text": "14.2 A robust way to ensure controlled randomness\nEffectively, we want separate seeds for the random number generator for each separate type of event we are generating random numbers for.\nThis means that we have separate random number streams for the different parts of our process - our inter-arrival times - our consult times - our probabilities\nThe easiest way to implement this is to switch from using the random library to using the distributions provided in simtools.\nWe will replace random.expovariate with the Exponential class.\nFirst, we need to import this class.\n\nfrom sim_tools.distributions import Exponential\n\nWe now set up the distributions when initialising the model.\n\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        )\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n        self.doctor = simpy.Resource(\n            self.env, capacity=g.number_of_doctors)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0]\n        self.results_df[\"Time with Recep\"] = [0.0]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df[\"Q Time Doctor\"] = [0.0]\n        self.results_df[\"Time with Doctor\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0\n        self.mean_q_time_nurse = 0\n        self.mean_q_time_doctor = 0\n\n        ##NEW - initialise distributions\n        self.patient_inter_arrival_dist = Exponential(mean = g.patient_inter, random_seed = self.run_number*2)\n        self.patient_reception_time_dist = Exponential(mean = g.mean_reception_time, random_seed = self.run_number*3)\n        self.nurse_consult_time_dist = Exponential(mean = g.mean_n_consult_time, random_seed = self.run_number*4)\n        self.doctor_consult_time_dist = Exponential(mean = g.mean_d_consult_time, random_seed = self.run_number*5)\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that the value we pass to initialise the Exponential variable here is just the mean time.\nWhen we were using random.expovariate, we passed 1 dividided by the mean time.\n\n\nNext, everywhere we have previously used random.expovariate, we replace this with the .sample() method of our newly initialised distributions.\nFor example\n\nsampled_doctor_act_time = random.expovariate(\n    1.0 / g.mean_d_consult_time\n)\n\nbecomes\n\nsampled_doctor_act_time = self.doctor_consult_time_dist.sample()\n\nLet’s update all the code and run our previous experiment again.\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nimport simpy\nimport random\nimport pandas as pd\nfrom sim_tools.distributions import Exponential ##NEW\n\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2\n    mean_n_consult_time = 6\n    mean_d_consult_time = 20\n    number_of_receptionists = 1\n    number_of_nurses = 1\n    number_of_doctors = 2\n    prob_seeing_doctor = 0.6\n    sim_duration = 600\n    number_of_runs = 100\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_recep = 0\n        self.q_time_nurse = 0\n        self.q_time_doctor = 0\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        )\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n        self.doctor = simpy.Resource(\n            self.env, capacity=g.number_of_doctors)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0]\n        self.results_df[\"Time with Recep\"] = [0.0]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df[\"Q Time Doctor\"] = [0.0]\n        self.results_df[\"Time with Doctor\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0\n        self.mean_q_time_nurse = 0\n        self.mean_q_time_doctor = 0\n\n        self.patient_inter_arrival_dist = Exponential(mean = g.patient_inter, random_seed = self.run_number*2)\n        self.patient_reception_time_dist = Exponential(mean = g.mean_reception_time, random_seed = self.run_number*3)\n        self.nurse_consult_time_dist = Exponential(mean = g.mean_n_consult_time, random_seed = self.run_number*4)\n        self.doctor_consult_time_dist = Exponential(mean = g.mean_d_consult_time, random_seed = self.run_number*5)\n\n    # A generator function that represents the DES generator for patient\n    # arrivals\n    def generator_patient_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the patient counter by 1 (this means our first patient\n            # will have an ID of 1)\n            self.patient_counter += 1\n\n            # Create a new patient - an instance of the Patient Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # patient - so here we pass the patient counter to use as the ID.\n            p = Patient(self.patient_counter)\n\n            # Tell SimPy to start up the attend_clinic generator function with\n            # this patient (the generator function that will model the\n            # patient's journey through the system)\n            self.env.process(self.attend_clinic(p))\n\n            # Randomly sample the time to the next patient arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter = self.patient_inter_arrival_dist.sample() ##NEW\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter)\n\n    # A generator function that represents the pathway for a patient going\n    # through the clinic.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        start_q_recep = self.env.now\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_recep = self.env.now\n\n            patient.q_time_recep = end_q_recep - start_q_recep\n\n            sampled_recep_act_time = self.patient_reception_time_dist.sample() ##NEW\n\n            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n                 patient.q_time_recep\n            )\n            self.results_df.at[patient.id, \"Time with Recep\"] = (\n                 sampled_recep_act_time\n            )\n\n            yield self.env.timeout(sampled_recep_act_time)\n\n        # Here's where the patient finishes with the receptionist, and starts\n        # queuing for the nurse\n\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = self.nurse_consult_time_dist.sample() ##NEW\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n        # Conditional logic to see if patient goes on to see doctor\n        # We sample from the uniform distribution between 0 and 1.  If the value\n        # is less than the probability of seeing a doctor (stored in g Class)\n        # then we say the patient sees a doctor.\n        # If not, this block of code won't be run and the patient will just\n        # leave the system (we could add in an else if we wanted a branching\n        # path to another activity instead)\n        if random.uniform(0,1) &lt; g.prob_seeing_doctor:\n            start_q_doctor = self.env.now\n\n            with self.doctor.request() as req:\n                yield req\n\n                end_q_doctor = self.env.now\n\n                patient.q_time_doctor = end_q_doctor - start_q_doctor\n\n                sampled_doctor_act_time = self.nurse_consult_time_dist.sample() ##NEW\n\n                self.results_df.at[patient.id, \"Q Time Doctor\"] = (\n                    patient.q_time_doctor\n                )\n                self.results_df.at[patient.id, \"Time with Doctor\"] = (\n                    sampled_doctor_act_time\n                )\n\n                yield self.env.timeout(sampled_doctor_act_time)\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times across patients in this run of the\n        # model.\n        self.mean_q_time_recep = self.results_df[\"Q Time Recep\"].mean()\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n        self.mean_q_time_doctor = self.results_df[\"Q Time Doctor\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new patients.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the patient-level results from this run of\n        # the model\n        return (self.results_df)\n\n# Class representing a Trial for our simulation - a batch of simulation runs.\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Arrivals\"] = [0]\n        self.df_trial_results[\"Mean Q Time Recep\"] = [0.0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results[\"Mean Q Time Doctor\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results.round(2))\n        print(self.df_trial_results.mean().round(2))\n\n    # Method to run a trial\n    def run_trial(self):\n        print(f\"{g.number_of_receptionists} receptionists, {g.number_of_nurses} nurses, {g.number_of_doctors} doctors\") ## NEW\n        print(\"\") ## NEW: Print a blank line\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            random.seed(run)\n\n            my_model = Model(run)\n            patient_level_results = my_model.run()\n\n            self.df_trial_results.loc[run] = [\n                len(patient_level_results),\n                my_model.mean_q_time_recep,\n                my_model.mean_q_time_nurse,\n                my_model.mean_q_time_doctor\n                ]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n\n\n\n\n\n14.2.1 Evaluating the outputs\n\n\n1 receptionists, 1 nurses, 2 doctors\n\nTrial Results\n            Arrivals  Mean Q Time Recep  Mean Q Time Nurse  Mean Q Time Doctor\nRun Number                                                                    \n0              102.0               0.00              57.19                1.15\n1              125.0               1.84             144.69                0.02\n2              112.0               0.85              15.30                1.13\n3              120.0               1.08              82.67                0.04\n4              132.0               1.94             107.47                0.51\n...              ...                ...                ...                 ...\n95              91.0               0.35               9.08                0.15\n96             122.0               1.09              63.11                0.32\n97              97.0               0.58              21.86                0.10\n98             133.0               1.86             124.94                0.09\n99             122.0               0.57              63.14                0.66\n\n[100 rows x 4 columns]\nArrivals              122.39\nMean Q Time Recep       1.27\nMean Q Time Nurse      61.35\nMean Q Time Doctor      0.48\ndtype: float64\n\n\n\n\n1 receptionists, 2 nurses, 2 doctors\n\nTrial Results\n            Arrivals  Mean Q Time Recep  Mean Q Time Nurse  Mean Q Time Doctor\nRun Number                                                                    \n0              102.0               0.00               2.49                1.01\n1              125.0               1.84               3.55                1.56\n2              112.0               0.85               3.61                0.59\n3              120.0               1.08               3.43                0.19\n4              132.0               1.94               4.20                0.91\n...              ...                ...                ...                 ...\n95              91.0               0.35               1.08                0.07\n96             122.0               1.09               2.20                0.73\n97              97.0               0.58               1.09                1.04\n98             133.0               1.86               4.19                1.41\n99             122.0               0.57               1.86                0.85\n\n[100 rows x 4 columns]\nArrivals              122.39\nMean Q Time Recep       1.27\nMean Q Time Nurse       2.97\nMean Q Time Doctor      0.89\ndtype: float64\n\n\nWith these changes made, we can see that the number of arrivals and the queue time for the receptionists across the trials has remained consistent, while the waits for nurses and doctors have changed, but we can now be confident that this is because of alterations to the parameters - not uncontrolled randomness.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Reproducibility</span>"
    ]
  },
  {
    "objectID": "reneging_balking_jockeying.html",
    "href": "reneging_balking_jockeying.html",
    "title": "15  Reneging, balking and jockeying",
    "section": "",
    "text": "15.1 Reneging\nLet’s imagine that each of our patients has a patience level - an amount of time they’re prepared to wait for the nurse.\nTo model this, we : - Add patience level as an attribute to each patient, with some way of determining what a patient’s patience is - When we request a resource, we’ll tell SimPy to either wait until the request can be met OR until the patient’s patience has expired (whichever comes first) - We’ll then check what happened - did the patient wait or did they renege? If they waited, we’ll proceed as before. If they reneged, then they won’t see the nurse, and we’ll record that they reneged - We’ll add the number of patients that reneged to our outputs from each run, and take the average number of patients who reneged per run over the trial.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Reneging, balking and jockeying</span>"
    ]
  },
  {
    "objectID": "reneging_balking_jockeying.html#reneging",
    "href": "reneging_balking_jockeying.html#reneging",
    "title": "15  Reneging, balking and jockeying",
    "section": "",
    "text": "15.1.1 Coding a reneging examaple\n\n15.1.1.1 The g class\nThe g class is unchanged.\n\n\n15.1.1.2 The patient class\nIn the patient class, we add a patience attribute.\nThis determines how long the patient is prepared to wait for the nurse.\nHere we just randomly sample an integer between 5 and 50 (so the patient will be prepared to wait for somewhere between 5 and 50 minutes in the queue), but in a real world application you would probably want to have a more refined way of allocating patience to patients (e.g basing probabilities off prior data, or using a non-uniform named distribution).\nYou could have different patience levels for different queues, or just a general patience level. Or even get creative and have a patience level that decreases the longer they’ve been in the system if your system has multiple steps!\nIf we want to see the effect of this, we can try changing the patience levels - but you’ll need to make the patience levels MUCH higher as this system is in bad shape (after 3 days patients are waiting on average over 3 hours… and a lot are waiting much longer!)\nMaybe try adding another nurse in to get the system under control first!\n\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n        self.priority = random.randint(1,5)\n\n        self.patience_nurse = random.randint(5, 50) ##NEW\n\n\n\n15.1.1.3 The model class\n\n15.1.1.3.1 The init method\nIn the init method, we set up an additional attribute to track the number of people reneging.\n\ndef __init__(self, run_number):\n    # Set up SimPy environment\n    self.env = simpy.Environment()\n\n    # Set up counters to use as entity IDs\n    self.patient_counter = 0\n\n    # Set up resources\n    self.nurse = simpy.PriorityResource(self.env,\n                                        capacity=g.number_of_nurses)\n\n    # Set run number from value passed in\n    self.run_number = run_number\n\n    # Set up DataFrame to store patient-level results\n    self.results_df = pd.DataFrame()\n    self.results_df[\"Patient ID\"] = [1]\n    self.results_df[\"Q Time Nurse\"] = [0.0]\n    self.results_df.set_index(\"Patient ID\", inplace=True)\n\n    # Set up attributes that will store mean queuing times across the run\n    self.mean_q_time_nurse = 0\n\n    ##NEW - we'll set up a new attribute that will store the number of\n    # people that reneged from queues in the run (we only have one queue in\n    # this model)\n    self.num_reneged_nurse = 0\n\n    random.seed(42)\n\n\n\n\n15.1.1.4 The attend_clinic method\nIn the attend clinic, we now add in an OR statement (the vertical line | , also known as a pipe) to our request for the nurse.\n\nresult_of_queue = (yield req | self.env.timeout(patient.patience_nurse))\n\nIt basically says “Wait for the request for the nurse to be fulfilled OR until the patient’s patience level has passed, whichever comes first, and then store whatever the outcome was.\nWe then need to check whether we got our req - the resource we requested - or whether the timeout occurred.\nWe do this with conditional logic:\n\nif req in result_of_queue:\n\nThe indented code after this statement will only take place if the resource became available before the patient’s patience ran out (i.e. if the resource became available before the patience period elapsed).\n\ndef attend_clinic(self, patient):\n    # Nurse consultation activity\n    start_q_nurse = self.env.now\n\n    with self.nurse.request(priority=patient.priority) as req:\n        ##NEW\n        result_of_queue = (yield req |\n                            self.env.timeout(patient.patience_nurse))\n\n        ##NEW - we now need to check whether the patient waited or reneged,\n        # as we could have got to this point of the generator function\n        # either way.  We'll now only get them to see the nurse if they\n        # waited.  If they didn't wait, we'll add to our counter of how\n        # many patients reneged from the queue.\n        if req in result_of_queue:\n            end_q_nurse = self.env.now\n\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            if self.env.now &gt; g.warm_up_period:\n                self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                    patient.q_time_nurse\n                )\n\n            sampled_nurse_act_time = Lognormal(\n                g.mean_n_consult_time, g.sd_n_consult_time).sample()\n\n            yield self.env.timeout(sampled_nurse_act_time)\n        else:\n            self.num_reneged_nurse += 1\n\n            print (f\"Patient {patient.id} reneged after waiting\",\n                    f\"{patient.patience_nurse} minutes\")\n\n\n\n15.1.1.5 The run method\nThe only change to the run method is adding a print statement to the end of it to print the patients who reneged.\n\nprint (f\"{self.num_reneged_nurse} patients reneged from nurse queue\")\n\n\n\n15.1.1.6 The Trial class\n\n15.1.1.6.1 The init method\nIn the init method, we add in an addiitonal attribute that is a placeholder column for the number of people in each run who reneged.\n\ndef  __init__(self):\n    self.df_trial_results = pd.DataFrame()\n    self.df_trial_results[\"Run Number\"] = [0]\n    self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n    ##NEW - additional column of trial results to store the number of\n    # patients that reneged in each run\n    self.df_trial_results[\"Reneged Q Nurse\"] = [0]\n    self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n\n\n15.1.1.6.2 The calculate_means_over_trial method\nWe also now need to calculate the mean number of patients reneging per run.\n\ndef calculate_means_over_trial(self):\n    self.mean_q_time_nurse_trial = (\n        self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n    )\n\n    ##NEW\n    self.mean_reneged_q_nurse = (\n        self.df_trial_results[\"Reneged Q Nurse\"].mean()\n    )\n\n\n\n15.1.1.6.3 The print_trial_results method\n\ndef print_trial_results(self):\n    print (\"Trial Results\")\n    print (self.df_trial_results)\n\n    print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n    ##NEW - we will also now print out the mean number of patients who\n    # reneged from the nurse's queue per run\n    print (f\"Mean Reneged Q Nurse : {self.mean_reneged_q_nurse} patients\")\n\n\n\n15.1.1.6.4 The run_trial method\nWe also need to add the number of patients who reneged from the nurse’s queue as one of the results against each run.\n\ndef run_trial(self):\n    for run in range(g.number_of_runs):\n        my_model = Model(run)\n        my_model.run()\n\n\n        self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse,\n                                            my_model.num_reneged_nurse] ##NEW\n\n    self.calculate_means_over_trial()\n    self.print_trial_results()\n\n\n\n\n\n15.1.2 Exploring the outputs\nThe full code can be seen below:\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nimport simpy\nimport random\nimport pandas as pd\nfrom sim_tools.distributions import Lognormal\n\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n    sd_n_consult_time = 1\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    # Resource unavailability duration and frequency\n    unav_time_nurse = 15\n    unav_freq_nurse = 120\n\n    # Simulation meta parameters\n    sim_duration = 120\n    number_of_runs = 1\n    warm_up_period = 360\n\n    random.seed(42)\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n        self.priority = random.randint(1,5)\n\n        ##NEW - added a new patience attribute of the patient.  This determines\n        # how long the patient is prepared to wait for the nurse.  Here we just\n        # randomly sample an integer between 5 and 50 (so the patient will be\n        # prepared to wait for somewhere between 5 and 50 minutes in the queue),\n        # but in a real world application you would probably want to have a\n        # more refined way of allocating patience to patients (e.g basing\n        # probabilities off prior data, or using a non-uniform named\n        # distribution).  You could have different patience levels for different\n        # queues, or just a general patience level.  Or even get creative and\n        # have a patience level that decreases the longer they've been in the\n        # system!\n        # If we want to see the effect of this, we can try changing the patience\n        # levels - but you'll need to make the patience levels MUCH higher as\n        # this system is in bad shape (remember, after 3 days patients are\n        # waiting on average over 3 hours... and a lot are waiting much longer!)\n        # Maybe try adding another nurse in to get the system under control\n        # first!\n        self.patience_nurse = random.randint(5, 50)\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        self.nurse = simpy.PriorityResource(self.env,\n                                            capacity=g.number_of_nurses)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n\n        ##NEW - we'll set up a new attribute that will store the number of\n        # people that reneged from queues in the run (we only have one queue in\n        # this model)\n        self.num_reneged_nurse = 0\n\n    # Generator function that represents the DES generator for patient arrivals\n    def generator_patient_arrivals(self):\n        while True:\n            self.patient_counter += 1\n\n            p = Patient(self.patient_counter)\n\n            self.env.process(self.attend_clinic(p))\n\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n\n    # Generator function representing pathway for patients attending the\n    # clinic.\n    def attend_clinic(self, patient):\n        # Nurse consultation activity\n        start_q_nurse = self.env.now\n\n        with self.nurse.request(priority=patient.priority) as req:\n            ##NEW - this statement now uses a vertical bar (|) / pipe as an \"or\"\n            # statement.  It basically says \"Wait for the request for the nurse\n            # to be fulfilled OR until the patient's patience level has passed,\n            # whichever comes first, and then store whatever the outcome was.\n            result_of_queue = (yield req |\n                               self.env.timeout(patient.patience_nurse))\n\n            ##NEW - we now need to check whether the patient waited or reneged,\n            # as we could have got to this point of the generator function\n            # either way.  We'll now only get them to see the nurse if they\n            # waited.  If they didn't wait, we'll add to our counter of how\n            # many patients reneged from the queue.\n            if req in result_of_queue:\n                end_q_nurse = self.env.now\n\n                patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n                if self.env.now &gt; g.warm_up_period:\n                    self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                        patient.q_time_nurse\n                    )\n\n                sampled_nurse_act_time = Lognormal(\n                    g.mean_n_consult_time, g.sd_n_consult_time).sample()\n\n                yield self.env.timeout(sampled_nurse_act_time)\n            else:\n                self.num_reneged_nurse += 1\n\n                print (f\"Patient {patient.id} reneged after waiting\",\n                       f\"{patient.patience_nurse} minutes\")\n\n    # Method to calculate and store results over the run\n    def calculate_run_results(self):\n        self.results_df.drop([1], inplace=True)\n\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # Method to run a single run of the simulation\n    def run(self):\n        # Start up DES generators\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run for the duration specified in g class\n        self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n        # Calculate results over the run\n        self.calculate_run_results()\n\n        # Print patient level results for this run\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)\n        ##NEW - we'll print out the number of patients that reneged from the\n        # nurse queue in this run of the model.\n        print (f\"{self.num_reneged_nurse} patients reneged from nurse queue\")\n\n# Class representing a Trial for our simulation\nclass Trial:\n    # Constructor\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        ##NEW - additional column of trial results to store the number of\n        # patients that reneged in each run\n        self.df_trial_results[\"Reneged Q Nurse\"] = [0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n        ##NEW - we also now need to calculate the mean number of patients\n        # reneging per run\n        self.mean_reneged_q_nurse = (\n            self.df_trial_results[\"Reneged Q Nurse\"].mean()\n        )\n\n    # Method to print trial results, including averages across runs\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n        print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n        ##NEW - we will also now print out the mean number of patients who\n        # reneged from the nurse's queue per run\n        print (f\"Mean Reneged Q Nurse : {self.mean_reneged_q_nurse} patients\")\n\n    # Method to run trial\n    def run_trial(self):\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            ##NEW - we also need to add the number of patients who reneged from\n            # the nurse's queue as one of the results against each run\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse,\n                                              my_model.num_reneged_nurse]\n\n        self.calculate_means_over_trial()\n        self.print_trial_results()\n\n\n\n\nWhat are the outputs?\n\n# Create new instance of Trial and run it\nmy_trial = Trial()\nmy_trial.run_trial()\n\nPatient 9 reneged after waiting 22 minutes\nPatient 12 reneged after waiting 11 minutes\nPatient 16 reneged after waiting 10 minutes\nPatient 17 reneged after waiting 28 minutes\nPatient 21 reneged after waiting 15 minutes\nPatient 41 reneged after waiting 5 minutes\nPatient 34 reneged after waiting 32 minutes\nPatient 35 reneged after waiting 28 minutes\nPatient 61 reneged after waiting 12 minutes\nPatient 57 reneged after waiting 43 minutes\nPatient 63 reneged after waiting 19 minutes\nPatient 67 reneged after waiting 22 minutes\nPatient 75 reneged after waiting 11 minutes\nPatient 80 reneged after waiting 5 minutes\nPatient 78 reneged after waiting 9 minutes\nPatient 70 reneged after waiting 31 minutes\nPatient 79 reneged after waiting 11 minutes\nPatient 72 reneged after waiting 31 minutes\nPatient 69 reneged after waiting 41 minutes\nPatient 92 reneged after waiting 10 minutes\nPatient 91 reneged after waiting 15 minutes\nPatient 95 reneged after waiting 20 minutes\nPatient 102 reneged after waiting 5 minutes\nPatient 97 reneged after waiting 41 minutes\nRun Number 0\n            Q Time Nurse\nPatient ID              \n76             12.477627\n77             15.836619\n81              0.000000\n82              5.274964\n83              1.635709\n84              4.429271\n85              0.000000\n86              1.959950\n87              1.624593\n88              8.530076\n89              6.294337\n90             11.291027\n93              2.345285\n96              2.620579\n94             12.480636\n100             1.141247\n98             14.093299\n99             13.475734\n101            13.083061\n104             1.556632\n105             4.936980\n24 patients reneged from nurse queue\nTrial Results\n            Mean Q Time Nurse  Reneged Q Nurse\nRun Number                                    \n0                    6.432744               24\nMean Q Nurse : 6.4 minutes\nMean Reneged Q Nurse : 24.0 patients\n\n\nWe can see that not every patient is reneging.\nWe can also see that some patients who arrived in the system later balk earlier than patients who have been there longer (i.e. a patient with a later ID balks before a patient with an earlier ID). This is due to the randomly set reneging threshold for each patient - some people aren’t willing to wait as long.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Reneging, balking and jockeying</span>"
    ]
  },
  {
    "objectID": "reneging_balking_jockeying.html#balking",
    "href": "reneging_balking_jockeying.html#balking",
    "title": "15  Reneging, balking and jockeying",
    "section": "15.2 Balking",
    "text": "15.2 Balking\nFor balking, there are two different ways in which balking can occur (and both could occur in the same model) :\n\nAn entity may choose not to join a queue because it is too long for their preferences / needs\nAn entity may not be able to join a queue because there is no capacity for them\n\nWe will look at the latter, but the way we approach it is the same for both - the only difference is that, in the former, the maximum queue length is likely to be an attribute of the patient (and may be individual per patient) just like in the reneging example, rather than an attribute of the model.\nHere, we’ll imagine that in our clinic, there is only space for 3 people to wait to see the nurse, and if there is no space, they cannot wait.\nTo model our balking requirements, we will : - Add a parameter to g class to store the maximum queue length allowed (if this were patient-decided balking, we’d put this in the patient class instead) - Add a list to our model attributes that will store all the patient objects currently in the queue for the nurse. This is really useful as it allows us to see who is in the queue at any time, as well as how many etc - Whenever a patient joins or leaves the queue, we’ll update the list of patients in the queue - Before we ask for the nurse resource, we’ll first check if the queue is at maximum size. If it is, the patient will never join the queue and we’ll record that. If not, we’ll proceed as before. We’ll add results of number of patients who balked to our results\n\n15.2.1 Coding a balking example\n\n15.2.1.1 The g Class\nWe’ll add a parameter value that will store the maximum length of the queue we allow for the nurse.\nLet’s imagine there’s only space for 3 people in the waiting room and so no more than 3 people can wait at any time.\n\n\n\n\n\n\nNote\n\n\n\nNote - we could simulate balking from the perspective of the patient instead (or as well) - e.g. the patient will only wait if there are no more than x people waiting etc. If we did this, we’d probably want to make this level an attribute of the patient, as it may vary between patients.\n\n\n\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n    sd_n_consult_time = 1\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    # Resource unavailability duration and frequency\n    unav_time_nurse = 15\n    unav_freq_nurse = 120\n\n    ##NEW\n    max_q_nurse = 3\n\n    # Simulation meta parameters\n    sim_duration = 2880\n    number_of_runs = 100\n    warm_up_period = 1440\n\n\n\n15.2.1.2 The Patient Class\nThis class is unchanged.\n\n\n15.2.1.3 The Model Class\n\n15.2.1.3.1 The init method\nHere we add in an additional attribute to count the number of people who balk.\nWe also we add a list that will store patient objects queuing for the nurse consultation. This will allow us to see who is in the queue at any time, as well as the length of the queue etc.\n\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        self.nurse = simpy.PriorityResource(self.env,\n                                            capacity=g.number_of_nurses)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n\n        # Set up attributes that will store queuing behaviour results across\n        # run\n        self.num_balked_nurse = 0 ##NEW\n\n        self.q_for_nurse_consult = [] ##NEW\n\n\n\n15.2.1.3.2 The generator_patient_arrival method\nThis method is unchanged.\n\n\n15.2.1.3.3 The attend_clinic method\n\ndef attend_clinic(self, patient):\n        ##NEW - we now first check whether there is room for the patient to\n        # wait.  If there is, then proceed as before.  If not, then the patient\n        # never joins the queue, and we record that a patient balked.\n        if len(self.q_for_nurse_consult) &lt; g.max_q_nurse:\n            # Nurse consultation activity\n            start_q_nurse = self.env.now\n\n            ##NEW - add the patient object to the list of patients queuing for\n            # the nurse\n            self.q_for_nurse_consult.append(patient)\n\n            with self.nurse.request(priority=patient.priority) as req:\n                yield req\n\n                ##NEW - remove the patient object from the list of patients\n                # queuing for the nurse (by putting it here, the patient will\n                # be removed whether they waited or reneged)\n                self.q_for_nurse_consult.remove(patient)\n\n                end_q_nurse = self.env.now\n\n                patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n                if self.env.now &gt; g.warm_up_period:\n                    self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                        patient.q_time_nurse\n                    )\n\n                sampled_nurse_act_time = Lognormal(\n                    g.mean_n_consult_time, g.sd_n_consult_time).sample()\n\n                yield self.env.timeout(sampled_nurse_act_time)\n\n        else:\n            self.num_balked_nurse += 1\n\n\n\n15.2.1.3.4 The calculate_run_results method\nThis method is unchanged.\n\n\n15.2.1.3.5 The run method\nHere we have added a print message displaying how many patients balked in this run.\n\ndef run(self):\n    # Start up DES generators\n    self.env.process(self.generator_patient_arrivals())\n\n    # Run for the duration specified in g class\n    self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n    # Calculate results over the run\n    self.calculate_run_results()\n\n    # Print patient level results for this run\n    print (f\"Run Number {self.run_number}\")\n    print (self.results_df)\n    print (f\"{self.num_balked_nurse} patients balked at the nurse queue\") ## NEW\n\n\n\n\n15.2.1.4 The Trial Class\n\n15.2.1.4.1 The init method\nFirst we add in a column to store the number who balked at the nurse queue in each run.\n\ndef  __init__(self):\n    self.df_trial_results = pd.DataFrame()\n    self.df_trial_results[\"Run Number\"] = [0]\n    self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n    self.df_trial_results[\"Balked Q Nurse\"] = [0] ##NEW\n    self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n\n\n15.2.1.4.2 The calculate_means_over_trial method\nWe add a calculation of mean number of patients who balked at the nurse queue per run.\n\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n        ##NEW\n        self.mean_balked_q_nurse = (\n            self.df_trial_results[\"Balked Q Nurse\"].mean()\n        )\n\n\n\n15.2.1.4.3 The print_trial_results method\nWe add in a print message of mean number of patients balking at nurse queue per run.\n\ndef print_trial_results(self):\n    print (\"Trial Results\")\n    print (self.df_trial_results)\n\n    print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n\n    print (f\"Mean Balked Q Nurse : {self.mean_balked_q_nurse} patients\") ##NEW\n\n\n\n15.2.1.4.4 The run_trial method\nFinally we add the number that balked at the nurse queue to results in the run.\n\ndef run_trial(self):\n    for run in range(g.number_of_runs):\n        my_model = Model(run)\n        my_model.run()\n\n        self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse,\n                                            my_model.num_balked_nurse] ##NEW\n\n    self.calculate_means_over_trial()\n    self.print_trial_results()\n\n\n\n\n\n15.2.2 Exploring the outputs\nThe full code can be seen below:\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nimport simpy\nimport random\nimport pandas as pd\nfrom sim_tools.distributions import Lognormal\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n    sd_n_consult_time = 1\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    ##NEW - we'll add a parameter value that will store the maximum length of\n    # the queue we allow for the nurse.  Let's imagine there's only space for 3\n    # people in the waiting room and so no more than 3 people can wait at any\n    # time.  Note - we could simulate balking from the perspective of the\n    # patient instead (or as well) - e.g. the patient will only wait if there\n    # are no more than x people waiting etc.  If we did this, we'd probably\n    # want to make this level an attribute of the patient, as it may vary\n    # between patients.\n    max_q_nurse = 3\n\n    # Simulation meta parameters\n    sim_duration = 2880\n    number_of_runs = 3\n    warm_up_period = 1440\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n        self.priority = random.randint(1,5)\n        self.patience_nurse = random.randint(5, 50)\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        self.nurse = simpy.PriorityResource(self.env,\n                                            capacity=g.number_of_nurses)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n\n        # Set up attributes that will store queuing behaviour results across\n        # run\n        self.num_balked_nurse = 0 ##NEW - added to record number balking\n\n        ##NEW - we add a list that will store patient objects queuing for the\n        # nurse consultation.  This will allow us to see who is in the queue at\n        # any time, as well as the length of the queue etc\n        self.q_for_nurse_consult = []\n\n    # Generator function that represents the DES generator for patient arrivals\n    def generator_patient_arrivals(self):\n        while True:\n            self.patient_counter += 1\n\n            p = Patient(self.patient_counter)\n\n            self.env.process(self.attend_clinic(p))\n\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n    # Generator function representing pathway for patients attending the\n    # clinic.\n    def attend_clinic(self, patient):\n        ##NEW - we now first check whether there is room for the patient to\n        # wait.  If there is, then proceed as before.  If not, then the patient\n        # never joins the queue, and we record that a patient balked.\n        if len(self.q_for_nurse_consult) &lt; g.max_q_nurse:\n            # Nurse consultation activity\n            start_q_nurse = self.env.now\n\n            ##NEW - add the patient object to the list of patients queuing for\n            # the nurse\n            self.q_for_nurse_consult.append(patient)\n\n            with self.nurse.request(priority=patient.priority) as req:\n                yield req\n\n                ##NEW - remove the patient object from the list of patients\n                # queuing for the nurse (by putting it here, the patient will\n                # be removed whether they waited or reneged)\n                self.q_for_nurse_consult.remove(patient)\n\n                end_q_nurse = self.env.now\n\n                patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n                if self.env.now &gt; g.warm_up_period:\n                    self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                        patient.q_time_nurse\n                    )\n\n                sampled_nurse_act_time = Lognormal(\n                    g.mean_n_consult_time, g.sd_n_consult_time).sample()\n\n                yield self.env.timeout(sampled_nurse_act_time)\n\n        else:\n            self.num_balked_nurse += 1\n\n    # Method to calculate and store results over the run\n    def calculate_run_results(self):\n        self.results_df.drop([1], inplace=True)\n\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # Method to run a single run of the simulation\n    def run(self):\n        # Start up DES generators\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run for the duration specified in g class\n        self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n        # Calculate results over the run\n        self.calculate_run_results()\n\n        # Print patient level results for this run\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)\n        ##NEW - added print message displaying how many patients balked in this\n        # run\n        print (f\"{self.num_balked_nurse} patients balked at the nurse queue\")\n\n# Class representing a Trial for our simulation\nclass Trial:\n    # Constructor\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        ##NEW - added column to store the number who balked at the nurse queue\n        # in each run\n        self.df_trial_results[\"Balked Q Nurse\"] = [0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n        ##NEW - added calculation of mean number of patients who balked at the\n        # nurse queue per run\n        self.mean_balked_q_nurse = (\n            self.df_trial_results[\"Balked Q Nurse\"].mean()\n        )\n\n    # Method to print trial results, including averages across runs\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n        print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n        ##NEW - added print message of mean number of patients balking at nurse\n        # queue per run\n        print (f\"Mean Balked Q Nurse : {self.mean_balked_q_nurse} patients\")\n\n    # Method to run trial\n    def run_trial(self):\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            ##NEW - added number balked at nurse queue to results in the run\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse,\n                                              my_model.num_balked_nurse]\n\n        self.calculate_means_over_trial()\n        self.print_trial_results()\n\n\n\n\nWhat are the outputs?\nWe are doing three runs in this case.\n\n# Create new instance of Trial and run it\nmy_trial = Trial()\nmy_trial.run_trial()\n\nRun Number 0\n            Q Time Nurse\nPatient ID              \n285             5.166662\n286            10.077823\n284            28.772422\n289             0.000000\n291             3.161387\n...                  ...\n874             8.307967\n876             6.554129\n879             4.085122\n869            46.343944\n881             4.458209\n\n[451 rows x 1 columns]\n207 patients balked at the nurse queue\nRun Number 1\n            Q Time Nurse\nPatient ID              \n267             1.660430\n268             5.813835\n271             0.759033\n270             8.409114\n272            10.823076\n...                  ...\n835             9.074143\n837             2.793955\n838             4.225960\n839             2.206083\n840             7.390078\n\n[457 rows x 1 columns]\n158 patients balked at the nurse queue\nRun Number 2\n            Q Time Nurse\nPatient ID              \n296             5.996437\n297            10.471768\n300             0.142250\n301             1.747683\n302             1.625973\n...                  ...\n902            25.660093\n908             4.406648\n909             0.000000\n910             0.000000\n911             3.087414\n\n[461 rows x 1 columns]\n217 patients balked at the nurse queue\nTrial Results\n            Mean Q Time Nurse  Balked Q Nurse\nRun Number                                   \n0                   10.574942           207.0\n1                   10.233106           158.0\n2                   10.311482           217.0\nMean Q Nurse : 10.4 minutes\nMean Balked Q Nurse : 194.0 patients\n\n\nWe can see that we have patients reneging, but due to the random variation across the arrivals and consult times, the size of the queue is different at different points in time, so we get variation in the patients balking each time.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Reneging, balking and jockeying</span>"
    ]
  },
  {
    "objectID": "reneging_balking_jockeying.html#jockeying",
    "href": "reneging_balking_jockeying.html#jockeying",
    "title": "15  Reneging, balking and jockeying",
    "section": "15.3 Jockeying",
    "text": "15.3 Jockeying\nTrue jockeying involves entities switching from one queue to another, typically because they make a decision that they will likely be seen faster if they do.\nIn over 13 years, the author has never used jockeying to model a healthcare system. SimPy documentation does not cover it either and makes a point of saying they won’t (which implies it’s complicated, though fundamentally you’d need a model of the behaviour in making that decision combined with removing the entity from one queue and placing it in another).\nThere are likely to be few systems that you will model that would use jockeying. However, you might encounter systems where entities pick which queue to join in the first place based on queue length (eg patients deciding which Minor Injury Unit or Emergency Department to attend based on live waiting time data online).\nFor that reason, the example here will be based on this kind of model.\n\n15.3.1 A ‘choosing queues’ example\nLet’s imagine a slight change to our nurse clinic model.\nLet’s imagine that, as well as the nurse, there is also a doctor that patients can see that offers the same service. Patients can choose to join whichever queue they prefer - and they do this by joining the nurse queue if it’s shorter (and the nurse has capacity), and otherwise joining the doctor’s queue.\nThe doctor’s queue has no limits on capacity, and the doctor does not take a break (or rather, there is always a doctor available).\nConsultation times with the doctor are slightly shorter on average (5 mins vs 6 mins for the nurse), but more variable (with a standard deviation of 3 mins vs 1 min for the nurse).\nWe’re also going to imagine that word has got out that there’s now a doctor available too, and demand has more than doubled - patients are now arriving at the clinic every 2 minutes on average, compared to an average of every 5 minutes before.\nDue to the new logic, there should never be any patients balking (as they’d join the doctor’s queue if the nurse queue is full, and the doctor’s queue doesn’t have a capacity constraint), but we’ll still record these numbers so we can check that.\n\n\n15.3.2 Coding the ‘choosing queues’ example\nThe full code can be seen below.\nThis example brings together code for - nurse breaks - reneging - balking - queue choosing\n\n\n\n\n\n\nNote\n\n\n\n\nimport simpy\nimport random\nimport pandas as pd\nfrom sim_tools.distributions import Lognormal\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 2 ##NEW - decreased time to generate more frequent arrivals\n\n    # Activity times\n    mean_n_consult_time = 6\n    sd_n_consult_time = 1\n\n    mean_d_consult_time = 5 ##NEW - added mean consult time for doctor\n    sd_d_consult_time = 3 ##NEW - added SD consult time for doctor\n\n    # Resource numbers\n    number_of_nurses = 1\n    number_of_doctors = 1 ##NEW - added parameter to store number of doctors\n\n    # Resource unavailability duration and frequency\n    unav_time_nurse = 15\n    unav_freq_nurse = 120\n\n    # Maximum allowable queue lengths\n    max_q_nurse = 10\n\n    # Simulation meta parameters\n    sim_duration = 480 ##NEW significantly shortened so can see clear queue plot\n    number_of_runs = 1\n    warm_up_period = 1440\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n        self.q_time_doc = 0 ##NEW - attribute to store queuing time for doctor\n        self.priority = random.randint(1,5)\n        self.patience_nurse = random.randint(5, 50)\n        ##NEW - added random allocation of patience level to see doctor\n        self.patience_doctor = random.randint(20, 100)\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        self.nurse = simpy.PriorityResource(self.env,\n                                            capacity=g.number_of_nurses)\n\n        ##NEW - added doctor resource also as PriorityResource\n        self.doctor = simpy.PriorityResource(self.env,\n                                             capacity=g.number_of_doctors)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        ##NEW - added column to store queuing time for doctor for each patient\n        self.results_df[\"Q Time Doctor\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n        self.mean_q_time_doctor = 0 ##NEW - store mean q time for doctor\n\n        # Set up attributes that will store queuing behaviour results across\n        # run\n        self.num_reneged_nurse = 0\n        self.num_balked_nurse = 0\n\n        ##NEW - added equivalent queuing behaviour attributes for doctor\n        # though no balking should occur for the doctor or the nurse in this\n        # scenario - if there is no capacity in the nurse queue, the patient\n        # will join the doctor queue, which has no limit\n        self.num_reneged_doctor = 0\n        self.num_balked_doctor = 0\n\n        # Set up lists to store patient objects in each queue\n        self.q_for_nurse_consult = []\n        self.q_for_doc_consult = [] ##NEW - list to store queue for doctor\n\n        # Pandas dataframe to record number in queue(s) over time\n        self.queue_df = pd.DataFrame()\n        self.queue_df[\"Time\"] = [0.0]\n        self.queue_df[\"Num in Q Nurse\"] = [0]\n        self.queue_df[\"Num in Q Doctor\"] = [0] ##NEW added column for doctor\n\n    # Generator function that represents the DES generator for patient arrivals\n    def generator_patient_arrivals(self):\n        while True:\n            self.patient_counter += 1\n\n            p = Patient(self.patient_counter)\n\n            self.env.process(self.attend_clinic(p))\n\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n    # Generator function to obstruct a nurse resource at specified intervals\n    # for specified amounts of time\n    def obstruct_nurse(self):\n        while True:\n            # The generator first pauses for the frequency period\n            yield self.env.timeout(g.unav_freq_nurse)\n\n            # Once elapsed, the generator requests (demands?) a nurse with\n            # a priority of -1.  This ensure it takes priority over any patients\n            # (whose priority values start at 1).  But it also means that the\n            # nurse won't go on a break until they've finished with the current\n            # patient\n            with self.nurse.request(priority=-1) as req:\n                yield req\n\n                # Freeze with the nurse held in place for the unavailability\n                # time (ie duration of the nurse's break).  Here, both the\n                # duration and frequency are fixed, but you could randomly\n                # sample them from a distribution too if preferred.\n                yield self.env.timeout(g.unav_time_nurse)\n\n    # Generator function representing pathway for patients attending the\n    # clinic.\n    def attend_clinic(self, patient):\n\n        ##NEW - check whether queue for the nurse is shorter than the queue for\n        # the doctor AND that there is space in the nurse's queue (which is\n        # constrained).  If both of these are true, then join the queue for the\n        # nurse, otherwise join the queue for the doctor.\n        if ((len(self.q_for_nurse_consult) &lt; len(self.q_for_doc_consult)) and\n            (len(self.q_for_nurse_consult) &lt; g.max_q_nurse)):\n            # Nurse consultation activity\n            start_q_nurse = self.env.now\n\n            self.q_for_nurse_consult.append(patient)\n\n            # Record number in queue alongside the current time\n            ##NEW need to also add length of current queue for doctor to the\n            # list (need to add both even though this is just an update to the\n            # length of the nurse list)\n            if self.env.now &gt; g.warm_up_period:\n                self.queue_df.loc[len(self.queue_df)] = [\n                    self.env.now,\n                    len(self.q_for_nurse_consult),\n                    len(self.q_for_doc_consult)\n                ]\n\n            with self.nurse.request(priority=patient.priority) as req:\n                result_of_queue = (yield req |\n                                self.env.timeout(patient.patience_nurse))\n\n                self.q_for_nurse_consult.remove(patient)\n\n                # Record number in queue alongside the current time\n                ##NEW need to also add length of current queue for doctor to the\n                # list (need to add both even though this is just an update to\n                # the length of the nurse list)\n                if self.env.now &gt; g.warm_up_period:\n                    self.queue_df.loc[len(self.queue_df)] = [\n                        self.env.now,\n                        len(self.q_for_nurse_consult),\n                        len(self.q_for_doc_consult)\n                    ]\n\n                if req in result_of_queue:\n                    end_q_nurse = self.env.now\n\n                    patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n                    if self.env.now &gt; g.warm_up_period:\n                        self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                            patient.q_time_nurse\n                        )\n\n                    sampled_nurse_act_time = Lognormal(\n                        g.mean_n_consult_time, g.sd_n_consult_time).sample()\n\n                    yield self.env.timeout(sampled_nurse_act_time)\n                else:\n                    self.num_reneged_nurse += 1\n        else:\n            ##NEW - logic for patient to join queue for the doctor instead.\n            # In this system, there should be no balking as if the queue for the\n            # nurse has no more capacity, they'll just see the doctor which\n            # doesn't have a limit.\n\n            # Doctor consultation activity\n            start_q_doc = self.env.now\n\n            self.q_for_doc_consult.append(patient)\n\n            # Record number in queue alongside the current time\n            if self.env.now &gt; g.warm_up_period:\n                self.queue_df.loc[len(self.queue_df)] = [\n                    self.env.now,\n                    len(self.q_for_nurse_consult),\n                    len(self.q_for_doc_consult)\n                ]\n\n            with self.doctor.request(priority=patient.priority) as req:\n                result_of_queue = (yield req |\n                                self.env.timeout(patient.patience_doctor))\n\n                self.q_for_doc_consult.remove(patient)\n\n                # Record number in queue alongside the current time\n                if self.env.now &gt; g.warm_up_period:\n                    self.queue_df.loc[len(self.queue_df)] = [\n                        self.env.now,\n                        len(self.q_for_nurse_consult),\n                        len(self.q_for_doc_consult)\n                    ]\n\n                if req in result_of_queue:\n                    end_q_doc = self.env.now\n\n                    patient.q_time_doc = end_q_doc - start_q_doc\n\n                    if self.env.now &gt; g.warm_up_period:\n                        self.results_df.at[patient.id, \"Q Time Doctor\"] = (\n                            patient.q_time_doc\n                        )\n\n                    sampled_doc_act_time = Lognormal(\n                        g.mean_d_consult_time, g.sd_d_consult_time).sample()\n\n                    yield self.env.timeout(sampled_doc_act_time)\n                else:\n                    self.num_reneged_doctor += 1\n\n    # Method to calculate and store results over the run\n    def calculate_run_results(self):\n        self.results_df.drop([1], inplace=True)\n\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n        ##NEW - added calculation for mean queuing time for doctor\n        self.mean_q_time_doctor = self.results_df[\"Q Time Doctor\"].mean()\n\n    # Method to run a single run of the simulation\n    def run(self):\n        # Start up DES generators\n        self.env.process(self.generator_patient_arrivals())\n        self.env.process(self.obstruct_nurse())\n\n        # Run for the duration specified in g class\n        self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n        # Calculate results over the run\n        self.calculate_run_results()\n\n        # Print patient level results for this run\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)\n        print (f\"{self.num_reneged_nurse} patients reneged from nurse queue\")\n        print (f\"{self.num_balked_nurse} patients balked at the nurse queue\")\n        ##NEW added print statements for reneging and balking from doctor queue\n        print (f\"{self.num_reneged_doctor} patients reneged from the doctor\",\n               \"queue\")\n        print (f\"{self.num_balked_doctor} patients balked at the doctor queue\")\n        # Print queues over time dataframe for this run\n        print (\"Queues over time\")\n        print (self.queue_df)\n\n# Class representing a Trial for our simulation\nclass Trial:\n    # Constructor\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results[\"Reneged Q Nurse\"] = [0]\n        self.df_trial_results[\"Balked Q Nurse\"] = [0]\n        ##NEW added columns to store number trial results relating to doctor\n        self.df_trial_results[\"Mean Q Time Doctor\"] = [0.0]\n        self.df_trial_results[\"Reneged Q Doctor\"] = [0]\n        self.df_trial_results[\"Balked Q Doctor\"] = [0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n        self.mean_reneged_q_nurse = (\n            self.df_trial_results[\"Reneged Q Nurse\"].mean()\n        )\n\n        self.mean_balked_q_nurse = (\n            self.df_trial_results[\"Balked Q Nurse\"].mean()\n        )\n\n        ##NEW added calculations for doctor queue and activity across trial\n        self.mean_q_time_doc_trial = (\n            self.df_trial_results[\"Mean Q Time Doctor\"].mean()\n        )\n\n        self.mean_reneged_q_doc = (\n            self.df_trial_results[\"Reneged Q Doctor\"].mean()\n        )\n\n        self.mean_balked_q_doc = (\n            self.df_trial_results[\"Balked Q Doctor\"].mean()\n        )\n\n    # Method to print trial results, including averages across runs\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n        print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n        print (f\"Mean Reneged Q Nurse : {self.mean_reneged_q_nurse} patients\")\n        print (f\"Mean Balked Q Nurse : {self.mean_balked_q_nurse} patients\")\n\n        ##NEW added print statements for trial results related to doctor\n        print (f\"Mean Q Doctor : {self.mean_q_time_doc_trial:.1f} minutes\")\n        print (f\"Mean Reneged Q Doctor : {self.mean_reneged_q_doc} patients\")\n        print (f\"Mean Balked Q Doctor : {self.mean_balked_q_doc} patients\")\n\n    # Method to run trial\n    def run_trial(self):\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            ##NEW added doctor results to end of list of results to add for this\n            # run\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse,\n                                              my_model.num_reneged_nurse,\n                                              my_model.num_balked_nurse,\n                                              my_model.mean_q_time_doctor,\n                                              my_model.num_reneged_doctor,\n                                              my_model.num_balked_doctor]\n\n        self.calculate_means_over_trial()\n        self.print_trial_results()\n\n\n\n\n\n15.3.3 Exploring the outputs\n\nmy_trial = Trial()\nmy_trial.run_trial()\n\nRun Number 0\n            Q Time Nurse  Q Time Doctor\nPatient ID                             \n717                  NaN       7.102246\n718             5.027940            NaN\n722                  NaN       4.895652\n708                  NaN      36.198939\n712            26.454950            NaN\n...                  ...            ...\n966                  NaN       2.500948\n969             3.367163            NaN\n968                  NaN       3.523477\n970                  NaN       4.473560\n973             5.179465            NaN\n\n[171 rows x 2 columns]\n211 patients reneged from nurse queue\n0 patients balked at the nurse queue\n86 patients reneged from the doctor queue\n0 patients balked at the doctor queue\nQueues over time\n            Time  Num in Q Nurse  Num in Q Doctor\n0       0.000000             0.0              0.0\n1    1440.550052             5.0              6.0\n2    1440.612476             5.0              5.0\n3    1440.960115             4.0              5.0\n4    1441.816771             3.0              5.0\n..           ...             ...              ...\n509  1914.375700             3.0              4.0\n510  1914.919764             4.0              4.0\n511  1915.435042             4.0              5.0\n512  1916.506179             4.0              4.0\n513  1918.688087             3.0              4.0\n\n[514 rows x 3 columns]\nTrial Results\n            Mean Q Time Nurse  Reneged Q Nurse  Balked Q Nurse  \\\nRun Number                                                       \n0                    11.05927              211               0   \n\n            Mean Q Time Doctor  Reneged Q Doctor  Balked Q Doctor  \nRun Number                                                         \n0                    10.581745                86                0  \nMean Q Nurse : 11.1 minutes\nMean Reneged Q Nurse : 211.0 patients\nMean Balked Q Nurse : 0.0 patients\nMean Q Doctor : 10.6 minutes\nMean Reneged Q Doctor : 86.0 patients\nMean Balked Q Doctor : 0.0 patients",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Reneging, balking and jockeying</span>"
    ]
  },
  {
    "objectID": "exercise_des_advanced.html",
    "href": "exercise_des_advanced.html",
    "title": "16  Exercise - Practicing Advanced Concepts",
    "section": "",
    "text": "In this section we’ve looked at how we can implement the following DES features in SimPy : - Simulation warm-up - Priority-based queuing - Resource unavailability - Use of the alternative distributions - Reneging - Balking - Entities choosing queues based on queue length\nDesign and build a DES model in SimPy that uses at least four of the features above.\nThe model can be of anything you like - you may choose to try to build the conceptual model you designed in the DES Design exercise at the end of section 1, or you might choose something completely different.",
    "crumbs": [
      "Part 3 - Extending Your Model",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Exercise - Practicing Advanced Concepts</span>"
    ]
  },
  {
    "objectID": "alternative_foss_simulation_libraries_software.html",
    "href": "alternative_foss_simulation_libraries_software.html",
    "title": "26  Alternative Simulation Libraries and Software",
    "section": "",
    "text": "26.1 Python Libraries",
    "crumbs": [
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Alternative Simulation Libraries and Software</span>"
    ]
  },
  {
    "objectID": "alternative_foss_simulation_libraries_software.html#python-libraries",
    "href": "alternative_foss_simulation_libraries_software.html#python-libraries",
    "title": "26  Alternative Simulation Libraries and Software",
    "section": "",
    "text": "26.1.1 ciw\n\n\n26.1.2",
    "crumbs": [
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Alternative Simulation Libraries and Software</span>"
    ]
  },
  {
    "objectID": "alternative_foss_simulation_libraries_software.html#r-libraries",
    "href": "alternative_foss_simulation_libraries_software.html#r-libraries",
    "title": "26  Alternative Simulation Libraries and Software",
    "section": "26.2 R Libraries",
    "text": "26.2 R Libraries\n\n26.2.1 simmeR",
    "crumbs": [
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Alternative Simulation Libraries and Software</span>"
    ]
  },
  {
    "objectID": "alternative_foss_simulation_libraries_software.html#gui-software",
    "href": "alternative_foss_simulation_libraries_software.html#gui-software",
    "title": "26  Alternative Simulation Libraries and Software",
    "section": "26.3 GUI Software",
    "text": "26.3 GUI Software\n\n26.3.1 JaamSim",
    "crumbs": [
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Alternative Simulation Libraries and Software</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "testing_large_numbers_scenarios.html",
    "href": "testing_large_numbers_scenarios.html",
    "title": "24  Testing Large Numbers of Scenarios",
    "section": "",
    "text": "Credit for this solution goes to Anna Laws and Mike Allen of the PenCHORD team.\n\nWhen working out the best possible configuration for a service, you may wish to try out a large number of scenarios.\nLet’s return to our branching model (with the reproducibility set via sim-tools as described in chapter Chapter 14).\nWe have a number of parameters available to us in this model:\n\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2\n    mean_n_consult_time = 6\n    mean_d_consult_time = 20\n    number_of_receptionists = 1\n    number_of_nurses = 1\n    number_of_doctors = 2\n    prob_seeing_doctor = 0.6\n    sim_duration = 600\n    number_of_runs = 2\n\nWe can first create a python dictionary of the possible parameter values.\n\n\n\n\n\n\nWarning\n\n\n\nBe careful - the total number of possible permutations starts to grow very rapidly when you have lots of parameters with multiple options for each!\n\n\n\nscenarios = {\n    'patient_inter': [4, 8, 12],\n    'mean_reception_time': [2, 3],\n    'mean_n_consult_time': [6, 10, 14],\n    'mean_d_consult_time': [10, 20],\n    'number_of_receptionists': [1, 2],\n    'number_of_nurses': [1, 2, 3],\n    'number_of_doctors': [2, 3, 4],\n    'prob_seeing_doctor': [0.6, 0.8]\n}\n\n\n\n\n\n\n\nTip\n\n\n\nMake sure to use exactly the same naming for the dictionary keys as is used in your g class.\nThis is because we will reset the values of the g class for each Trial programmatically.\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor a small number of possibilities, setting the variables by hand will be fine.\nFor a larger number, you may want to use the range function.\ne.g. to get 6, 10, 14 you would do\n\n[i for i in range(6, 15, 4)]\n\n[6, 10, 14]\n\n\n\n\nNext we use the itertools package to create every possible permutation of the scenarios.\n\nimport itertools\n\n# Generate all scenarios:\nall_scenarios_tuples = [\n    x for x in itertools.product(*scenarios.values())]\n# Convert list of tuples back to list of dictionaries:\nall_scenarios_dicts = [\n    dict(zip(scenarios.keys(), p)) for p in all_scenarios_tuples]\n\nLet’s take a look at the first 3 scenario dictionaries.\n\nall_scenarios_dicts[0:3]\n\n[{'patient_inter': 4,\n  'mean_reception_time': 2,\n  'mean_n_consult_time': 6,\n  'mean_d_consult_time': 10,\n  'number_of_receptionists': 1,\n  'number_of_nurses': 1,\n  'number_of_doctors': 2,\n  'prob_seeing_doctor': 0.6},\n {'patient_inter': 4,\n  'mean_reception_time': 2,\n  'mean_n_consult_time': 6,\n  'mean_d_consult_time': 10,\n  'number_of_receptionists': 1,\n  'number_of_nurses': 1,\n  'number_of_doctors': 2,\n  'prob_seeing_doctor': 0.8},\n {'patient_inter': 4,\n  'mean_reception_time': 2,\n  'mean_n_consult_time': 6,\n  'mean_d_consult_time': 10,\n  'number_of_receptionists': 1,\n  'number_of_nurses': 1,\n  'number_of_doctors': 3,\n  'prob_seeing_doctor': 0.6}]\n\n\nWe can see that all that has changed is the probability of seeing a doctor (the last key-value pair in each dictionary).\nHow many scenarios have we created?\n\nlen(all_scenarios_dicts)\n\n1296\n\n\nNow let’s update our g class. We’ll just modify it to add in a space to add a scenario name.\n\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2\n    mean_n_consult_time = 6\n    mean_d_consult_time = 20\n    number_of_receptionists = 1\n    number_of_nurses = 1\n    number_of_doctors = 2\n    prob_seeing_doctor = 0.6\n    sim_duration = 600\n    number_of_runs = 2\n    scenario_name = 0 ## New\n\nLet’s now create all of the scenario objects.\n\nresults = []\n\nfor index, scenario_to_run in enumerate(all_scenarios_dicts):\n    g.scenario_name = index\n\n    # Overwrite defaults from the passed dictionary\n\n    for key in scenario_to_run:\n        setattr(g, key, scenario_to_run[key])\n\n    my_trial = Trial()\n\n    # Call the run_trial method of our Trial object\n    results.append(my_trial.run_trial())\n\npd.concat(results).groupby(\"scenario\").mean().head(20)\n\n\n\n\n\n\n\n\n\naverage_inter_arrival\nnum_recep\nnum_nurses\nnum_doctors\naverage_reception_time\naverage_nurse_time\naverage_doctor_time\nprob_need_doctor\nArrivals\nMean Q Time Recep\nMean Q Time Nurse\nMean Q Time Doctor\n\n\nscenario\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.0\n4.0\n1.0\n1.0\n2.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n133.505891\n0.676479\n\n\n1.0\n4.0\n1.0\n1.0\n2.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n105.505442\n1.263302\n\n\n2.0\n4.0\n1.0\n1.0\n3.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n129.216818\n0.014072\n\n\n3.0\n4.0\n1.0\n1.0\n3.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n107.602443\n0.147246\n\n\n4.0\n4.0\n1.0\n1.0\n4.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n129.216818\n0.000000\n\n\n5.0\n4.0\n1.0\n1.0\n4.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n95.026033\n0.032971\n\n\n6.0\n4.0\n1.0\n2.0\n2.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n5.215946\n2.477255\n\n\n7.0\n4.0\n1.0\n2.0\n2.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n7.497472\n1.842969\n\n\n8.0\n4.0\n1.0\n2.0\n3.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n4.266968\n0.592513\n\n\n9.0\n4.0\n1.0\n2.0\n3.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n9.260408\n0.089449\n\n\n10.0\n4.0\n1.0\n2.0\n4.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n5.405535\n0.063385\n\n\n11.0\n4.0\n1.0\n2.0\n4.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n8.370422\n0.015803\n\n\n12.0\n4.0\n1.0\n3.0\n2.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n0.833707\n1.786491\n\n\n13.0\n4.0\n1.0\n3.0\n2.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n0.871273\n2.689420\n\n\n14.0\n4.0\n1.0\n3.0\n3.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n1.155603\n0.142991\n\n\n15.0\n4.0\n1.0\n3.0\n3.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n0.697876\n0.615490\n\n\n16.0\n4.0\n1.0\n3.0\n4.0\n2.0\n6.0\n10.0\n0.6\n144.0\n1.099929\n0.925463\n0.009072\n\n\n17.0\n4.0\n1.0\n3.0\n4.0\n2.0\n6.0\n10.0\n0.8\n144.0\n1.099929\n0.540083\n0.186033\n\n\n18.0\n4.0\n2.0\n1.0\n2.0\n2.0\n6.0\n10.0\n0.6\n144.0\n0.091630\n134.540431\n0.676479\n\n\n19.0\n4.0\n2.0\n1.0\n2.0\n2.0\n6.0\n10.0\n0.8\n144.0\n0.091630\n106.515917\n1.263302\n\n\n\n\n\n\n\n\nFinally the following will give you a nice dictionary of all of your scenarios.\n\npd.DataFrame.from_dict(all_scenarios_dicts)\n\n\n\n\n\n\n\n\n\npatient_inter\nmean_reception_time\nmean_n_consult_time\nmean_d_consult_time\nnumber_of_receptionists\nnumber_of_nurses\nnumber_of_doctors\nprob_seeing_doctor\n\n\n\n\n0\n4\n2\n6\n10\n1\n1\n2\n0.6\n\n\n1\n4\n2\n6\n10\n1\n1\n2\n0.8\n\n\n2\n4\n2\n6\n10\n1\n1\n3\n0.6\n\n\n3\n4\n2\n6\n10\n1\n1\n3\n0.8\n\n\n4\n4\n2\n6\n10\n1\n1\n4\n0.6\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1291\n12\n3\n14\n20\n2\n3\n2\n0.8\n\n\n1292\n12\n3\n14\n20\n2\n3\n3\n0.6\n\n\n1293\n12\n3\n14\n20\n2\n3\n3\n0.8\n\n\n1294\n12\n3\n14\n20\n2\n3\n4\n0.6\n\n\n1295\n12\n3\n14\n20\n2\n3\n4\n0.8\n\n\n\n\n1296 rows × 8 columns",
    "crumbs": [
      "Part 4 - Advanced Concepts",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Testing Large Numbers of Scenarios</span>"
    ]
  }
]