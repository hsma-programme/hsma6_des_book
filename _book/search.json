[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HSMA - the little book of DES",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html",
    "href": "intro_to_des_concepts.html",
    "title": "2  Introduction to DES Concepts",
    "section": "",
    "text": "2.1 Why use DES?\nDiscrete event simulation allows you to\nThis can allow you to optimize a system, leading to better balance and better flow, which can in turn lead to - A safer environment - Less stress for staff - Improved patient experience - Meeting targets",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html#why-use-des",
    "href": "intro_to_des_concepts.html#why-use-des",
    "title": "2  Introduction to DES Concepts",
    "section": "",
    "text": "Test changes in a risk-free, low-cost way\nExplore the impact of changes in demand\nSee whether a system can cope on bad days as well as good days\nPredict how long it will take to clear an existing backlog",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html#an-example",
    "href": "intro_to_des_concepts.html#an-example",
    "title": "2  Introduction to DES Concepts",
    "section": "2.2 An example",
    "text": "2.2 An example\nImagine being able to create a model of an emergency department.\nIn this model, you can change all sorts of things - how many doctors, nurses and receptionists there are at each step - how long it takes for people to be seen - how many people go into the trauma pathway versus the non-trauma pathway\nThen sprinkle in a dose of randomness - because in real life, you’re not going to have each appointment taking the exact same amount of time, or people arriving exactly every five minutes - and then you can start to explore just how well a system will perform, what changes might have the most impact, and what configuration is likely to perform best. Then you can run it 1000 times with slightly different random days to see how well it performs on both good days and bad.\nYou can polish it all off by visualising the individual entities moving through the system so people with little understanding of discrete event simulation can get a sense of what’s going on, and you can give them access to all of the controls - the number of nurses and doctors, the average consultation length, and more - so that they can explore the impact of theser changes themselves.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html#key-des-terminology",
    "href": "intro_to_des_concepts.html#key-des-terminology",
    "title": "2  Introduction to DES Concepts",
    "section": "2.3 Key DES Terminology",
    "text": "2.3 Key DES Terminology\n\nEntities are the things that are flowing through the sequential processes in the model (eg patients, test results, callers on a phone)\nGenerators are the way in which entities enter the model and come into being (eg arriving at ED by ambulance, self-presenting, referral from GP)\nInter-Arrival Times specify the time between entities being generated in the generators (ie the time between arrivals into the modelled system)\nActivities (sometimes referred to as Servers) are the bits of process that the entities are queuing up for (eg triaged, seen at reception, speak to doctor etc)\nActivity Time represents the amount of time it takes for an activity to happen to an entity - this is normally stochastic (random) and drawn from a distribution for each entity (eg time spent with nurse, time to be treated etc)\nResources are the “stuff” and / or “staff” required for an activity to happen to an entity (eg nurse to triage, bed for patient, consultation room for GP to see patient etc, X-Ray machine and Radiographer to be free for X-Ray etc). Important - resources may be shared between activities (eg the same nurse may be required to run multiple activities in our model, or even things we haven’t explicitly modelled)\nQueues hold entities that are waiting for an activity. Entities wait in a queue until the activity has both the capacity and all required resources.\nSinks are how entities leave the model (the bit of system we’re modelling)\n\n\n2.3.1 Entities\nEach entity may have certain “attributes” that it “carries with them” to help determine its journey through the modelled system. For example :\n\nwhether it goes down path A or B\nhow long it spends in an activity\nits priority in a queue for an activity\n\nThere may also be more than one type of entity in a model at the same time. For example, patients in a clinic, their test results, and phone calls into the clinic are all entities that we may want to capture when modelling the clinic.\n\n\n\n2.3.2 Generators and Inter-Arrival\nA generator creates new entities to bring into the system. The rate at which new entities are generated is determined by an inter-arrival time.\nThe inter-arrival time determines the time between one entity being generated, and the next one being generated.\nInter-arrival times may be fixed, but are typically sampled (drawn) stochastically (randomly) from a distribution to capture variability (even if the variability is small).\nAn Exponential Distribution is often used to sample inter-arrival times. More than one distribution may be used for the same generator (e.g. for different times of the day, day of week etc). You may also (often) have more than one generator in a system.\n\n\n\n2.3.3 Queues\nEach activity in a Discrete Event Simulation has an associated queue. The queue holds entities whilst they wait for the activity to become available for them.\nEach queue has a queuing policy. This determines the order in which entities are released from the queue into the activity. The two most common queuing policies are:\n\nFirst In First Out (FIFO) : entities are seen in the order they arrive. This is the default.\nPriority-based : entities are seen according to some priority attribute. Ties often resolved using FIFO\n\n\n\n\n2.3.4 Activities and Activity Times\nEach activity in a DES describes a process – this may be a simple atomic task, or a set of tasks bundled together. For an activity to take place, it needs : - An entity (drawn from the queue) - The required type and number of resource to be available\nOnce the above conditions have been met, the activity begins. The entity, and the resource(s) are then locked in place for an amount of time – the Activity Time. The resource(s) cannot be used elsewhere until the activity time has passed.\nActivity times may be fixed, but are typically sampled stochastically from a distribution.\n\n\n\n\n\n\n\nTip\n\n\n\nThe common distribution for process times is the Log Normal distributions. However, Exponential Distributions can be a good starting point, as it’s easy to change the “mean” when playing around with things. You can then change to something like a Log Normal once you (and the stakeholders) are happy\n\n\n\n\n2.3.5 Resources\nResources are needed to undertake activities. An activity may require just a single resource, more than one resource of the same type, or multiple resources of different types.\n\n\n\n\n\n\nTip\n\n\n\nAn activity may not require a resource at all, but think carefully to ensure that it really is either “resourceless” or there is no constraint on the resource (and so doesn’t need to be modelled).\nResources can include - “staff” (e.g. doctors, nurses, officers etc) - “stuff” (beds, test equipment, detention cell etc)\n\n\nResources can (and often are) shared across a system, so may be required for more than one activity. Therefore, a resource drain in one part of the system can affect another.\nAll required resources are needed for an activity to take place.\nIn some activities, having optional additional resource may speed up the activity (though rarely linearly).\n\n\n\n2.3.6 Sinks\nSinks are how entities leave the system, or part of the system, being modelled. Sinks might include : - an entity physically leaving a system (e.g. discharge from hospital) - an entity no longer existing (e.g. death, use of sample, end of telephone call) - an entity no longer needing to access activities that we’re interested in (e.g. they leave the bit of the system that we’re modelling)\nThe most important thing to remember about a sink is that it doesn’t necessarily represent an entity leaving the system entirely.\nFor example, the scope of your model may only cover the triage aspect of an Emergency Department. Therefore, a valid sink might be placed after their triage - they’ve left the scope of our model\n\n\n\n2.3.7 Branching Paths\nReal world systems (and the models of those systems) are rarely linear. Often, different things will happen to different entities. In a Discrete Event Simulation, this means different entities flowing to different activities, or different sinks.\nWe might differentiate based on : - an attribute of the patient (e.g. patients with a higher priority value flow through a different set of activities) - probability (e.g. we know that approx 60% of these patients end up being admitted, so we’ll randomly select for them to be admitted 60% of the time) - time (e.g. after a certain time of day, entities flow through a different set of activities)\n\n\n\n2.3.8 Outputs\nAs with any type of model, it’s important to think about what outputs you need your DES model to generate to answer your modelling questions. As a DES model is used to model queuing and resourcing problems, typical DES model outputs include average, min, max, xth percentile of :\n\ntime entities are in system\nqueue length and duration for queues of interest\nrate of resource utilisation (ie % of time a resource is in use for activities in the model)\nprobability of exceeding a defined queue length / queue time / resource utilisation threshold (e.g. 4 hour wait in ED, overcrowding thresholds)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_des_concepts.html#exercise-1",
    "href": "intro_to_des_concepts.html#exercise-1",
    "title": "2  Introduction to DES Concepts",
    "section": "2.4 Exercise 1",
    "text": "2.4 Exercise 1\nDesign a Discrete Event Simulation for a system of your choosing.\nThink about some different possibilities (and these don’t have to be health-related, they can be anything! A restaurant? Airport? Customer service line?).\nYou should then draw up a design for the model. This should include : - The “what if?” question(s) you would use the model to answer - A process map of the system you are looking to model - A conceptual model for the proposed Discrete Event Simulation (which may not include everything in the process map). Identify the types of entities, generators, activities, queues, resources and sinks. Describe what each of your inter-arrival times and activity times represent, and from where you might draw the data. Remember the training from session 1B - consider scope, level of detail etc when designing your model. What do you need to model to answer your question? How can you simplify?\nThe website draw.io (also known as diagrams.net) is a great free resource for creating process maps.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to DES Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_simpy.html",
    "href": "intro_to_simpy.html",
    "title": "3  An Introduction to SimPy",
    "section": "",
    "text": "3.1 Simulation Time\nSimPy simulations run in time units*. These units of time can represent any real world amount of time we like as long as we are consistent within the same model.\nOur time units should represent the lowest level of real world time that we need to represent in the model. In models of pathways where people arrive for a service, this will likely be minutes (seconds is too much, and hours is probably not enough, unless all the processes are slow). But we may have pathways where we measure time in days or weeks (e.g. referral pathways).\nFor example, in an ED model, our time units may represent minutes. So we specify everything in minutes - inter-arrival times, activity times etc.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>An Introduction to SimPy</span>"
    ]
  },
  {
    "objectID": "intro_to_simpy.html#simulation-time",
    "href": "intro_to_simpy.html#simulation-time",
    "title": "3  An Introduction to SimPy",
    "section": "",
    "text": "Strictly speaking, SimPy doesn’t run in time units ticking away one by one. Instead, it schedules events jumps to the next event. But don’t worry about that for your purposes. Just know that, because of this, you will see current simulation time as floating point numbers (eg the current time unit could be 3.6 etc).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>An Introduction to SimPy</span>"
    ]
  },
  {
    "objectID": "intro_to_simpy.html#runs-and-trials",
    "href": "intro_to_simpy.html#runs-and-trials",
    "title": "3  An Introduction to SimPy",
    "section": "3.2 Runs and Trials",
    "text": "3.2 Runs and Trials\nIn a stochastic model, it is important that we do not just run a model once if we’re looking to draw insights from our results. This is because every run of the simulation will have different random samples for inter-arrival times, activity times etc.\nWhat if you had a run with unusually long activity times sampled (a run of “bad luck”)? Or unusually long inter-arrival times (a run of “good luck”)?\nWe need to run a stochastic simulation many times and take summary statistics over the results from each run to get more representative results from the model.\nA single run of a model for a simulated period of time is known as a run. A batch of multiple runs with the same parameter values is known as a trial.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>An Introduction to SimPy</span>"
    ]
  },
  {
    "objectID": "intro_to_simpy.html#generator-functions",
    "href": "intro_to_simpy.html#generator-functions",
    "title": "3  An Introduction to SimPy",
    "section": "3.3 Generator Functions",
    "text": "3.3 Generator Functions\nSimPy is built around a special type of function in Python known as a Generator Function.\nSo let’s have a look at what we mean by a Generator Function.\nConventional functions in Python are called, then run with some (optional) inputs, and then finish (usually by returning some output). When we call the function again, it runs again, from scratch.\nGenerator functions remember where they were and what they did when control is passed back (they retain their local state), so that they can continue where they left off, and can be used as powerful iterators (for and while loops are other examples of iterators).\nThis is very useful where we want state to be maintained, so we can remember how long until we generate the next entity, or where an entity is in a pathway…\nLet’s look at a very simple example of a generator function to see how they work.\n\nIn SimPy, we use Generator Functions in two different places :\nTo model the DES generators (arrival points) To model the individual journey of each entity\nLet’s imagine we are modelling patients in a patient pathway.\nFor 1, the generator function basically creates a patient, sets them off on their pathway, then freezes in place for an amount of time representing the inter-arrival time to the next patient. Then it does it all over again.\nFor 2, the generator function requests a resource and freezes until that resource is available (the queue). When the resource is available it freezes in place for an amount of time with it (the activity). It will then either move on to the next activity (and request the resource for it, as above) or end if there are no further activities.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>An Introduction to SimPy</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html",
    "href": "recommended_structure_classes_for_des_models.html",
    "title": "4  The Recommended Structure for DES Models",
    "section": "",
    "text": "4.1 Class breakdown\nLet’s look at the purpose and recommended structure of each class in a bit more detail.\nHere, the example code given relates to a customer support helpline. Customers call a helpline, wait on hold until a customer support agent is ready to speak to them, speak to the agent for a period of time, and then the call ends and the agent connects to the next person who is waiting on hold. If there is no-one on hold at the time, the agent will get a break until someone else arrives!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html#class-breakdown",
    "href": "recommended_structure_classes_for_des_models.html#class-breakdown",
    "title": "4  The Recommended Structure for DES Models",
    "section": "",
    "text": "4.1.1 g Class\nThe g Class stores our global parameter values for the model so we can easily change aspects of the model to test scenarios. This includes :\n\nValues to define inter-arrival time distributions (eg mean, standard deviation etc)\nValues to define activity time distributions (eg mean, standard deviation etc)\nNumber of each resource\nDuration of simulation runs\nNumber of runs in a trial\n\nWe do not create an instance of g class. Instead, we refer to it directly when we need to access something in it.\n\n\n\n\n\n\nExample g class\n\n\n\n\nclass g:\n    time_units_between_customer_arrivals = 5\n    mean_customer_service_time = 6\n    number_of_customer_support_agents = 1\n    sim_duration = 1440\n    number_of_runs = 10",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html#entity-class",
    "href": "recommended_structure_classes_for_des_models.html#entity-class",
    "title": "4  The Recommended Structure for DES Models",
    "section": "4.2 Entity class",
    "text": "4.2 Entity class\nThe entity class represents our entity in the model - which, for healthcare models, will often be patients.\nWe can store attributes here that entities carry with them that we may want to access (think of a person carrying a clipboard with them with information on it).\nIn a simple model, an entity may just carry their ID and how long they spent queuing for a resource (once known). But more advanced models could store things like their condition, their priority, probability of going down path x, etc.\n\n\n\n\n\n\nExample entity class\n\n\n\n\nclass Customer:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.queue_time_customer_support_agent = 0",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html#model-class",
    "href": "recommended_structure_classes_for_des_models.html#model-class",
    "title": "4  The Recommended Structure for DES Models",
    "section": "4.3 Model Class",
    "text": "4.3 Model Class\nThe Model Class represents the system we are modelling - this might be a clinic, for example. As such, there’s a lot more to unpack here, so let’s take this bit by bit.\nFirst, we’ll look at the constructor for our model.\nThe constructor will set up - a SimPy Environment (basically where everything lives) - an entity counter (which we’ll use to give entities - such as patients - a simple ID) - the resources we need (for example, our nurses) - a DataFrame to store per-entity results in a single run of the model - attributes to store things like how long the entities queued for each activity\nWhat the constructor sets up doesn’t have to be limited to these things - anything relating to the system as a whole that makes sense to store here could be included.\n\n4.3.1 DES generator - arrivals of entities to the system\nWithin the Model Class we have a generator function that will represent our DES generator for entities arriving into our process.\nHere’s basically how it works:\nKEEP REPEATING THE FOLLOWING FOREVER (until the simulation stops running) : 1. Increment the counter to get ID for next entity 2. Create a new entity and give them that ID 3. Start up an instance of the generator function for their journey through the process and chuck them in it 4. Sample the time until the next entity arrives 5. FREEZE this function until that time elapses 6. Return to 1\n\n\n4.3.2 DES Generator - the entity journey\nNow, let’s look at the big one. The other generator function - the one that represents an entity’s journey through the system (this is the one we lobbed the new entities generated by the previous generator).\nHere’s how this works : 1. Record time started queuing for first activity 2. Request resource for first activity 3. Wait until resource is free 4. Once resource is free, grab the resource and keep hold of the resource until finished with them. Record time finished queuing and calculate queue time. 5. Sample how long will spend in this activity. 6. FREEZE this instance of the function until that time elapses (freezing the resource with it, so it’s not available to anyone else) 7. If there’s another activity, do the same again for that one. If not, end (and therefore entity leaves the model).\n\n\n4.3.3 Running the model\nFinally, we need a run method in our Model class. Basically, the run method will : - Start up our DES generators (our arrival points) - we only have one here. - Tell the simulation to run for the duration specified in g Class. - Call the calculate run results method in the previous slide. - Print out the run number with the patient-level results from this run.\n\n\n\n\n\n\nFull Example model class\n\n\n\n\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a customer counter (which we'll use as a customer ID)\n        self.customer_counter = 0\n\n        # Create a SimPy resource to represent a customer support agent, that will live in the\n        # environment created above.  The number of this resource we have is\n        # specified by the capacity, and we grab this value from our g class.\n        self.customer_support_agent = simpy.Resource(self.env, capacity=number_of_customer_support_agents)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the customer ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Customer ID\"] = [1]\n        self.results_df[\"Queue Time\"] = [0.0]\n        self.results_df[\"Time with Customer Support Agent\"] = [0.0]\n        self.results_df.set_index(\"Customer ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing time for the support agents\n        # across this run of the model\n        self.mean_queue_time_support_agent = 0\n\n    # A generator function that represents the DES generator for customer\n    # arrivals\n    def generator_customer_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the customer counter by 1 (this means our first customer\n            # will have an ID of 1)\n            self.customer_counter += 1\n\n            # Create a new customer - an instance of the customer Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # customer - so here we pass the customer counter to use as the ID.\n            c = Customer(self.customer_counter)\n\n            # Tell SimPy to start up the use_customer_service_helpline generator function with\n            # this customer (the generator function that will model the\n            # customer's journey through the system)\n            self.env.process(self.use_customer_service_helpline (c))\n\n            # Randomly sample the time to the next customer arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter_arrival_time = random.expovariate(1.0 / g.time_units_between_customer_arrivals)\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter_arrival_time)\n\n    # A generator function that represents the pathway for a customer calling our helpline\n    # Here the pathway is extremely simple - a customer\n    # arrives in the call system, waits to be connected to a customer support agent,\n    # spends a varying amount of time being helped by the agent, and then leaves,\n    # meaning the agent is free to help the next person.\n    # The customer object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def use_customer_service_helpline(self, customer):\n        # Record the time the patient started queuing for a nurse\n        start_q_customer_support_agent = self.env.now\n\n        # This code says request a customer support agent resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.customer_support_agent.request() as req:\n            # Freeze the function until the request for a customer support agent can be met.\n            # The customer is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a customer support agent has\n            # been met.  We now have the customer support agent, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_customer_support_agent = self.env.now\n\n            # Calculate the time this patient was queuing for the customer support agent, and\n            # record it in the customer's attribute for this.\n            customer.queue_time_customer_support_agent = end_q_customer_support_agent - start_q_customer_support_agent\n\n            # Now we'll randomly sample the time this customer with the customer support agent.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_customer_support_agent_activity_time = random.expovariate(1.0 /\n                                                        g.mean_customer_service_time)\n\n            # Here we'll store the queuing time for the customer support agent and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this customer.\n            #\n            # In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            #\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[customer.id, \"Queue Time\"] = (\n                customer.queue_time_customer_support_agent)\n            self.results_df.at[customer.id, \"Time with Customer Support Agent\"] = (\n                sampled_customer_support_agent_activity_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the customer support\n            # agent.\n            yield self.env.timeout(sampled_customer_support_agent_activity_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times for the nurse across patients in\n        # this run of the model.\n        self.mean_queue_time_support_agent = self.results_df[\"Time with Customer Support Agent\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new customers.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_customer_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the customer-level results from this run of\n        # the model\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "recommended_structure_classes_for_des_models.html#trial-class",
    "href": "recommended_structure_classes_for_des_models.html#trial-class",
    "title": "4  The Recommended Structure for DES Models",
    "section": "4.4 Trial class",
    "text": "4.4 Trial class\nOur final class is the Trial class. This represents a batch of simulation runs, and will contain methods to run a batch of runs, as well as store, record and display results from the trial.\n\n\n\n\n\n\nExample trial class\n\n\n\n\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run (just the mean queuing time for the nurse here)\n    # against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Queue Time Customer Supoprt Agent\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            self.df_trial_results.loc[run] = [my_model.mean_queue_time_support_agent]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n\n\n\nWe can, of course, then take the means over the runs in the trial to get the average predicted queuing time etc. - and we should probably do that in a separate method in the Trial class.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>The Recommended Structure for DES Models</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html",
    "href": "an_example_simpy_model.html",
    "title": "5  An example simpy model",
    "section": "",
    "text": "5.1 Import statements\nFirst we need our import statements. The libraries you import will vary depending on your model and what you need, but these three are likely going to always be in there (the first must be!)\nimport simpy\nimport random\nimport pandas as pd",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#import-statements",
    "href": "an_example_simpy_model.html#import-statements",
    "title": "5  An example simpy model",
    "section": "",
    "text": "Tip\n\n\n\nrandom gives us access to stochastic sampling from probability distributions",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#g-class",
    "href": "an_example_simpy_model.html#g-class",
    "title": "5  An example simpy model",
    "section": "5.2 g Class",
    "text": "5.2 g Class\nRemember - the g Class stores our global parameter values for the model so we can easily change aspects of the model to test scenarios.\n\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_n_consult_time = 6\n    number_of_nurses = 1\n    sim_duration = 120\n    number_of_runs = 5",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#patient-entity-class",
    "href": "an_example_simpy_model.html#patient-entity-class",
    "title": "5  An example simpy model",
    "section": "5.3 Patient (entity) Class",
    "text": "5.3 Patient (entity) Class\n\n# Class representing patients coming in to the clinic.  Here, patients have\n# two attributes that they carry with them - their ID, and the amount of time\n# they spent queuing for the nurse.  The ID is passed in when a new patient is\n# created.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#model-class",
    "href": "an_example_simpy_model.html#model-class",
    "title": "5  An example simpy model",
    "section": "5.4 Model Class",
    "text": "5.4 Model Class\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create a SimPy resource to represent a nurse, that will live in the\n        # environment created above.  The number of this resource we have is\n        # specified by the capacity, and we grab this value from our g class.\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing time for the nurse\n        # across this run of the model\n        self.mean_q_time_nurse = 0\n\n    # A generator function that represents the DES generator for patient\n    # arrivals\n    def generator_patient_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the patient counter by 1 (this means our first patient\n            # will have an ID of 1)\n            self.patient_counter += 1\n\n            # Create a new patient - an instance of the Patient Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # patient - so here we pass the patient counter to use as the ID.\n            p = Patient(self.patient_counter)\n\n            # Tell SimPy to start up the attend_clinic generator function with\n            # this patient (the generator function that will model the\n            # patient's journey through the system)\n            self.env.process(self.attend_clinic(p))\n\n            # Randomly sample the time to the next patient arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter)\n\n    # A generator function that represents the pathway for a patient going\n    # through the clinic.  Here the pathway is extremely simple - a patient\n    # arrives, waits to see a nurse, and then leaves.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times for the nurse across patients in\n        # this run of the model.\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new patients.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the patient-level results from this run of\n        # the model\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model.html#trial-class",
    "href": "an_example_simpy_model.html#trial-class",
    "title": "5  An example simpy model",
    "section": "5.5 Trial Class",
    "text": "5.5 Trial Class\n\n# Class representing a Trial for our simulation - a batch of simulation runs.\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run (just the mean queuing time for the nurse here)\n    # against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n\nNow we just need to run the trial and print out the results!\n\n# Create an instance of the Trial class\nmy_trial = Trial()\n\n# Call the run_trial method of our Trial object\nmy_trial.run_trial()\n\nRun Number 0\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         3.522049\n2               0.000000         0.369700\n3               0.000000         9.934752\n4               8.079970         1.194511\n5               0.000000         7.856494\n6               1.132699         1.846812\n7               0.000000         3.871053\n8               2.078643         7.724356\n9               9.203499         6.676876\n10             15.821498         1.115493\n11             14.286094         1.921513\n12             15.046155         2.864463\n13             12.836581         5.610489\n14             13.772449        16.757532\n15             25.743420         0.789155\n16             10.588303         0.456905\n17              9.188255         1.692422\n18              5.839023         6.150361\n19              0.000000        25.491599\nRun Number 1\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         5.837886\n2               2.083945         5.889231\n3               5.252960         1.778159\n4               3.531666         1.402943\n5               4.670816         0.351425\n6               3.403918         1.186916\n7               0.000000         9.773879\n8               5.798816         0.424235\n9               0.000000         3.993413\n10              3.765634         2.104645\n11              0.000000        10.161059\n12              6.925635         3.416904\n13              0.000000         2.248548\n14              0.000000         8.281190\n15              5.735131         4.086693\n16              2.381091        10.198442\n17              5.849646        19.043974\n18             24.508272         1.724140\n19             17.460267        16.197297\nRun Number 2\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         2.896818\n2               2.750760         1.670745\n3               1.958658        14.230308\n4              10.968809         3.202796\n5              14.107221         0.121267\n6               9.229842         4.449167\n7               9.827281         1.173630\n8               3.711641         4.022926\n9               6.464601         1.900995\n10              0.000000         5.688772\n11              0.518009         2.506679\n12              0.000000        12.762471\n13              9.642294        10.055970\n14             16.839771         1.386328\n15             17.344188         3.242441\n16             16.308796         1.252735\n17             15.164284         5.888761\n18             18.332980         1.874242\n19             19.327571         2.554799\n20             19.009671         2.237613\n21             21.195137        10.436945\n22             29.372097        17.875474\n23             30.220305         0.359229\n24             26.008446        22.448150\nRun Number 3\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         1.122131\n2               0.340366         5.933760\n3               0.741235         8.139490\n4               8.767195         0.406757\n5               0.891088         4.116176\n6               0.000000         3.658152\n7               0.754963         3.259294\n8               0.000000         4.081714\n9               0.000000         4.609660\n10              0.000000         3.623553\n11              0.000000         0.523397\n12              0.000000         8.098580\n13              6.546318        10.745397\n14             16.644607         2.204082\n15             17.355899         2.777829\n16             11.648444        16.706007\n17             20.942836         6.643779\nRun Number 4\n            Q Time Nurse  Time with Nurse\nPatient ID                               \n1               0.000000         1.145209\n2               0.000000        18.510047\n3              13.709525         2.099158\n4               9.154359        21.539099\n5              27.969203         4.921536\n6              30.009622         6.866639\n7              24.042971         9.218617\n8              29.229153         6.599540\n9              34.083524         1.075293\n10             32.233391        13.917209\n11             43.479099        12.526639\n12             49.106895         0.200603\n13             44.300105        38.658488\nTrial Results\n            Mean Q Time Nurse\nRun Number                   \n0                    7.558768\n1                    4.808831\n2                   12.429265\n3                    4.978409\n4                   25.947527",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>An example simpy model</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model_multiple_steps.html",
    "href": "an_example_simpy_model_multiple_steps.html",
    "title": "6  An example simpy model - multiple activities",
    "section": "",
    "text": "Very often there will be more than one activity in a model.\nWhat if instead of this model\n\nWe wanted something more like this?\n\nIf we want patients to flow from one activity to another, we just write another one after the first one in the pathway generator function. That (aside from adding in any extra resources and results capture elsewhere) is it.\n\n\n\n\n\n\nWarning\n\n\n\nJust make sure you write the next bit outside of the with statement. Otherwise you’ll drag across the resource from the previous activity too…\nOf course, in some cases, you might want that - perhaps if you’re modelling a bed as a resource, for example, but then want to model using an additional resource like a nurse for some parts of the process.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThroughout the code, anything new that’s been added will be followed by the comment ##NEW - so look out for that in the following code chunks.\n\n\nFirst, lets add some additional parameters to our g class.\n\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2 ##NEW\n    mean_n_consult_time = 6\n    number_of_receptionists = 1 ##NEW\n    number_of_nurses = 1\n    sim_duration = 120\n    number_of_runs = 5\n\nNext we’ll add an additional attribute - think of it as an extra box on their clipboard that they need to fill in - to record how long they are queuing for the receptionist.\n\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_recep = 0 ##NEW\n        self.q_time_nurse = 0\n\nNow we move to our model class. Let’s start by looking at the init method - the list of things that are set up when we create an instance of our model class.\nFirst, we have added in a new type of resource - a receptionist, pulling in the number of receptionist to create from our g class.\nWe’ve then added two additional fields to our results dataframe - how long each patient queues for a receptionist, and how long each patient spends with the receptionist.\nFinally, we add in an attribute that we will use to store the mean average queuing time for receptionists across the whole model.\n\ndef __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        ) ##NEW\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0] ##NEW\n        self.results_df[\"Time with Recep\"] = [0.0] ##NEW\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0 ##NEW\n        self.mean_q_time_nurse = 0\n\nOur generator_patient_arrivals method remains unchanged as nothing has been tweaked about how patients turn up to the system.\nOur attend_clinic method is where we make the actual change to the process the patient goes through.\nNote that we have a new line with an indended section inside it.\n\nwith self.receptionist.request() as req:\n\nEverything at one level of indentation within this now relates to the use of the receptionist resource.\n\n # A generator function that represents the pathway for a patient going\n    # through the clinic.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        ##NEW - added reception activity\n        start_q_recep = self.env.now\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_recep = self.env.now\n\n            patient.q_time_recep = end_q_recep - start_q_recep\n\n            sampled_recep_act_time = random.expovariate(\n                1.0 / g.mean_reception_time\n            )\n\n            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n                 patient.q_time_recep\n            )\n            self.results_df.at[patient.id, \"Time with Recep\"] = (\n                 sampled_recep_act_time\n            )\n\n            yield self.env.timeout(sampled_recep_act_time)\n\n        # Here's where the patient finishes with the receptionist, and starts\n        # queuing for the nurse\n\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\nBelow is the full code for our updated model. Look out for the lines that end with #NEW to find the bits we’ve added.\n\nimport simpy\nimport random\nimport pandas as pd\n\n# Class to store global parameter values.  We don't create an instance of this\n# class - we just refer to the class blueprint itself to access the numbers\n# inside.\nclass g:\n    patient_inter = 5\n    mean_reception_time = 2 ##NEW\n    mean_n_consult_time = 6\n    number_of_receptionists = 1 ##NEW\n    number_of_nurses = 1\n    sim_duration = 120\n    number_of_runs = 5\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_recep = 0 ##NEW\n        self.q_time_nurse = 0\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor to set up the model for a run.  We pass in a run number when\n    # we create a new model.\n    def __init__(self, run_number):\n        # Create a SimPy environment in which everything will live\n        self.env = simpy.Environment()\n\n        # Create a patient counter (which we'll use as a patient ID)\n        self.patient_counter = 0\n\n        # Create our resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        ) ##NEW\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Store the passed in run number\n        self.run_number = run_number\n\n        # Create a new Pandas DataFrame that will store some results against\n        # the patient ID (which we'll use as the index).\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Recep\"] = [0.0] ##NEW\n        self.results_df[\"Time with Recep\"] = [0.0] ##NEW\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df[\"Time with Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Create an attribute to store the mean queuing times across this run of\n        # the model\n        self.mean_q_time_recep = 0 ##NEW\n        self.mean_q_time_nurse = 0\n\n    # A generator function that represents the DES generator for patient\n    # arrivals\n    def generator_patient_arrivals(self):\n        # We use an infinite loop here to keep doing this indefinitely whilst\n        # the simulation runs\n        while True:\n            # Increment the patient counter by 1 (this means our first patient\n            # will have an ID of 1)\n            self.patient_counter += 1\n\n            # Create a new patient - an instance of the Patient Class we\n            # defined above.  Remember, we pass in the ID when creating a\n            # patient - so here we pass the patient counter to use as the ID.\n            p = Patient(self.patient_counter)\n\n            # Tell SimPy to start up the attend_clinic generator function with\n            # this patient (the generator function that will model the\n            # patient's journey through the system)\n            self.env.process(self.attend_clinic(p))\n\n            # Randomly sample the time to the next patient arriving.  Here, we\n            # sample from an exponential distribution (common for inter-arrival\n            # times), and pass in a lambda value of 1 / mean.  The mean\n            # inter-arrival time is stored in the g class.\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            # Freeze this instance of this function in place until the\n            # inter-arrival time we sampled above has elapsed.  Note - time in\n            # SimPy progresses in \"Time Units\", which can represent anything\n            # you like (just make sure you're consistent within the model)\n            yield self.env.timeout(sampled_inter)\n\n    # A generator function that represents the pathway for a patient going\n    # through the clinic.\n    # The patient object is passed in to the generator function so we can\n    # extract information from / record information to it\n    def attend_clinic(self, patient):\n        ##NEW - added reception activity\n        start_q_recep = self.env.now\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_recep = self.env.now\n\n            patient.q_time_recep = end_q_recep - start_q_recep\n\n            sampled_recep_act_time = random.expovariate(\n                1.0 / g.mean_reception_time\n            )\n\n            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n                 patient.q_time_recep\n            )\n            self.results_df.at[patient.id, \"Time with Recep\"] = (\n                 sampled_recep_act_time\n            )\n\n            yield self.env.timeout(sampled_recep_act_time)\n\n        # Here's where the patient finishes with the receptionist, and starts\n        # queuing for the nurse\n\n        # Record the time the patient started queuing for a nurse\n        start_q_nurse = self.env.now\n\n        # This code says request a nurse resource, and do all of the following\n        # block of code with that nurse resource held in place (and therefore\n        # not usable by another patient)\n        with self.nurse.request() as req:\n            # Freeze the function until the request for a nurse can be met.\n            # The patient is currently queuing.\n            yield req\n\n            # When we get to this bit of code, control has been passed back to\n            # the generator function, and therefore the request for a nurse has\n            # been met.  We now have the nurse, and have stopped queuing, so we\n            # can record the current time as the time we finished queuing.\n            end_q_nurse = self.env.now\n\n            # Calculate the time this patient was queuing for the nurse, and\n            # record it in the patient's attribute for this.\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            # Now we'll randomly sample the time this patient with the nurse.\n            # Here, we use an Exponential distribution for simplicity, but you\n            # would typically use a Log Normal distribution for a real model\n            # (we'll come back to that).  As with sampling the inter-arrival\n            # times, we grab the mean from the g class, and pass in 1 / mean\n            # as the lambda value.\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            # Here we'll store the queuing time for the nurse and the sampled\n            # time to spend with the nurse in the results DataFrame against the\n            # ID for this patient.  In real world models, you may not want to\n            # bother storing the sampled activity times - but as this is a\n            # simple model, we'll do it here.\n            # We use a handy property of pandas called .at, which works a bit\n            # like .loc.  .at allows us to access (and therefore change) a\n            # particular cell in our DataFrame by providing the row and column.\n            # Here, we specify the row as the patient ID (the index), and the\n            # column for the value we want to update for that patient.\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse)\n            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n                sampled_nurse_act_time)\n\n            # Freeze this function in place for the activity time we sampled\n            # above.  This is the patient spending time with the nurse.\n            yield self.env.timeout(sampled_nurse_act_time)\n\n            # When the time above elapses, the generator function will return\n            # here.  As there's nothing more that we've written, the function\n            # will simply end.  This is a sink.  We could choose to add\n            # something here if we wanted to record something - e.g. a counter\n            # for number of patients that left, recording something about the\n            # patients that left at a particular sink etc.\n\n    # This method calculates results over a single run.  Here we just calculate\n    # a mean, but in real world models you'd probably want to calculate more.\n    def calculate_run_results(self):\n        # Take the mean of the queuing times across patients in this run of the\n        # model.\n        self.mean_q_time_recep = self.results_df[\"Q Time Recep\"].mean() ##NEW\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # The run method starts up the DES entity generators, runs the simulation,\n    # and in turns calls anything we need to generate results for the run\n    def run(self):\n        # Start up our DES entity generators that create new patients.  We've\n        # only got one in this model, but we'd need to do this for each one if\n        # we had multiple generators.\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run the model for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Now the simulation run has finished, call the method that calculates\n        # run results\n        self.calculate_run_results()\n\n        # Print the run number with the patient-level results from this run of\n        # the model\n        print (f\"Run Number {self.run_number}\")\n        print (self.results_df)\n\n# Class representing a Trial for our simulation - a batch of simulation runs.\nclass Trial:\n    # The constructor sets up a pandas dataframe that will store the key\n    # results from each run against run number, with run number as the index.\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Recep\"] = [0.0] ##NEW\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to print out the results from the trial.  In real world models,\n    # you'd likely save them as well as (or instead of) printing them\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n    # Method to run a trial\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results (just mean queuing time\n        # here) and store it against the run number in the trial results\n        # dataframe.\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            my_model.run()\n\n            ##NEW (added receptionist queuing mean as first item to list)\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_recep,\n                                              my_model.mean_q_time_nurse]\n\n        # Once the trial (ie all runs) has completed, print the final results\n        self.print_trial_results()\n\nLet’s run the updated code and see the outputs.\n\n# Create an instance of the Trial class\nmy_trial = Trial()\n\n# Call the run_trial method of our Trial object\nmy_trial.run_trial()\n\nRun Number 0\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         3.908465      0.000000         4.810076\n2               1.007924         2.425778      2.384298         5.931214\n3               2.864321         5.265764      3.049747         7.235802\n4               7.026994         3.065513      7.220036         1.412063\n5               6.007121         1.021313      7.610786         1.312094\n6               5.739723         1.212116      7.710765         0.699759\n7               6.376578         5.094711      3.315813         7.172972\n8               9.877366         1.954398      8.534387         9.693221\n9               0.000000         1.709180     15.144910         0.604475\n10              0.000000         0.684776      4.482510         0.166021\n11              0.000000         0.538164      0.000000         3.023588\n12              0.000000         1.401613      0.000000         2.338043\n13              0.000000         1.201892      0.000000        13.173759\n14              0.000000         0.097644      9.259440         0.039140\n15              0.000000         1.127961      4.986963         1.494855\n16              0.316057         2.381409      4.100408        14.223843\n17              0.000000         1.055400      8.865473         2.466230\n18              0.000000         1.257277      5.017149         1.815353\n19              0.000000         0.578747      4.210253         2.747034\n20              0.000000         2.015308      1.496748        11.153727\n21              0.000000         0.016018      9.031671         5.890917\n22              0.000000        13.885203      0.000000         1.656657\n23             13.878604         0.050650           NaN              NaN\n24              8.887483         0.092524           NaN              NaN\n25              4.041810         1.366750           NaN              NaN\nRun Number 1\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         2.508730      0.000000         2.618139\n2               0.000000         0.689242      0.000000         4.148692\n3               0.000000        10.788640      0.000000        11.088807\n4               9.219122         6.299444      4.789363         5.217091\n5              15.120014         0.000591     10.005863        10.321771\n6               3.339996         2.372950     17.954685         8.920108\n7               0.000000         1.501544     24.427264         6.135807\n8               0.000000         0.285908     28.935447         7.884859\n9               0.281078         1.209147     35.611159         4.593603\n10              0.000000         0.308586     38.840769        15.777422\n11              0.000000         0.767410     51.777626        28.710768\n12              0.000000         0.054984           NaN              NaN\n13              0.000000         9.930037           NaN              NaN\n14              9.766138         1.064394           NaN              NaN\n15              4.091907         2.701439           NaN              NaN\n16              0.767923         2.878335           NaN              NaN\n17              0.000000         6.692054           NaN              NaN\n18              0.000000         5.504358           NaN              NaN\n19              0.559725         0.835440           NaN              NaN\n20              0.000000         5.384489           NaN              NaN\n21              0.591742         1.278657           NaN              NaN\n22              1.110761         1.332944           NaN              NaN\n23              0.000000         0.672932           NaN              NaN\n24              0.000000         0.579908           NaN              NaN\n25              0.000000         0.422514           NaN              NaN\nRun Number 2\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         2.436303      0.000000        24.751003\n2               1.001967         0.995483     23.755520         4.760665\n3               0.000000         0.378849     26.082426        44.354192\n4               0.000000         5.020634     64.192316         0.715372\n5               3.860986         2.236000     62.671689         1.300283\n6               5.848847         2.487496     61.484475        11.069607\n7               8.199134         1.174669     71.379413         4.112884\n8               0.000000         6.736664     67.362842         5.993710\n9               0.000000         0.162537     62.505556        11.815918\n10              0.000000         1.437341     71.742134         5.342744\n11              0.000000         0.721897     72.327328         0.875929\n12              0.000000         1.447694     71.358848         1.935858\n13              0.000000         0.204894     68.018687         0.027401\n14              0.000000         0.602961     62.947355         1.043763\n15              0.000000         0.320057           NaN              NaN\n16              0.000000         1.692276           NaN              NaN\n17              0.838142         0.788132           NaN              NaN\n18              0.000000         0.928821           NaN              NaN\n19              0.000000         1.620655           NaN              NaN\n20              0.000000         0.184271           NaN              NaN\n21              0.049550         0.533485           NaN              NaN\n22              0.000000         5.609142           NaN              NaN\n23              1.276208         0.253883           NaN              NaN\n24              1.033918         0.694520           NaN              NaN\n25              0.000000         0.479596           NaN              NaN\n26              0.000000         0.594849           NaN              NaN\nRun Number 3\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         2.689273      0.000000         6.885636\n2               0.000000         4.637288      2.002526         9.099906\n3               0.000000         0.307638      9.039319        11.108892\n4               0.000000         0.937209     17.146475        10.063516\n5               0.000000         0.296760     24.689360         1.993444\n6               0.000000         1.100152     23.913560         3.140078\n7               0.000000         2.688328     18.579933        16.105501\n8               0.000000         3.697347     28.148516        20.920290\n9               3.036238         0.139472     48.929333         0.467529\n10              0.485012         0.774319     48.622543         1.541201\n11              0.000000         3.578088     31.265576         4.034141\n12              2.492442         0.252295     35.047423         5.229023\n13              0.422273         2.280896     37.995550        14.392781\n14              0.636625         1.634324     50.754007         1.842609\n15              0.544886         6.864999     45.731617        11.703382\n16              5.705061         3.978317           NaN              NaN\n17              6.453051         1.687459           NaN              NaN\n18              8.094127         0.749572           NaN              NaN\n19              4.649701         2.345388           NaN              NaN\n20              2.613344         6.746814           NaN              NaN\n21              4.675568         1.328748           NaN              NaN\n22              5.269457         0.146620           NaN              NaN\n23              0.186636         0.600106           NaN              NaN\n24              0.000000         2.217133           NaN              NaN\n25              0.000000         0.302353           NaN              NaN\n26              0.000000         1.319433           NaN              NaN\n27              0.000000         0.807527           NaN              NaN\n28              0.000000         5.733885           NaN              NaN\n29              0.000000         4.524311           NaN              NaN\n30              3.305403         1.720178           NaN              NaN\n31              1.800999         0.177824           NaN              NaN\nRun Number 4\n            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse\nPatient ID                                                              \n1               0.000000         1.456796      0.000000         0.744151\n2               0.000000         0.961982      0.000000         1.202800\n3               0.000000         1.600586      0.000000         0.782337\n4               0.646706         8.455906      0.000000         0.572545\n5               7.551473         1.973260      0.000000         8.882861\n6               7.489199         0.109267      8.773594        11.050730\n7               7.466960         1.583917     18.240406         5.838412\n8               8.950710         4.446558     19.632260         0.257303\n9              13.073646         0.639828     19.249735         3.623908\n10              9.194307         3.386393     19.487250         0.030353\n11              9.869384         1.760865     17.756739         6.914418\n12              3.889509         0.833786     23.837372        16.497643\n13              0.000000         3.155680     36.273470         3.285768\n14              2.640301         0.146241     39.412997         2.923466\n15              0.000000         0.813641     38.546572         4.698622\n16              0.000000         2.620670     39.073569         3.681985\n17              0.000000         0.737193     33.941359         5.077206\n18              0.000000         3.326477     17.562596         1.439992\n19              0.000000         1.441529     11.161251         4.142044\n20              0.000000         0.092195     11.072772         2.197602\n21              0.000000         0.035774     12.165026         1.309208\n22              0.000000         0.923299      0.000000         8.828497\n23              0.000000         0.083832      0.000000         2.387240\nTrial Results\n            Mean Q Time Recep  Mean Q Time Nurse\nRun Number                                      \n0                    2.640959           4.837334\n1                    1.793936          19.303834\n2                    0.850337          56.130614\n3                    1.624865          28.124383\n4                    3.077052          15.921172",
    "crumbs": [
      "extending_your_model.html",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>An example simpy model - multiple activities</span>"
    ]
  },
  {
    "objectID": "reneging_balking_jockeying.html",
    "href": "reneging_balking_jockeying.html",
    "title": "12  Reneging, balking and jockeying",
    "section": "",
    "text": "Not all queues run “as planned”. We may wish to model behaviours where entities stop waiting, switch queues, or never join the queue in the first place.\nReneging refers to an entity removing themselves from a queue after a certain amount of time has elapsed (eg person not willing to wait any longer, or test sample no longer being viable)\nBalking refers to an entity not entering a queue in the first place because of the length and / or capacity of the queue (eg person seeing long queue or no capacity in waiting room)\nJockeying refers to an entity switching queues in the hope of reducing queuing time. (eg switching till queues at the supermarket)",
    "crumbs": [
      "advanced_concepts.html",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Reneging, balking and jockeying</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "model_warm_up.html",
    "href": "model_warm_up.html",
    "title": "9  Warm Up Periods",
    "section": "",
    "text": "9.1 How long should a warm-up period be?\nThe length of the warm up period is up to you as the modeller to define.\nYou could be very precise about analysing it and use statistical testing to identify when the system reaches equilibrium (see https://eudl.eu/pdf/10.4108/ICST.SIMUTOOLS2009.5603 as an example).\nOr you could plot what’s happening over time by eye and make an estimate.\nOr you could just set your warm up period long enough that it’ll be representative when it starts collecting results.",
    "crumbs": [
      "extending_your_model.html",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Warm Up Periods</span>"
    ]
  },
  {
    "objectID": "model_warm_up.html#implementing-the-warm-up-period",
    "href": "model_warm_up.html#implementing-the-warm-up-period",
    "title": "9  Warm Up Periods",
    "section": "9.2 Implementing the warm-up period",
    "text": "9.2 Implementing the warm-up period\nImplementing a warm up period in SimPy is really easy.\nWe just simply check the current time whenever we go to calculate / store a result, and see if it’s beyond the warm up period. If it is, we do it. If it’s not, we don’t.\nLet’s look at an example. This is a slightly amended version of the model of patients coming in for a nurse consultation with a few tweaks (longer duration, more runs, added trial results calculation)\nWe’re going to assume this is a system that’s open 24 hours - let’s imagine this is a triage function at an emergency department.\nI’ve marked the bits I’ve added to include warm up with ##NEW\n\n9.2.1 The g class\nFirst we add in a new parameter - the length of the warm-up period.\nHere, the sim duration has been set to 2880, and the warm-up-period to half of this (1440). You don’t need to stick to this pattern - your warm-up could even be longer than your results collection if you want!\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    # Simulation meta parameters\n    sim_duration = 2880\n    warm_up_period = 1440 ##NEW - this will be in addition to the sim_duration\n    number_of_runs = 100\n\n\n\n\n\n\n\nTip\n\n\n\nIf you find it easier to keep track of, you could define your warm-up like this instead.\n\nresults_collection_period = 2880\nwarm_up_period = 1440\ntotal_sim_duration = results_collection_period + warm_up_period\n\n\n\n\n\n9.2.2 The patient class\nOur patient class is unchanged.\n\n\n9.2.3 The model class\nIn the model class, the ‘attend_clinic’ method changes.\nWe look at the current elapsed simulation time with the attribute self.env.now\nThen, whenever a patient attends the clinic and is using a nurse resource, we check whether the current simulation time is later than the number of time units we’ve set as our warm-up.\n\n9.2.3.1 The attend_clinic method\n\n# Generator function representing pathway for patients attending the\n# clinic.\ndef attend_clinic(self, patient):\n    # Nurse consultation activity\n    start_q_nurse = self.env.now\n\n    with self.nurse.request() as req:\n        yield req\n\n        end_q_nurse = self.env.now\n\n        patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n        ##NEW - this checks whether the warm up period has passed before\n        # adding any results\n        if self.env.now &gt; g.warm_up_period:\n            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                patient.q_time_nurse\n            )\n\n        sampled_nurse_act_time = random.expovariate(1.0 /\n                                                    g.mean_n_consult_time)\n\n        yield self.env.timeout(sampled_nurse_act_time)\n\nFor example, if the simulation time is at 840 and our warm_up is 1440, this bit of code - which adds the queuing time for this patient to our records - won’t run:\n\nself.results_df.at[patient.id, \"Q Time Nurse\"] = (\n    patient.q_time_nurse\n)\n\nHowever, if the simulation time is 1680, for example, it will.\n\n\n\n9.2.4 the calculate_run_results method\nAs we now won’t count the first patient, we need to remove the dummy first patient result entry we created when we set up the dataframe.\n\n# Method to calculate and store results over the run\ndef calculate_run_results(self):\n    self.results_df.drop([1], inplace=True) ##NEW\n\n    self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n\n9.2.4.1 The run method\nNext we need to tweak the duration of our model to reflect the combination of the period we want to collect results for and the warm-up period.\n\n# Method to run a single run of the simulation\ndef run(self):\n    # Start up DES generators\n    self.env.process(self.generator_patient_arrivals())\n\n    # Run for the duration specified in g class\n    ##NEW - we need to tell the simulation to run for the specified duration\n    # + the warm up period if we still want the specified duration in full\n    self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n    # Calculate results over the run\n    self.calculate_run_results()\n\n    # Print patient level results for this run\n    print (f\"Run Number {self.run_number}\")\n    print (self.results_df)\n\n\n\n\n9.2.5 The Trial class\nOur trial class is unchanged.",
    "crumbs": [
      "extending_your_model.html",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Warm Up Periods</span>"
    ]
  },
  {
    "objectID": "model_warm_up.html#the-impact-of-the-warm-up-period",
    "href": "model_warm_up.html#the-impact-of-the-warm-up-period",
    "title": "9  Warm Up Periods",
    "section": "9.3 The impact of the warm-up period",
    "text": "9.3 The impact of the warm-up period\nLet’s compare the results we get with and without the warm-up period.\n\n9.3.1 Editing our results method\nTo make it easier to look at the outputs, I’m going to modify two methods slightl.\nFirst, we modify the run method of the Model class slightly to swap from print the patient level dataframes to returning them as an output.\n\n# Method to run a single run of the simulation\ndef run(self):\n    # Start up DES generators\n    self.env.process(self.generator_patient_arrivals())\n\n    # Run for the duration specified in g class\n    # We need to tell the simulation to run for the specified duration\n    # + the warm up period if we still want the specified duration in full\n    self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n    # Calculate results over the run\n    self.calculate_run_results()\n\n    # Return patient level results for this run\n    return (self.results_df) ##NEW\n\nNext, we modify the run_trial method of the Trial class so that we get multiple outputs: the full patient level dataframes, a summary of results per trial, and an overall average figure for all of the trials.\n\n# Method to run a trial\ndef run_trial(self):\n    # Run the simulation for the number of runs specified in g class.\n    # For each run, we create a new instance of the Model class and call its\n    # run method, which sets everything else in motion.  Once the run has\n    # completed, we grab out the stored run results and store it against\n    # the run number in the trial results dataframe. We also return the\n    # full patient-level dataframes.\n\n    # First, create an empty list for storing our patient-level dataframes.\n    results_dfs = []\n\n    for run in range(g.number_of_runs):\n        my_model = Model(run)\n        patient_level_results = my_model.run()\n\n        print( self.df_trial_results)\n        # First let's record our mean wait time for this run\n        self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n        # Next let's work on our patient-level results dataframes\n        # We start by rounding everything to 2 decimal places\n        patient_level_results = patient_level_results.round(2)\n        # Add a new column recording the run\n        patient_level_results['run'] = run\n        # Now we're just going to add this to our empty list (or, after the first\n        # time we loop through, as an extra dataframe in our list)\n        results_dfs.append(patient_level_results)\n\n    all_results_patient_level = pd.concat(results_dfs)\n\n    # This calculates the attribute self.mean_q_time_nurse_trial\n    self.calculate_means_over_trial()\n\n    # Once the trial (ie all runs) has completed, return the results\n    return self.df_trial_results, all_results_patient_level, self.mean_q_time_nurse_trial\n\n\n\n9.3.2 The full updated code\n\nimport simpy\nimport random\nimport pandas as pd\n\n# Class to store global parameter values.\nclass g:\n    # Inter-arrival times\n    patient_inter = 5\n\n    # Activity times\n    mean_n_consult_time = 6\n\n    # Resource numbers\n    number_of_nurses = 1\n\n    # Simulation meta parameters\n    sim_duration = 2880\n    number_of_runs = 100\n    warm_up_period = 1440 ##NEW - this will be in addition to the sim_duration\n\n# Class representing patients coming in to the clinic.\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.q_time_nurse = 0\n\n# Class representing our model of the clinic.\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n\n        # Set up resources\n        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.results_df = pd.DataFrame()\n        self.results_df[\"Patient ID\"] = [1]\n        self.results_df[\"Q Time Nurse\"] = [0.0]\n        self.results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_nurse = 0\n\n    # Generator function that represents the DES generator for patient arrivals\n    def generator_patient_arrivals(self):\n        while True:\n            self.patient_counter += 1\n\n            p = Patient(self.patient_counter)\n\n            self.env.process(self.attend_clinic(p))\n\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n    # Generator function representing pathway for patients attending the\n    # clinic.\n    def attend_clinic(self, patient):\n        # Nurse consultation activity\n        start_q_nurse = self.env.now\n\n        with self.nurse.request() as req:\n            yield req\n\n            end_q_nurse = self.env.now\n\n            patient.q_time_nurse = end_q_nurse - start_q_nurse\n\n            ##NEW - this checks whether the warm up period has passed before\n            # adding any results\n            if self.env.now &gt; g.warm_up_period:\n                self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n                    patient.q_time_nurse\n                )\n\n            sampled_nurse_act_time = random.expovariate(1.0 /\n                                                        g.mean_n_consult_time)\n\n            yield self.env.timeout(sampled_nurse_act_time)\n\n    # Method to calculate and store results over the run\n    def calculate_run_results(self):\n        ##NEW - as we now won't count the first patient, we need to remove\n        # the dummy first patient result entry we created when we set up the\n        # dataframe\n        self.results_df.drop([1], inplace=True)\n\n        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n\n    # Method to run a single run of the simulation\n    def run(self):\n        # Start up DES generators\n        self.env.process(self.generator_patient_arrivals())\n\n        # Run for the duration specified in g class\n        ##NEW - we need to tell the simulation to run for the specified duration\n        # + the warm up period if we still want the specified duration in full\n        self.env.run(until=(g.sim_duration + g.warm_up_period))\n\n        # Calculate results over the run\n        self.calculate_run_results()\n\n        # Return patient level results for this run\n        return (self.results_df)\n\n# Class representing a Trial for our simulation\nclass Trial:\n    # Constructor\n    def  __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [0]\n        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_nurse_trial = (\n            self.df_trial_results[\"Mean Q Time Nurse\"].mean()\n        )\n\n    def run_trial(self):\n        # Run the simulation for the number of runs specified in g class.\n        # For each run, we create a new instance of the Model class and call its\n        # run method, which sets everything else in motion.  Once the run has\n        # completed, we grab out the stored run results and store it against\n        # the run number in the trial results dataframe. We also return the\n        # full patient-level dataframes.\n\n        # First, create an empty list for storing our patient-level dataframes.\n        results_dfs = []\n\n        for run in range(g.number_of_runs):\n            my_model = Model(run)\n            patient_level_results = my_model.run()\n\n            print( self.df_trial_results)\n            # First let's record our mean wait time for this run\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_nurse]\n\n            # Next let's work on our patient-level results dataframes\n            # We start by rounding everything to 2 decimal places\n            patient_level_results = patient_level_results.round(2)\n            # Add a new column recording the run\n            patient_level_results['run'] = run\n            # Now we're just going to add this to our empty list (or, after the first\n            # time we loop through, as an extra dataframe in our list)\n            results_dfs.append(patient_level_results)\n\n        all_results_patient_level = pd.concat(results_dfs)\n\n        # This calculates the attribute self.mean_q_time_nurse_trial\n        self.calculate_means_over_trial()\n\n        # Once the trial (ie all runs) has completed, return the results\n        return self.df_trial_results, all_results_patient_level, self.mean_q_time_nurse_trial\n\n    # Method to print trial results, including averages across runs\n    def print_trial_results(self):\n        print (\"Trial Results\")\n        print (self.df_trial_results)\n\n        print (f\"Mean Q Nurse : {self.mean_q_time_nurse_trial:.1f} minutes\")\n\n# Create new instance of Trial and run it\nmy_trial = Trial()\ndf_trial_results_warmup, all_results_patient_level_warmup, means_over_trial_warmup = my_trial.run_trial()\n\n            Mean Q Time Nurse\nRun Number                   \n0                         0.0\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n52                 527.372768\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n52                 527.372768\n53                 472.546605\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n52                 527.372768\n53                 472.546605\n54                 517.627279\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n52                 527.372768\n53                 472.546605\n54                 517.627279\n55                 590.547122\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n52                 527.372768\n53                 472.546605\n54                 517.627279\n55                 590.547122\n56                 381.730091\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n52                 527.372768\n53                 472.546605\n54                 517.627279\n55                 590.547122\n56                 381.730091\n57                 341.633705\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n52                 527.372768\n53                 472.546605\n54                 517.627279\n55                 590.547122\n56                 381.730091\n57                 341.633705\n58                 467.263951\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n5                  375.618990\n6                  522.095470\n7                  696.886072\n8                  380.126224\n9                  600.687628\n10                 648.032692\n11                 530.526771\n12                 702.903960\n13                 592.567158\n14                 361.889033\n15                 270.349595\n16                 661.456803\n17                 688.852084\n18                 579.315347\n19                 449.154504\n20                 445.259793\n21                 348.569912\n22                 407.439485\n23                 378.290103\n24                 267.030669\n25                 364.555975\n26                 556.820358\n27                 559.756746\n28                 358.791384\n29                 515.652960\n30                 634.998652\n31                 498.133949\n32                 577.562818\n33                 337.666391\n34                 662.587095\n35                 618.610409\n36                 394.588440\n37                 703.695292\n38                 445.519267\n39                 460.973322\n40                 539.969621\n41                 581.633322\n42                 300.169765\n43                 615.031508\n44                 662.281359\n45                 492.001375\n46                 341.255964\n47                 341.188581\n48                 198.041953\n49                 437.388598\n50                 393.075679\n51                 593.670405\n52                 527.372768\n53                 472.546605\n54                 517.627279\n55                 590.547122\n56                 381.730091\n57                 341.633705\n58                 467.263951\n59                 437.125579\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n56                 381.730091\n57                 341.633705\n58                 467.263951\n59                 437.125579\n60                 358.786351\n\n[61 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n57                 341.633705\n58                 467.263951\n59                 437.125579\n60                 358.786351\n61                 563.183549\n\n[62 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n58                 467.263951\n59                 437.125579\n60                 358.786351\n61                 563.183549\n62                 480.171585\n\n[63 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n59                 437.125579\n60                 358.786351\n61                 563.183549\n62                 480.171585\n63                 764.349210\n\n[64 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n60                 358.786351\n61                 563.183549\n62                 480.171585\n63                 764.349210\n64                 538.400031\n\n[65 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n61                 563.183549\n62                 480.171585\n63                 764.349210\n64                 538.400031\n65                 362.936591\n\n[66 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n62                 480.171585\n63                 764.349210\n64                 538.400031\n65                 362.936591\n66                 397.694784\n\n[67 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n63                 764.349210\n64                 538.400031\n65                 362.936591\n66                 397.694784\n67                 675.132784\n\n[68 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n64                 538.400031\n65                 362.936591\n66                 397.694784\n67                 675.132784\n68                 573.489690\n\n[69 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n65                 362.936591\n66                 397.694784\n67                 675.132784\n68                 573.489690\n69                 489.893006\n\n[70 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n66                 397.694784\n67                 675.132784\n68                 573.489690\n69                 489.893006\n70                 586.595968\n\n[71 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n67                 675.132784\n68                 573.489690\n69                 489.893006\n70                 586.595968\n71                 533.378067\n\n[72 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n68                 573.489690\n69                 489.893006\n70                 586.595968\n71                 533.378067\n72                 391.555045\n\n[73 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n69                 489.893006\n70                 586.595968\n71                 533.378067\n72                 391.555045\n73                 497.327859\n\n[74 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n70                 586.595968\n71                 533.378067\n72                 391.555045\n73                 497.327859\n74                 225.053302\n\n[75 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n71                 533.378067\n72                 391.555045\n73                 497.327859\n74                 225.053302\n75                 627.159443\n\n[76 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n72                 391.555045\n73                 497.327859\n74                 225.053302\n75                 627.159443\n76                 782.103448\n\n[77 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n73                 497.327859\n74                 225.053302\n75                 627.159443\n76                 782.103448\n77                 469.908654\n\n[78 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n74                 225.053302\n75                 627.159443\n76                 782.103448\n77                 469.908654\n78                 171.431792\n\n[79 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n75                 627.159443\n76                 782.103448\n77                 469.908654\n78                 171.431792\n79                 595.636257\n\n[80 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n76                 782.103448\n77                 469.908654\n78                 171.431792\n79                 595.636257\n80                 497.061101\n\n[81 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n77                 469.908654\n78                 171.431792\n79                 595.636257\n80                 497.061101\n81                 737.179226\n\n[82 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n78                 171.431792\n79                 595.636257\n80                 497.061101\n81                 737.179226\n82                 387.313009\n\n[83 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n79                 595.636257\n80                 497.061101\n81                 737.179226\n82                 387.313009\n83                 733.958094\n\n[84 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n80                 497.061101\n81                 737.179226\n82                 387.313009\n83                 733.958094\n84                 334.955912\n\n[85 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n81                 737.179226\n82                 387.313009\n83                 733.958094\n84                 334.955912\n85                 415.971914\n\n[86 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n82                 387.313009\n83                 733.958094\n84                 334.955912\n85                 415.971914\n86                 730.696510\n\n[87 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n83                 733.958094\n84                 334.955912\n85                 415.971914\n86                 730.696510\n87                 452.152887\n\n[88 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n84                 334.955912\n85                 415.971914\n86                 730.696510\n87                 452.152887\n88                 424.641910\n\n[89 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n85                 415.971914\n86                 730.696510\n87                 452.152887\n88                 424.641910\n89                 514.302842\n\n[90 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n86                 730.696510\n87                 452.152887\n88                 424.641910\n89                 514.302842\n90                 395.188513\n\n[91 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n87                 452.152887\n88                 424.641910\n89                 514.302842\n90                 395.188513\n91                 261.992464\n\n[92 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n88                 424.641910\n89                 514.302842\n90                 395.188513\n91                 261.992464\n92                 395.923477\n\n[93 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n89                 514.302842\n90                 395.188513\n91                 261.992464\n92                 395.923477\n93                 400.719056\n\n[94 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n90                 395.188513\n91                 261.992464\n92                 395.923477\n93                 400.719056\n94                 541.129257\n\n[95 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n91                 261.992464\n92                 395.923477\n93                 400.719056\n94                 541.129257\n95                 127.603847\n\n[96 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n92                 395.923477\n93                 400.719056\n94                 541.129257\n95                 127.603847\n96                 426.096894\n\n[97 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n93                 400.719056\n94                 541.129257\n95                 127.603847\n96                 426.096894\n97                 514.963214\n\n[98 rows x 1 columns]\n            Mean Q Time Nurse\nRun Number                   \n0                  506.740004\n1                  592.644428\n2                  482.608214\n3                  312.849487\n4                  400.711784\n...                       ...\n94                 541.129257\n95                 127.603847\n96                 426.096894\n97                 514.963214\n98                 469.735091\n\n[99 rows x 1 columns]\n\n\n\n\n            Mean Q Time Nurse\nRun Number                   \n0                         0.0\n            Mean Q Time Nurse\nRun Number                   \n0                   11.292146\n            Mean Q Time Nurse\nRun Number                   \n0                   11.292146\n1                   41.632921\n            Mean Q Time Nurse\nRun Number                   \n0                   11.292146\n1                   41.632921\n2                   16.421571\n            Mean Q Time Nurse\nRun Number                   \n0                   11.292146\n1                   41.632921\n2                   16.421571\n3                   18.177737\n\n\n\n\n9.3.3 Comparing the results\n\n9.3.3.1 Patient-level dataframes\nFirst, let’s look at the first five rows of our patient dataframes.\nWithout the warm-up, our patient IDs start at 1.\n\n9.3.3.1.1 Without warm-up\n\nall_results_patient_level.head()\n\n\n\n\n\n\n\n\n\nQ Time Nurse\nTime with Nurse\nrun\n\n\nPatient ID\n\n\n\n\n\n\n\n1\n0.00\n0.49\n0\n\n\n2\n0.00\n2.24\n0\n\n\n3\n1.52\n1.96\n0\n\n\n4\n0.00\n9.29\n0\n\n\n5\n8.41\n1.23\n0\n\n\n\n\n\n\n\n\n\n\n9.3.3.1.2 With warm-up\nWith the warm-up, our patient IDs start later.\n\nall_results_patient_level_warmup.head()\n\n\n\n\n\n\n\n\n\nQ Time Nurse\nrun\n\n\nPatient ID\n\n\n\n\n\n\n230\n274.01\n0\n\n\n231\n275.41\n0\n\n\n232\n276.35\n0\n\n\n233\n287.86\n0\n\n\n234\n284.38\n0\n\n\n\n\n\n\n\n\n\n\n\n9.3.3.2 Per-run results\n\n9.3.3.2.1 Without warm-up\n\ndf_trial_results.round(2).head()\n\n\n\n\n\n\n\n\n\nMean Q Time Nurse\n\n\nRun Number\n\n\n\n\n\n0\n11.29\n\n\n1\n41.63\n\n\n2\n16.42\n\n\n3\n18.18\n\n\n4\n5.41\n\n\n\n\n\n\n\n\n\n\n9.3.3.2.2 With warm-up\nWith the warm-up, our patient IDs start later.\n\ndf_trial_results_warmup.round(2).head()\n\n\n\n\n\n\n\n\n\nMean Q Time Nurse\n\n\nRun Number\n\n\n\n\n\n0\n506.74\n\n\n1\n592.64\n\n\n2\n482.61\n\n\n3\n312.85\n\n\n4\n400.71\n\n\n\n\n\n\n\n\n\n\n\n9.3.3.3 Overall results\nWithout the warm up, our overall average wait time is\n\n\n'18.59 minutes'\n\n\nWith the warm up, our overall average wait time is\n\n\n'483.07 minutes'\n\n\nYou can see overall that the warm-up time can have a very significant impact on our waiting times!\nLet’s look at this in a graph.\n\n\n9.3.3.4 Results over time\n\nimport plotly.express as px\n\ndf_trial_results = df_trial_results.reset_index()\ndf_trial_results['Warm Up'] = 'No Warm Up'\n\ndf_trial_results_warmup = df_trial_results_warmup.reset_index()\ndf_trial_results_warmup['Warm Up'] = 'With Warm Up'\n\nfig = px.histogram(\n    pd.concat([df_trial_results, df_trial_results_warmup]).round(2).reset_index(),\n    x=\"Warm Up\",\n    color=\"Run Number\", y=\"Mean Q Time Nurse\",\n    barmode='group',\n    title='Average Queue Times per Run - With and Without Warmups')\n\nfig.show()",
    "crumbs": [
      "extending_your_model.html",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Warm Up Periods</span>"
    ]
  },
  {
    "objectID": "an_example_simpy_model_branching.html",
    "href": "an_example_simpy_model_branching.html",
    "title": "7  An example simpy model - branching paths",
    "section": "",
    "text": "“Most real world systems aren’t linear!” we hear you say. “Some people go over here, some go over there.”\nYou want branching paths? Coming right up!\nSo this time, instead of this model\n\nOr this model\n\nWe will create something more like this:\n\nTo model a branching path, we can use our good old Python friend Conditional Logic.\nOften, the branches in a DES are based on probabilities that represent the proportion of patients (or whatever your entity is) that travel along a certain route. For example, the data might show that 60% of patients see a doctor after seeing a nurse.\nTo model this, we can randomly sample from a uniform distribution between 0 and 1, and compare the value to this probability. If we pick a value below the probability, then we say that the patient follows this route. Why does this work? Well…\n\n60% of values between 0 and 1 are below 0.6.\nTherefore, if there’s an equal chance of any value being picked (as is the case in a uniform distribution) then there’s a 60% probability of picking one below 0.6.\nWe can use this to emulate the probability of following a path.\n\n\n\n\n\n\nNote\n\n\n\nNot all branching paths will be probability-based.\nIt may be that some paths are followed depending on - the time of day - the type of patient - how long a patient spends in an activity - etc.\nIn these cases, you’d still use conditional logic, but just alter the condition you’re checking.\nFor the time of day, you’d want to check the current simulation time in the run.\nFor the type of patient, you may have stored this in an attribute of the patient.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThroughout the code, anything new that’s been added will be followed by the comment ##NEW - so look out for that in the following code chunks.",
    "crumbs": [
      "your_first_simpy_model.qmd",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>An example simpy model - branching paths</span>"
    ]
  },
  {
    "objectID": "exercise_gp.html",
    "href": "exercise_gp.html",
    "title": "8  Required outputs",
    "section": "",
    "text": "8.1 Goal\nOnce you’ve built the model, use it to - a) identify where you think the problem is - b) provide proposals for how you would fix it (this can include anything you like - they are open to suggestions - more resources, changes to processes to cut activity times, having the GP book the test, anything you can think of!\nTry different things, different solutions.",
    "crumbs": [
      "your_first_simpy_model.qmd",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Required outputs</span>"
    ]
  },
  {
    "objectID": "exercise_gp.html#goal",
    "href": "exercise_gp.html#goal",
    "title": "8  Required outputs",
    "section": "",
    "text": "Tip\n\n\n\nTake a copy of the original working file for the base case scenario first :)",
    "crumbs": [
      "your_first_simpy_model.qmd",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Required outputs</span>"
    ]
  }
]